{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilss\\\\Desktop\\\\Projects\\\\galerie-sens\\\\src\\\\pages\\\\bilderwand.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLocation, useState, useEffect } from 'react';\nimport ZurWand from './../components/zurwand';\nimport WandInfo from './../components/bilderwandInfo';\nimport Einzelbild from './../components/einzelbild'; // import { useParams } from 'react-router-dom'\n// hier müssen Bilder geladen werden\n// const bilder = []\n// bilder.map(...) erstelle <BildThumb />\n\nconst Bilderwand = props => {\n  _s();\n\n  const [firstRender, setFirstRender] = useState(false); // getElementsByClassName returns HTMLCollection not nodelist! Deswegen muss man dort ein bisschen nachhelfen:\n\n  HTMLCollection.prototype.forEach = Array.prototype.forEach;\n  const rootBG = document.getElementById('root');\n  rootBG.style.background = 'background:rgb(50,50,50)';\n\n  const checkForUnnecessaryArrows = () => {\n    const wrappers = document.getElementsByClassName('bilderwrapper');\n    const larrw = document.getElementById('leftarrow');\n    const rarrw = document.getElementById('rightarrow');\n\n    if (wrappers[0].style.left === '0%') {\n      larrw.style.display = 'none';\n    } else {\n      larrw.style.display = 'block';\n    }\n\n    if (wrappers[wrappers.length - 1].style.left === '0%') {\n      rarrw.style.display = 'none';\n    } else {\n      rarrw.style.display = 'block';\n    }\n  };\n\n  const getCSSLeftAsBareNumber = obj => {\n    // get css value str:\n    const origLeft = obj.style.left; // cut off '%':\n\n    const bareNum = origLeft.substring(0, origLeft.length - 1);\n    return parseInt(bareNum); // return bareNum\n  };\n\n  const slide = dir => {\n    let bildnummer;\n    const wrappers = document.getElementsByClassName('bilderwrapper');\n\n    if (dir === \"left\") {\n      wrappers.forEach(wrap => {\n        const number = getCSSLeftAsBareNumber(wrap);\n        console.log(\"before: \" + number);\n        wrap.style.left = number + 100 + '%';\n        console.log(number + 100);\n\n        if (number === 0) {\n          bildnummer = parseInt(wrap.children[0].id);\n        }\n      }); //window.setTimeout(window.location.href = \"http://localhost:3000/bilder/upcycling/\"+(bildnummer-1),2000)\n    } else if (dir === \"right\") {\n      wrappers.forEach(wrap => {\n        const number = getCSSLeftAsBareNumber(wrap);\n        console.log(\"before: \" + number);\n        wrap.style.left = number - 100 + '%';\n        console.log(number - 100);\n\n        if (number === 0) {\n          bildnummer = parseInt(wrap.children[0].id);\n        }\n      }); //window.setTimeout(window.location.href = \"http://localhost:3000/bilder/upcycling/\"+(bildnummer+1),2000)\n    }\n\n    console.log(bildnummer);\n  };\n\n  const arrownavigation = e => {\n    console.log(\"leftValues\");\n\n    if (e.currentTarget.id === \"leftarrow\") {\n      slide('left');\n    } else {\n      slide('right');\n    }\n\n    currentArt();\n    checkForUnnecessaryArrows();\n  }; // let { pathParams } = useParams(); abandoned due to REACT ISSUES...\n  // useEffect(()=>{console.log(pathParams)},[pathParams]);\n\n\n  const currentArt = () => {\n    // sets the state of selected art to the id number of the currently centered img \n    // used for arrow navigation including inside single art (arrow keys)\n    const wrappers = document.getElementsByClassName('bilderwrapper');\n    let wrapper;\n\n    for (const index in wrappers) {\n      if (typeof wrappers[index].style !== 'undefined') {\n        if (wrappers[index].style.left === '0%') {\n          wrapper = wrappers[index];\n        }\n      }\n    } // console.dir(wrapper)\n\n\n    setSelectedArt(wrapper.querySelector('img').id);\n  }; // Funktion, die je nach dem URL-Parameter oben in der Addresszeile \n  // (z.B. https://galerie-sens.de/bilder/suesses/3) auf das entsprechende Bild \"fährt\". \n  // Das brauchte etwas Bastelei:\n\n\n  let match = useLocation;\n  useEffect(() => {\n    if (!firstRender) {\n      // aktualisiere die oben definierte Variable die die Bildelemente enthält: \n      const wrappers = document.getElementsByClassName('bilderwrapper'); // wenn es mehr als eins sind, muss das Programm überhaupt erst aktiv werden, sonst springe nach unten:\n\n      if (wrappers.length > 1) {\n        // test: console.log(\"es gibt mehr als ein Bild\")\n        // erstelle eine Variable, die den genauen Text der URL, inkl. der Bildnummer, enthält:\n        const urlString = window.location.href; //lert(match)\n        // erstelle eine Variable, die eine Liste der Positionsnummern des Zeichens \"/\" enthält:\n        // (z.B. ist das letzte / an 5., 6., 12. und 32. Position, dann soll hier [5,6,12,21] erzeugt werden)\n\n        let indices = []; // eine Wiederholung, die diese URL-Zeichenkette Stelle für Stelle durchgeht, \n        // und wenn das jeweilige Zeichen ein / ist, dann füge diese Stelle der indices-Liste hinzu.\n\n        for (let i = 0; i < urlString.length; i++) {\n          if (urlString[i] === \"/\") indices.push(i);\n        } // erzeuge eine neue Zeichenkette, \n        // die alles von der obigen URL-Textvariablen abschneidet was vor und inkl. dem letzten \"/\" steht.\n        // Oder andersherum: die nur die Bild-Zahl am Ende übriglässt.\n\n\n        const outputStr = urlString.slice(indices[indices.length - 1] + 1); // Neue Variable: multipliziere diese Zahl mit 100, damit wir zu Positions-Prozenten für die Bewegung des Layouts kommen:\n        // diese Multiplikation macht aus der Zeichenkette automatisch eine Zahl\n        // Bsp. oben: das 4. Bild (ausgehend vom 0.) also sollten, \n        // ausgehend von left:0% alle Bilder um -3*100% nach links verschoben werden. \n\n        const leftIntegerValue = outputStr * 100; // wrappers sind die die Bilder umschließenden HTML-divs, für jeden dieser Elemente einmal das Style-Attribut \"links\" \n        // als reine Zahl auslesen (getCSSLeftAsBareNumber erledigt dies),\n        // und dann die oben ermittelte Hunderterzahl davon abziehen.\n\n        wrappers.forEach(wrap => {\n          const zahl = getCSSLeftAsBareNumber(wrap); //console.log(\"orig: \")\n          //console.log(zahl)\n\n          const outputNumber = zahl - leftIntegerValue + '%'; //console.log(\"output: \")\n          //console.log(outputNumber)\n\n          wrap.style.left = outputNumber;\n        }); // funktioniert! Jetzt muss ich nur noch die Navigation links / rechts anpassen:\n\n        checkForUnnecessaryArrows();\n        setFirstRender(true);\n      }\n    } //hier\n\n  }, [firstRender]); // CSS left value of all image wrappers must now deduct this value fron its current value.\n  // test: alert(urlParamNumber())\n\n  const [einzelAnsicht, setEinzelAnsicht] = useState(false);\n  const [wandInfo, setWandInfo] = useState(false);\n  const [selectedArt, setSelectedArt] = useState(0);\n  let SingleArtView = einzelAnsicht;\n  let WandInfoView = wandInfo; //setEinzelAnsicht(false) infinite loop because component re-renders\n  //alert(props.match.params)\n  // ### click auf Bild -> setEinzelAnsicht! && set Bildinfos\n\n  const style = {\n    header: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      top: 0,\n      height: 64,\n      position: 'fixed',\n      zIndex: 1\n    },\n    heading: {\n      height: 36,\n      zIndex: 2,\n      color: 'lightgrey',\n      pointerEvents: 'none',\n      fontSize: '1.5em'\n    },\n    wand: {\n      background: '#2b2b2b',\n      height: '100vh',\n      width: '100%',\n      position: 'fixed',\n      top: 0,\n      left: 0\n    },\n    arrowcontrols: {\n      position: 'absolute',\n      zIndex: 3,\n      color: 'rgb(240,240,240)',\n      display: 'flex',\n      alignItems: 'center',\n      left: 50,\n      height: '100%',\n      top: 0,\n      width: 'calc(100% - 100px)',\n      justifyContent: 'space-between',\n      fontSize: '2.5em',\n      flexDirection: 'row-reverse',\n      pointerEvents: 'none'\n    },\n    arrow: {\n      opacity: '0.6',\n      transition: 'opacity 0.2s ease',\n      fontWeight: 900,\n      cursor: 'pointer',\n      pointerEvents: 'all'\n    },\n    imagewrapper: {\n      position: 'absolute',\n      top: 0,\n      width: '100vw',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      transition: 'left 1s ease'\n    },\n    image: {\n      cursor: 'pointer',\n      display: 'inline',\n      opacity: 0,\n      animationName: 'fadein',\n      animationDuration: '0.4s',\n      animationDelay: '1s',\n      animationTimingFunction: 'ease',\n      animationFillMode: 'forwards',\n      height: '70%'\n    },\n    bildtitel: {\n      color: 'lightgrey'\n    }\n  }; // clickEvent auf IMG, \n  // dann <p className=\"bild_titel\" style={style.bildtitel}>{props.bilder[0].titel}</p> \n  // unter Einzelbildansicht (EBA)\n\n  const bilder = props.bilder.bilder;\n  /*\r\n  \t[i]\r\n  \t\t.titel\r\n  \t\t.beschreibung\r\n  \t\t.preis\r\n  \t\t.tags\r\n  \t\t.groesse.x/.y/.z\r\n  \t\t.gewicht\r\n  \t\t.altSrc // [filename2,filename3]\r\n  \t\t.source\r\n  \t\t.alt#txt\r\n  \t\t.verkauft // true,false\r\n  */\n  // NAVIGATION BY ARROW KEYS WILL NOT CALL CURRENTART FUNCTION !!!!!!\n\n  const wandInfoView = () => {\n    setWandInfo(true);\n    WandInfoView = true;\n  };\n\n  const singleArtView = el => {\n    // switching of single art \n    setSelectedArt(el.target.id);\n    setEinzelAnsicht(true);\n    SingleArtView = true;\n  };\n\n  const bilderHTML = bilder.map(bild => {\n    const left = bild.id * 100;\n    const wrapperstyleobj = JSON.stringify(style.imagewrapper);\n    const newwrapperstyle = JSON.parse(wrapperstyleobj);\n    newwrapperstyle.left = left + '%';\n    const imgstyleobj = JSON.stringify(style.image);\n    const newimgstyle = JSON.parse(imgstyleobj);\n\n    if (bild.schatten) {\n      newimgstyle.WebkitBoxShadow = '0px 0px 52px 0px rgba(0, 0, 0, 1)';\n      newimgstyle.MozBoxShadow = '0px 0px 52px 0px rgba(0, 0, 0, 1)';\n      newimgstyle.boxShadow = '0 0 10px rgba(0,0,0,1),0 0 30px rgba(0,0,0,0.85),0 0 40px rgba(0,0,0,0.45),0 0 50px rgba(0,0,0,0.3),0 0 60px rgba(0,0,0,0.25)';\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: bild.id,\n      className: \"bilderwrapper\",\n      style: newwrapperstyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: bild.id,\n      className: \"wandbild\",\n      style: newimgstyle,\n      alt: bilder[bild.id].altTxt,\n      src: bilder[bild.id].source,\n      onClick: el => {\n        singleArtView(el);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 86\n      }\n    }));\n  });\n  React.useEffect(function setupListener() {\n    function handleKeyPress(evt) {\n      const wrappers = document.getElementsByClassName('bilderwrapper');\n\n      if (document.querySelector('.bilderwrapper') !== null) {\n        //evt = evt || window.event\n        //alert(evt.keyCode)\n        if (evt.keyCode === 37) {\n          if (wrappers[0].style.left !== '0%') slide('left');\n        } else if (evt.keyCode === 39) {\n          if (wrappers[wrappers.length - 1].style.left !== '0%') slide('right');\n        } // re-focus on now centered art\n\n\n        currentArt(); // check buttons\n\n        checkForUnnecessaryArrows();\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyPress);\n    return function cleanupListener() {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  });\n\n  const arrowcontrols = bilder => {\n    if (bilder.length > 1) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"arrowcontrols\",\n        style: style.arrowcontrols,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"arrow\",\n        onClick: el => {\n          arrownavigation(el);\n        },\n        id: \"rightarrow\",\n        style: style.arrow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 6\n        }\n      }, \"\\u25E8\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"arrow\",\n        onClick: el => {\n          arrownavigation(el);\n        },\n        id: \"leftarrow\",\n        style: style.arrow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 6\n        }\n      }, \"\\u25E7\"), /*#__PURE__*/React.createElement(\"style\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 6\n        }\n      }, `.arrow:hover{opacity:1 !important}#leftarrow{display:none}`));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sctn sctn_bilderwand\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sctn_header\",\n    style: style.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"sctn_heading\",\n    style: style.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 5\n    }\n  }, props.titel), /*#__PURE__*/React.createElement(ZurWand, {\n    label: \"Anmerkungen\",\n    wandLaden: () => {\n      wandInfoView();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sctn_body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 4\n    }\n  }, arrowcontrols(props.bilder), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sctn_wand\",\n    style: style.wand,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 5\n    }\n  }, bilderHTML)), WandInfoView && /*#__PURE__*/React.createElement(WandInfo, {\n    titel: props.titel,\n    wandinfos: bilder,\n    schliessen: () => {\n      setWandInfo(false);\n      WandInfoView = false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 21\n    }\n  }), SingleArtView && /*#__PURE__*/React.createElement(Einzelbild, {\n    key: props.id,\n    bildinfos: props.bilder[selectedArt],\n    schliessen: () => {\n      setEinzelAnsicht(false);\n      SingleArtView = false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 22\n    }\n  }));\n};\n\n_s(Bilderwand, \"S4lwlvwZ5fCR8bnM8MeCOWOIkes=\");\n\n_c = Bilderwand;\nexport default Bilderwand;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bilderwand\");","map":{"version":3,"sources":["C:/Users/nilss/Desktop/Projects/galerie-sens/src/pages/bilderwand.js"],"names":["React","useLocation","useState","useEffect","ZurWand","WandInfo","Einzelbild","Bilderwand","props","firstRender","setFirstRender","HTMLCollection","prototype","forEach","Array","rootBG","document","getElementById","style","background","checkForUnnecessaryArrows","wrappers","getElementsByClassName","larrw","rarrw","left","display","length","getCSSLeftAsBareNumber","obj","origLeft","bareNum","substring","parseInt","slide","dir","bildnummer","wrap","number","console","log","children","id","arrownavigation","e","currentTarget","currentArt","wrapper","index","setSelectedArt","querySelector","match","urlString","window","location","href","indices","i","push","outputStr","slice","leftIntegerValue","zahl","outputNumber","einzelAnsicht","setEinzelAnsicht","wandInfo","setWandInfo","selectedArt","SingleArtView","WandInfoView","header","flexDirection","alignItems","justifyContent","top","height","position","zIndex","heading","color","pointerEvents","fontSize","wand","width","arrowcontrols","arrow","opacity","transition","fontWeight","cursor","imagewrapper","image","animationName","animationDuration","animationDelay","animationTimingFunction","animationFillMode","bildtitel","bilder","wandInfoView","singleArtView","el","target","bilderHTML","map","bild","wrapperstyleobj","JSON","stringify","newwrapperstyle","parse","imgstyleobj","newimgstyle","schatten","WebkitBoxShadow","MozBoxShadow","boxShadow","altTxt","source","setupListener","handleKeyPress","evt","keyCode","addEventListener","cleanupListener","removeEventListener","titel"],"mappings":"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","sourcesContent":["import React, { useLocation, useState, useEffect } from 'react'\r\nimport ZurWand from './../components/zurwand'\r\nimport WandInfo from './../components/bilderwandInfo'\r\nimport Einzelbild from './../components/einzelbild'\r\n// import { useParams } from 'react-router-dom'\r\n\r\n// hier müssen Bilder geladen werden\r\n// const bilder = []\r\n// bilder.map(...) erstelle <BildThumb />\r\n\r\n\r\nconst Bilderwand = props => {\r\n\r\n\tconst [firstRender, setFirstRender] = useState(false)\r\n\r\n\t// getElementsByClassName returns HTMLCollection not nodelist! Deswegen muss man dort ein bisschen nachhelfen:\r\n\tHTMLCollection.prototype.forEach = Array.prototype.forEach\r\n\r\n\tconst rootBG = document.getElementById('root')\r\n\trootBG.style.background = 'background:rgb(50,50,50)'\r\n\r\n\tconst checkForUnnecessaryArrows = () => {\r\n\r\n\t\tconst wrappers = document.getElementsByClassName('bilderwrapper')\r\n\t\tconst larrw = document.getElementById('leftarrow')\r\n\t\tconst rarrw = document.getElementById('rightarrow')\r\n\r\n\t\tif (wrappers[0].style.left === '0%') {\r\n\t\t\tlarrw.style.display = 'none'\r\n\t\t} else {\r\n\t\t\tlarrw.style.display = 'block'\r\n\t\t}\r\n\t\tif (wrappers[wrappers.length-1].style.left === '0%') {\r\n\t\t\trarrw.style.display = 'none'\r\n\t\t} else {\r\n\t\t\trarrw.style.display = 'block'\r\n\t\t}\r\n\t}\r\n\r\n\tconst getCSSLeftAsBareNumber = (obj) => {\r\n\t\t// get css value str:\r\n\t\tconst origLeft = obj.style.left\r\n\t\t// cut off '%':\r\n\t\tconst bareNum = origLeft.substring(0,origLeft.length-1)\t\r\n\t\treturn(parseInt(bareNum))\r\n\t\t// return bareNum\r\n\t}\r\n\r\n\tconst slide = dir => {\r\n\t\tlet bildnummer\r\n\t\tconst wrappers = document.getElementsByClassName('bilderwrapper')\r\n\t\t\r\n\t\tif (dir === \"left\") {\r\n\t\t\twrappers.forEach((wrap) => {\r\n\t\t\t\tconst number = getCSSLeftAsBareNumber(wrap)\r\n\t\t\t\tconsole.log(\"before: \"+number)\r\n\t\t\t\twrap.style.left = (number+100)+'%'\r\n\t\t\t\tconsole.log(number+100)\r\n\t\t\t\tif (number === 0) {\r\n\t\t\t\t\tbildnummer = parseInt(wrap.children[0].id)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t//window.setTimeout(window.location.href = \"http://localhost:3000/bilder/upcycling/\"+(bildnummer-1),2000)\r\n\t\t}\r\n\t\telse if (dir === \"right\"){\r\n\t\t\twrappers.forEach((wrap) => {\r\n\t\t\t\tconst number = getCSSLeftAsBareNumber(wrap)\r\n\t\t\t\tconsole.log(\"before: \"+number)\r\n\t\t\t\twrap.style.left = (number-100)+'%'\r\n\t\t\t\tconsole.log(number-100)\r\n\t\t\t\tif (number === 0) {\r\n\t\t\t\t\tbildnummer = parseInt(wrap.children[0].id)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t//window.setTimeout(window.location.href = \"http://localhost:3000/bilder/upcycling/\"+(bildnummer+1),2000)\r\n\t\t}\r\n\t\tconsole.log(bildnummer)\r\n\t}\r\n\r\n\r\n\tconst arrownavigation = (e) => {\r\n\t\t\t\t\r\n\t\tconsole.log(\"leftValues\")\r\n\t\tif (e.currentTarget.id === \"leftarrow\") {\r\n\t\t\tslide('left')\r\n\t\t}\r\n\t\telse {\r\n\t\t\tslide('right')\r\n\t\t}\r\n\t\tcurrentArt()\r\n\t\tcheckForUnnecessaryArrows()\r\n\t}\r\n\r\n\r\n\t// let { pathParams } = useParams(); abandoned due to REACT ISSUES...\r\n\t// useEffect(()=>{console.log(pathParams)},[pathParams]);\r\n\r\n\t\r\n\r\n\tconst currentArt = () => {\r\n\r\n\t\t// sets the state of selected art to the id number of the currently centered img \r\n\t\t// used for arrow navigation including inside single art (arrow keys)\r\n\r\n\t\tconst wrappers = document.getElementsByClassName('bilderwrapper')\r\n\r\n\t\tlet wrapper\r\n\t\tfor (const index in wrappers) {\r\n\t\t\tif (typeof wrappers[index].style !== 'undefined') {\r\n\t\t\t\tif (wrappers[index].style.left === '0%') {\r\n\t\t\t\t\twrapper = wrappers[index]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// console.dir(wrapper)\r\n\t\tsetSelectedArt(wrapper.querySelector('img').id)\r\n\t}\r\n\r\n\r\n\t// Funktion, die je nach dem URL-Parameter oben in der Addresszeile \r\n\t// (z.B. https://galerie-sens.de/bilder/suesses/3) auf das entsprechende Bild \"fährt\". \r\n\t// Das brauchte etwas Bastelei:\r\n\r\n\tlet match = useLocation;\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tif (!firstRender) {\r\n\t\t\t// aktualisiere die oben definierte Variable die die Bildelemente enthält: \r\n\t\t\tconst wrappers = document.getElementsByClassName('bilderwrapper')\r\n\r\n\t\t\t// wenn es mehr als eins sind, muss das Programm überhaupt erst aktiv werden, sonst springe nach unten:\r\n\t\t\tif (wrappers.length > 1) {\r\n\t\t\t\t// test: console.log(\"es gibt mehr als ein Bild\")\r\n\r\n\t\t\t\t// erstelle eine Variable, die den genauen Text der URL, inkl. der Bildnummer, enthält:\r\n\t\t\t\tconst urlString = window.location.href\r\n\r\n\t\t\t\t\r\n\t\t\t\t//lert(match)\r\n\r\n\t\t\t\t// erstelle eine Variable, die eine Liste der Positionsnummern des Zeichens \"/\" enthält:\r\n\t\t\t\t// (z.B. ist das letzte / an 5., 6., 12. und 32. Position, dann soll hier [5,6,12,21] erzeugt werden)\r\n\t\t\t\tlet indices = []\r\n\t\t\t\t// eine Wiederholung, die diese URL-Zeichenkette Stelle für Stelle durchgeht, \r\n\t\t\t\t// und wenn das jeweilige Zeichen ein / ist, dann füge diese Stelle der indices-Liste hinzu.\r\n\t\t\t\tfor(let i=0; i<urlString.length;i++) {\r\n\t\t\t    \tif (urlString[i] === \"/\") indices.push(i)\r\n\t\t\t\t}\r\n\t\t\t\t// erzeuge eine neue Zeichenkette, \r\n\t\t\t\t// die alles von der obigen URL-Textvariablen abschneidet was vor und inkl. dem letzten \"/\" steht.\r\n\t\t\t\t// Oder andersherum: die nur die Bild-Zahl am Ende übriglässt.\r\n\t\t\t\tconst outputStr = urlString.slice(indices[indices.length-1]+1)\r\n\r\n\t\t\t\t// Neue Variable: multipliziere diese Zahl mit 100, damit wir zu Positions-Prozenten für die Bewegung des Layouts kommen:\r\n\t\t\t\t// diese Multiplikation macht aus der Zeichenkette automatisch eine Zahl\r\n\t\t\t\t// Bsp. oben: das 4. Bild (ausgehend vom 0.) also sollten, \r\n\t\t\t\t// ausgehend von left:0% alle Bilder um -3*100% nach links verschoben werden. \r\n\t\t\t\tconst leftIntegerValue = outputStr*100\r\n\t\t\t\t\r\n\t\t\t\t// wrappers sind die die Bilder umschließenden HTML-divs, für jeden dieser Elemente einmal das Style-Attribut \"links\" \r\n\t\t\t\t// als reine Zahl auslesen (getCSSLeftAsBareNumber erledigt dies),\r\n\t\t\t\t// und dann die oben ermittelte Hunderterzahl davon abziehen.\r\n\r\n\t\t\t\twrappers.forEach((wrap) => {\r\n\t\t\t\t\tconst zahl = getCSSLeftAsBareNumber(wrap)\r\n\r\n\t\t\t\t\t//console.log(\"orig: \")\r\n\t\t\t\t\t//console.log(zahl)\r\n\t\t\t\t\tconst outputNumber = (zahl-leftIntegerValue)+'%' \r\n\t\t\t\t\t//console.log(\"output: \")\r\n\t\t\t\t\t//console.log(outputNumber)\r\n\t\t\t\t\twrap.style.left = outputNumber\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// funktioniert! Jetzt muss ich nur noch die Navigation links / rechts anpassen:\r\n\r\n\t\t\t\tcheckForUnnecessaryArrows()\r\n\t\t\t\tsetFirstRender(true)\r\n\t\t\t}\r\n\t\t}//hier\r\n\t\t\r\n\t}, [firstRender])\r\n\r\n\t\t\r\n\t\r\n\r\n\t// CSS left value of all image wrappers must now deduct this value fron its current value.\r\n\r\n\t// test: alert(urlParamNumber())\r\n\r\n\r\n\r\n\tconst [einzelAnsicht, setEinzelAnsicht] = useState(false)\r\n\tconst [wandInfo, setWandInfo] = useState(false)\r\n\tconst [selectedArt, setSelectedArt] = useState(0)\r\n\r\n\tlet SingleArtView = einzelAnsicht\r\n\tlet WandInfoView = wandInfo\r\n\r\n\t//setEinzelAnsicht(false) infinite loop because component re-renders\r\n\r\n\t//alert(props.match.params)\r\n\r\n\t// ### click auf Bild -> setEinzelAnsicht! && set Bildinfos\r\n\r\n\tconst style = {\r\n\t\theader:{\r\n\t\t\tdisplay:'flex',\r\n\t\t\tflexDirection: 'row',\r\n    \t\talignItems: 'center',\r\n    \t\tjustifyContent: 'space-between',\r\n    \t\ttop: 0,\r\n    \t\theight: 64,\r\n    \t\tposition: 'fixed',\r\n    \t\tzIndex: 1\r\n\t\t},\r\n\t\theading: {\r\n\t\t\theight: 36,\r\n\t\t\tzIndex:2,\r\n\t\t\tcolor:'lightgrey',\r\n\t\t\tpointerEvents: 'none',\r\n\t\t\tfontSize:'1.5em'\r\n\t\t},\r\n\t\twand:{\r\n\t\t\tbackground:'#2b2b2b',\r\n\t\t\theight:'100vh',\r\n\t\t\twidth:'100%',\r\n\t\t\tposition: 'fixed',\r\n\t\t    top: 0,\r\n\t\t    left: 0\r\n\t\t},\r\n\t\tarrowcontrols:{\r\n\t\t\tposition:'absolute',\r\n\t\t\tzIndex:3,\r\n\t\t\tcolor:'rgb(240,240,240)',\r\n\t\t\tdisplay:'flex',\r\n\t\t\talignItems:'center',\r\n\t\t\tleft:50,\r\n\t\t\theight:'100%',\r\n\t\t\ttop:0,\r\n\t\t\twidth:'calc(100% - 100px)',\r\n\t\t\tjustifyContent:'space-between',\r\n\t\t\tfontSize:'2.5em',\r\n\t\t\tflexDirection:'row-reverse',\r\n\t\t\tpointerEvents:'none'\r\n\t\t},\r\n\t\tarrow:{\r\n\t\t\topacity:'0.6',\r\n\t\t\ttransition:'opacity 0.2s ease',\r\n\t\t\tfontWeight:900,\r\n\t\t\tcursor:'pointer',\r\n\t\t\tpointerEvents:'all'\r\n\t\t},\r\n\t\timagewrapper:{\r\n\t\t\tposition:'absolute',\r\n\t\t\ttop:0,\r\n\t\t\twidth:'100vw',\r\n\t\t\theight:'100%',\r\n\t\t\tdisplay: 'flex',\r\n\t\t    flexDirection: 'row',\r\n\t\t    alignItems: 'center',\r\n\t\t    justifyContent: 'center',\r\n\t\t    transition: 'left 1s ease'\r\n\t\t},\r\n\t\timage:{\r\n\t\t\tcursor:'pointer',\r\n\t\t\tdisplay:'inline',\r\n\t\t\topacity:0,\r\n\t\t\tanimationName:'fadein',\r\n\t\t\tanimationDuration:'0.4s',\r\n\t\t\tanimationDelay:'1s',\r\n\t\t\tanimationTimingFunction: 'ease',\r\n\t\t\tanimationFillMode: 'forwards',\r\n\t\t\theight:'70%'\r\n\t\t},\r\n\t\tbildtitel:{\r\n\t\t\tcolor: 'lightgrey'\r\n\t\t}\r\n\t}\r\n\r\n\t// clickEvent auf IMG, \r\n\t// dann <p className=\"bild_titel\" style={style.bildtitel}>{props.bilder[0].titel}</p> \r\n\t// unter Einzelbildansicht (EBA)\r\n\r\n\tconst bilder = props.bilder.bilder\r\n\t/*\r\n\t\t[i]\r\n\t\t\t.titel\r\n\t\t\t.beschreibung\r\n\t\t\t.preis\r\n\t\t\t.tags\r\n\t\t\t.groesse.x/.y/.z\r\n\t\t\t.gewicht\r\n\t\t\t.altSrc // [filename2,filename3]\r\n\t\t\t.source\r\n\t\t\t.alt#txt\r\n\t\t\t.verkauft // true,false\r\n\t*/\r\n\r\n\r\n\t// NAVIGATION BY ARROW KEYS WILL NOT CALL CURRENTART FUNCTION !!!!!!\r\n\r\n\r\n\tconst wandInfoView = () => {\r\n\t\tsetWandInfo(true)\r\n\t\tWandInfoView = true\r\n\t}\r\n\r\n\tconst singleArtView = (el) => {\r\n\r\n\t\t// switching of single art \r\n\r\n\t\tsetSelectedArt(el.target.id)\r\n\t\tsetEinzelAnsicht(true)\r\n\t\tSingleArtView = true\r\n\t}\r\n\r\n\r\n\tconst bilderHTML = bilder.map((bild) => {\r\n\t\tconst left = bild.id*100\r\n\r\n\t\tconst wrapperstyleobj = JSON.stringify(style.imagewrapper)\r\n\t\tconst newwrapperstyle = JSON.parse(wrapperstyleobj)\r\n\t\tnewwrapperstyle.left=left+'%'\r\n\r\n\t\tconst imgstyleobj = JSON.stringify(style.image)\r\n\t\tconst newimgstyle = JSON.parse(imgstyleobj)\r\n\t\tif (bild.schatten) {\r\n\t\t\tnewimgstyle.WebkitBoxShadow='0px 0px 52px 0px rgba(0, 0, 0, 1)'\r\n\t\t\tnewimgstyle.MozBoxShadow   ='0px 0px 52px 0px rgba(0, 0, 0, 1)'\r\n\t\t\tnewimgstyle.boxShadow      ='0 0 10px rgba(0,0,0,1),0 0 30px rgba(0,0,0,0.85),0 0 40px rgba(0,0,0,0.45),0 0 50px rgba(0,0,0,0.3),0 0 60px rgba(0,0,0,0.25)'\r\n\t\t}\r\n\r\n        return (<div key={bild.id} className=\"bilderwrapper\" style={newwrapperstyle}><img id={bild.id} className=\"wandbild\" style={newimgstyle} alt={bilder[bild.id].altTxt} src={bilder[bild.id].source} onClick={(el)=>{singleArtView(el)}}/></div>)\r\n    })\r\n\r\n\t\r\n\r\n\r\n\r\n\tReact.useEffect(function setupListener() {\r\n\t    function handleKeyPress(evt) {\r\n\r\n\t\t\tconst wrappers = document.getElementsByClassName('bilderwrapper')\r\n\t\t\tif(document.querySelector('.bilderwrapper') !== null) {\r\n\t\t\t\t//evt = evt || window.event\r\n\t\t\t\t//alert(evt.keyCode)\r\n\r\n\t\t\t\tif (evt.keyCode === 37) {\r\n\r\n\t\t\t\t\tif (wrappers[0].style.left !== '0%') slide('left')\r\n\t\t\t\t}\r\n\t\t\t\telse if (evt.keyCode === 39) {\r\n\r\n\t\t\t\t\tif (wrappers[wrappers.length-1].style.left !== '0%') slide('right')\r\n\t\t\t    }\r\n\t\t\t\t// re-focus on now centered art\r\n\t\t\t\tcurrentArt()\r\n\t\t\t    // check buttons\r\n\t\t\t    checkForUnnecessaryArrows()\r\n\t\t\t}\r\n\t\r\n\t    }\r\n\t    window.addEventListener('keydown', handleKeyPress)\r\n\r\n\t    return function cleanupListener() {\r\n\t      window.removeEventListener('keydown', handleKeyPress)\r\n\t    }\r\n  \t})\r\n\r\n\r\n\r\n    const arrowcontrols = (bilder) => {\r\n    \tif (bilder.length > 1) {\r\n\r\n\t    \treturn(\r\n\t\t    \t<div className=\"arrowcontrols\" style={style.arrowcontrols}>\r\n\t\t\t\t\t<div className=\"arrow\" onClick={(el) => {arrownavigation(el)}} id=\"rightarrow\" style={style.arrow}>&#x25E8;</div>\r\n\t\t\t\t\t<div className=\"arrow\" onClick={(el) => {arrownavigation(el)}} id=\"leftarrow\"  style={style.arrow}>&#x25E7;</div>\r\n\t\t\t\t\t<style>\r\n\t\t  \t\t\t\t{`.arrow:hover{opacity:1 !important}#leftarrow{display:none}`}\r\n\t\t\t\t\t</style>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n    } \r\n\r\n\treturn (\r\n\t\t<div className=\"sctn sctn_bilderwand\">\r\n\t\t\t<div className=\"sctn_header\" style={style.header}>\r\n\t\t\t\t<h1 className=\"sctn_heading\" style={style.heading}>{props.titel}</h1>\r\n\t\t\t\t<ZurWand label=\"Anmerkungen\" wandLaden={() => {wandInfoView()}} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"sctn_body\">\r\n\t\t\t\t{arrowcontrols(props.bilder)}\r\n\t\t\t\t<div className=\"sctn_wand\" style={style.wand}>\r\n\t\t\t\t\t{bilderHTML}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{WandInfoView && <WandInfo titel={props.titel} wandinfos={bilder} schliessen={()=>{setWandInfo(false);WandInfoView = false}} />}\r\n\t\t\t{SingleArtView && <Einzelbild key={props.id} bildinfos={props.bilder[selectedArt]} schliessen={()=>{setEinzelAnsicht(false);SingleArtView = false}} />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Bilderwand"]},"metadata":{},"sourceType":"module"}