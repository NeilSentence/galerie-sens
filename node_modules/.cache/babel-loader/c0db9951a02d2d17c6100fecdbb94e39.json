{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nilss\\\\Desktop\\\\Projects\\\\galerie-sens\\\\src\\\\components\\\\scene.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Matter from \"matter-js\";\nconst STATIC_DENSITY = 15;\nconst PARTICLE_SIZE = 6;\nconst PARTICLE_BOUNCYNESS = 0.9;\nexport const Scene = prop => {\n  _s();\n\n  console.log(prop.display.menuDrop);\n  const boxRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [constraints, setContraints] = useState();\n  const [scene, setScene] = useState();\n  const [someStateValue, setSomeStateValue] = useState(false);\n\n  const handleResize = () => {\n    console.log(boxRef.current.getBoundingClientRect());\n    setContraints(boxRef.current.getBoundingClientRect());\n  };\n\n  const menuDrop = () => {\n    setSomeStateValue(!someStateValue);\n  };\n\n  useEffect(() => {\n    let Engine = Matter.Engine;\n    let Render = Matter.Render;\n    let World = Matter.World;\n    let Bodies = Matter.Bodies;\n    let engine = Engine.create({});\n    let render = Render.create({\n      element: boxRef.current,\n      engine: engine,\n      canvas: canvasRef.current,\n      options: {\n        background: \"transparent\",\n        wireframes: false\n      }\n    });\n    const floor = Bodies.rectangle(0, 0, 0, STATIC_DENSITY, {\n      isStatic: true,\n      render: {\n        fillStyle: \"blue\"\n      }\n    });\n    World.add(engine.world, [floor]);\n    Engine.run(engine);\n    Render.run(render);\n    setContraints(boxRef.current.getBoundingClientRect());\n    setScene(render);\n    window.addEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  useEffect(() => {\n    if (constraints) {\n      let {\n        width,\n        height\n      } = constraints; // Dynamically update canvas and bounds\n\n      scene.bounds.max.x = width;\n      scene.bounds.max.y = height;\n      scene.options.width = width;\n      scene.options.height = height;\n      scene.canvas.width = width;\n      scene.canvas.height = height; // Dynamically update floor\n\n      const floor = scene.engine.world.bodies[0];\n      Matter.Body.setPosition(floor, {\n        x: width / 2,\n        y: height + STATIC_DENSITY / 2\n      });\n      Matter.Body.setVertices(floor, [{\n        x: 0,\n        y: height\n      }, {\n        x: width,\n        y: height\n      }, {\n        x: width,\n        y: height + STATIC_DENSITY\n      }, {\n        x: 0,\n        y: height + STATIC_DENSITY\n      }]);\n    }\n  }, [scene, constraints]);\n  useEffect(() => {\n    // Add a new \"ball\" everytime `someStateValue` changes\n    if (scene) {\n      let {\n        width\n      } = constraints;\n      let randomX = Math.floor(Math.random() * -width) + width;\n      Matter.World.add(scene.engine.world, Matter.Bodies.circle(randomX, -PARTICLE_SIZE, PARTICLE_SIZE, {\n        restitution: PARTICLE_BOUNCYNESS\n      }));\n    }\n  }, [constraints, scene, someStateValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      border: \"1px solid white\",\n      padding: \"8px\",\n      display: prop.display\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: boxRef,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        pointerEvents: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Scene, \"xXnVE6qEgaXI0m2y0B2H+F5q2/E=\");\n\n_c = Scene;\nexport default Scene;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scene\");","map":{"version":3,"sources":["C:/Users/nilss/Desktop/Projects/galerie-sens/src/components/scene.js"],"names":["React","useEffect","useState","useRef","Matter","STATIC_DENSITY","PARTICLE_SIZE","PARTICLE_BOUNCYNESS","Scene","prop","console","log","display","menuDrop","boxRef","canvasRef","constraints","setContraints","scene","setScene","someStateValue","setSomeStateValue","handleResize","current","getBoundingClientRect","Engine","Render","World","Bodies","engine","create","render","element","canvas","options","background","wireframes","floor","rectangle","isStatic","fillStyle","add","world","run","window","addEventListener","removeEventListener","width","height","bounds","max","x","y","bodies","Body","setPosition","setVertices","randomX","Math","random","circle","restitution","position","border","padding","top","left","pointerEvents"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,mBAAmB,GAAG,GAA5B;AAIA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAAA;;AAE7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,OAAL,CAAaC,QAAzB;AAEA,QAAMC,MAAM,GAAGX,MAAM,CAAC,IAAD,CAArB;AACA,QAAMY,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,CAACa,WAAD,EAAcC,aAAd,IAA+Bf,QAAQ,EAA7C;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,EAAlC;AACA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,KAAD,CAApD;;AAGA,QAAMoB,YAAY,GAAG,MAAM;AACzBZ,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACS,OAAP,CAAeC,qBAAf,EAAZ;AACAP,IAAAA,aAAa,CAACH,MAAM,CAACS,OAAP,CAAeC,qBAAf,EAAD,CAAb;AACD,GAHD;;AAIA,QAAMX,QAAQ,GAAG,MAAM;AACrBQ,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,GAFD;;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,MAAM,GAAGrB,MAAM,CAACqB,MAApB;AACA,QAAIC,MAAM,GAAGtB,MAAM,CAACsB,MAApB;AACA,QAAIC,KAAK,GAAIvB,MAAM,CAACuB,KAApB;AACA,QAAIC,MAAM,GAAGxB,MAAM,CAACwB,MAApB;AACA,QAAIC,MAAM,GAAGJ,MAAM,CAACK,MAAP,CAAc,EAAd,CAAb;AACA,QAAIC,MAAM,GAAGL,MAAM,CAACI,MAAP,CAAc;AACzBE,MAAAA,OAAO,EAAElB,MAAM,CAACS,OADS;AAEzBM,MAAAA,MAAM,EAAEA,MAFiB;AAGzBI,MAAAA,MAAM,EAAElB,SAAS,CAACQ,OAHO;AAIzBW,MAAAA,OAAO,EAAE;AACPC,QAAAA,UAAU,EAAE,aADL;AAEPC,QAAAA,UAAU,EAAE;AAFL;AAJgB,KAAd,CAAb;AASA,UAAMC,KAAK,GAAGT,MAAM,CAACU,SAAP,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0BjC,cAA1B,EAA0C;AACtDkC,MAAAA,QAAQ,EAAE,IAD4C;AAEtDR,MAAAA,MAAM,EAAE;AACNS,QAAAA,SAAS,EAAE;AADL;AAF8C,KAA1C,CAAd;AAMAb,IAAAA,KAAK,CAACc,GAAN,CAAUZ,MAAM,CAACa,KAAjB,EAAwB,CAACL,KAAD,CAAxB;AACAZ,IAAAA,MAAM,CAACkB,GAAP,CAAWd,MAAX;AACAH,IAAAA,MAAM,CAACiB,GAAP,CAAWZ,MAAX;AACAd,IAAAA,aAAa,CAACH,MAAM,CAACS,OAAP,CAAeC,qBAAf,EAAD,CAAb;AACAL,IAAAA,QAAQ,CAACY,MAAD,CAAR;AACAa,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCvB,YAAlC;AACD,GA3BQ,EA2BN,EA3BM,CAAT;AA8BArB,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX2C,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCxB,YAArC;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,WAAJ,EAAiB;AACf,UAAI;AAAE+B,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBhC,WAAxB,CADe,CAGf;;AACAE,MAAAA,KAAK,CAAC+B,MAAN,CAAaC,GAAb,CAAiBC,CAAjB,GAAuBJ,KAAvB;AACA7B,MAAAA,KAAK,CAAC+B,MAAN,CAAaC,GAAb,CAAiBE,CAAjB,GAAuBJ,MAAvB;AACA9B,MAAAA,KAAK,CAACgB,OAAN,CAAca,KAAd,GAAuBA,KAAvB;AACA7B,MAAAA,KAAK,CAACgB,OAAN,CAAcc,MAAd,GAAuBA,MAAvB;AACA9B,MAAAA,KAAK,CAACe,MAAN,CAAac,KAAb,GAAuBA,KAAvB;AACA7B,MAAAA,KAAK,CAACe,MAAN,CAAae,MAAb,GAAuBA,MAAvB,CATe,CAWf;;AACA,YAAMX,KAAK,GAAGnB,KAAK,CAACW,MAAN,CAAaa,KAAb,CAAmBW,MAAnB,CAA0B,CAA1B,CAAd;AACAjD,MAAAA,MAAM,CAACkD,IAAP,CAAYC,WAAZ,CAAwBlB,KAAxB,EAA+B;AAC7Bc,QAAAA,CAAC,EAAEJ,KAAK,GAAG,CADkB;AAE7BK,QAAAA,CAAC,EAAEJ,MAAM,GAAG3C,cAAc,GAAG;AAFA,OAA/B;AAIAD,MAAAA,MAAM,CAACkD,IAAP,CAAYE,WAAZ,CAAwBnB,KAAxB,EAA+B,CAC7B;AAAEc,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAEJ;AAAX,OAD6B,EAE7B;AAAEG,QAAAA,CAAC,EAAEJ,KAAL;AAAYK,QAAAA,CAAC,EAAEJ;AAAf,OAF6B,EAG7B;AAAEG,QAAAA,CAAC,EAAEJ,KAAL;AAAYK,QAAAA,CAAC,EAAEJ,MAAM,GAAG3C;AAAxB,OAH6B,EAI7B;AAAE8C,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAEJ,MAAM,GAAG3C;AAApB,OAJ6B,CAA/B;AAMD;AACF,GAzBQ,EAyBN,CAACa,KAAD,EAAQF,WAAR,CAzBM,CAAT;AA4BAf,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIiB,KAAJ,EAAW;AACT,UAAI;AAAE6B,QAAAA;AAAF,UAAY/B,WAAhB;AACA,UAAIyC,OAAO,GAAGC,IAAI,CAACrB,KAAL,CAAWqB,IAAI,CAACC,MAAL,KAAgB,CAACZ,KAA5B,IAAqCA,KAAnD;AACA3C,MAAAA,MAAM,CAACuB,KAAP,CAAac,GAAb,CACEvB,KAAK,CAACW,MAAN,CAAaa,KADf,EAEEtC,MAAM,CAACwB,MAAP,CAAcgC,MAAd,CAAqBH,OAArB,EAA8B,CAACnD,aAA/B,EAA8CA,aAA9C,EAA6D;AAC3DuD,QAAAA,WAAW,EAAEtD;AAD8C,OAA7D,CAFF;AAMD;AACF,GAZQ,EAYN,CAACS,WAAD,EAAcE,KAAd,EAAqBE,cAArB,CAZM,CAAT;AAcA,sBAEE;AACE,IAAA,KAAK,EAAE;AACL0C,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE,iBAFH;AAGLC,MAAAA,OAAO,EAAE,KAHJ;AAILpD,MAAAA,OAAO,EAAEH,IAAI,CAACG;AAJT,KADT;AAAA,2BAQE;AACE,MAAA,GAAG,EAAEE,MADP;AAEE,MAAA,KAAK,EAAE;AACLgD,QAAAA,QAAQ,EAAE,UADL;AAELG,QAAAA,GAAG,EAAE,CAFA;AAGLC,QAAAA,IAAI,EAAE,CAHD;AAILnB,QAAAA,KAAK,EAAE,MAJF;AAKLC,QAAAA,MAAM,EAAE,MALH;AAMLmB,QAAAA,aAAa,EAAE;AANV,OAFT;AAAA,6BAWE;AAAQ,QAAA,GAAG,EAAEpD;AAAb;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,UAFF;AAyBD,CA3HM;;GAAMP,K;;KAAAA,K;AA6Hb,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\r\nimport Matter from \"matter-js\"\r\n\r\nconst STATIC_DENSITY = 15\r\nconst PARTICLE_SIZE = 6\r\nconst PARTICLE_BOUNCYNESS = 0.9\r\n\r\n\r\n\r\nexport const Scene = (prop) => {\r\n\r\n  console.log(prop.display.menuDrop)\r\n\r\n  const boxRef = useRef(null)\r\n  const canvasRef = useRef(null)\r\n  const [constraints, setContraints] = useState()\r\n  const [scene, setScene] = useState()\r\n  const [someStateValue, setSomeStateValue] = useState(false)\r\n  \r\n\r\n  const handleResize = () => {\r\n    console.log(boxRef.current.getBoundingClientRect())\r\n    setContraints(boxRef.current.getBoundingClientRect())\r\n  }\r\n  const menuDrop = () => {\r\n    setSomeStateValue(!someStateValue)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let Engine = Matter.Engine\r\n    let Render = Matter.Render\r\n    let World  = Matter.World\r\n    let Bodies = Matter.Bodies\r\n    let engine = Engine.create({})\r\n    let render = Render.create({\r\n      element: boxRef.current,\r\n      engine: engine,\r\n      canvas: canvasRef.current,\r\n      options: {\r\n        background: \"transparent\",\r\n        wireframes: false,\r\n      },\r\n    })\r\n    const floor = Bodies.rectangle(0, 0, 0, STATIC_DENSITY, {\r\n      isStatic: true,\r\n      render: {\r\n        fillStyle: \"blue\",\r\n      },\r\n    })\r\n    World.add(engine.world, [floor])\r\n    Engine.run(engine)\r\n    Render.run(render)\r\n    setContraints(boxRef.current.getBoundingClientRect())\r\n    setScene(render)\r\n    window.addEventListener(\"resize\", handleResize)\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize)\r\n    }\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    if (constraints) {\r\n      let { width, height } = constraints\r\n\r\n      // Dynamically update canvas and bounds\r\n      scene.bounds.max.x   = width\r\n      scene.bounds.max.y   = height\r\n      scene.options.width  = width\r\n      scene.options.height = height\r\n      scene.canvas.width   = width\r\n      scene.canvas.height  = height\r\n      \r\n      // Dynamically update floor\r\n      const floor = scene.engine.world.bodies[0]\r\n      Matter.Body.setPosition(floor, {\r\n        x: width / 2,\r\n        y: height + STATIC_DENSITY / 2,\r\n      })\r\n      Matter.Body.setVertices(floor, [\r\n        { x: 0, y: height },\r\n        { x: width, y: height },\r\n        { x: width, y: height + STATIC_DENSITY },\r\n        { x: 0, y: height + STATIC_DENSITY },\r\n      ])\r\n    }\r\n  }, [scene, constraints])\r\n\r\n\r\n  useEffect(() => {\r\n    // Add a new \"ball\" everytime `someStateValue` changes\r\n    if (scene) {\r\n      let { width } = constraints\r\n      let randomX = Math.floor(Math.random() * -width) + width\r\n      Matter.World.add(\r\n        scene.engine.world,\r\n        Matter.Bodies.circle(randomX, -PARTICLE_SIZE, PARTICLE_SIZE, {\r\n          restitution: PARTICLE_BOUNCYNESS,\r\n        })\r\n      )\r\n    }\r\n  }, [constraints, scene, someStateValue])\r\n\r\n  return (\r\n    \r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        border: \"1px solid white\",\r\n        padding: \"8px\",\r\n        display: prop.display\r\n      }}\r\n    >\r\n      <div\r\n        ref={boxRef}\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          pointerEvents: \"none\",\r\n        }}\r\n      >\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}