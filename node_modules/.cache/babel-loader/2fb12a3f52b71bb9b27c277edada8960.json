{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nilss\\\\Desktop\\\\Projects\\\\galerie-sens\\\\src\\\\components\\\\scene.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Matter from \"matter-js\";\nconst STATIC_DENSITY = 15;\nexport const Scene = () => {\n  _s();\n\n  const boxRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [constraints, setContraints] = useState();\n  const [scene, setScene] = useState();\n  const [setSomeStateValue] = useState(false);\n\n  const handleResize = () => {\n    console.log(boxRef.current.getBoundingClientRect());\n    setContraints(boxRef.current.getBoundingClientRect());\n  };\n\n  useEffect(() => {\n    let Engine = Matter.Engine;\n    let Render = Matter.Render;\n    let World = Matter.World;\n    let Bodies = Matter.Bodies;\n    let engine = Engine.create({});\n    let render = Render.create({\n      element: boxRef.current,\n      engine: engine,\n      canvas: canvasRef.current,\n      options: {\n        background: \"transparent\",\n        wireframes: false\n      }\n    });\n    const floor = Bodies.rectangle(0, 0, 0, STATIC_DENSITY, {\n      isStatic: true,\n      render: {\n        fillStyle: \"blue\"\n      }\n    });\n    World.add(engine.world, [floor]);\n    Engine.run(engine);\n    Render.run(render);\n    setContraints(boxRef.current.getBoundingClientRect());\n    setScene(render);\n    window.addEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  useEffect(() => {\n    if (constraints) {\n      let {\n        width,\n        height\n      } = constraints; // Dynamically update canvas and bounds\n\n      scene.bounds.max.x = width;\n      scene.bounds.max.y = height;\n      scene.options.width = width;\n      scene.options.height = height;\n      scene.canvas.width = width;\n      scene.canvas.height = height; // Dynamically update floor\n\n      const floor = scene.engine.world.bodies[0];\n      Matter.Body.setPosition(floor, {\n        x: width / 2,\n        y: height + STATIC_DENSITY / 2\n      });\n      Matter.Body.setVertices(floor, [{\n        x: 0,\n        y: height\n      }, {\n        x: width,\n        y: height\n      }, {\n        x: width,\n        y: height + STATIC_DENSITY\n      }, {\n        x: 0,\n        y: height + STATIC_DENSITY\n      }]);\n    }\n  }, [scene, constraints]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      border: \"1px solid white\",\n      padding: \"8px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: boxRef,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        pointerEvents: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Scene, \"XQdY0b7L5OKfe7c6vXf9LrgXwrk=\");\n\n_c = Scene;\nexport default Scene;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scene\");","map":{"version":3,"sources":["C:/Users/nilss/Desktop/Projects/galerie-sens/src/components/scene.js"],"names":["React","useEffect","useState","useRef","Matter","STATIC_DENSITY","Scene","boxRef","canvasRef","constraints","setContraints","scene","setScene","setSomeStateValue","handleResize","console","log","current","getBoundingClientRect","Engine","Render","World","Bodies","engine","create","render","element","canvas","options","background","wireframes","floor","rectangle","isStatic","fillStyle","add","world","run","window","addEventListener","removeEventListener","width","height","bounds","max","x","y","bodies","Body","setPosition","setVertices","position","border","padding","top","left","pointerEvents"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\r\nimport Matter from \"matter-js\"\r\n\r\nconst STATIC_DENSITY = 15\r\n\r\nexport const Scene = () => {\r\n\r\n  const boxRef = useRef(null)\r\n  const canvasRef = useRef(null)\r\n  const [constraints, setContraints] = useState()\r\n  const [scene, setScene] = useState()\r\n  const [setSomeStateValue] = useState(false)\r\n  \r\n\r\n  const handleResize = () => {\r\n    console.log(boxRef.current.getBoundingClientRect())\r\n    setContraints(boxRef.current.getBoundingClientRect())\r\n  }\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    let Engine = Matter.Engine\r\n    let Render = Matter.Render\r\n    let World  = Matter.World\r\n    let Bodies = Matter.Bodies\r\n    let engine = Engine.create({})\r\n    let render = Render.create({\r\n      element: boxRef.current,\r\n      engine: engine,\r\n      canvas: canvasRef.current,\r\n      options: {\r\n        background: \"transparent\",\r\n        wireframes: false,\r\n      },\r\n    })\r\n    const floor = Bodies.rectangle(0, 0, 0, STATIC_DENSITY, {\r\n      isStatic: true,\r\n      render: {\r\n        fillStyle: \"blue\",\r\n      },\r\n    })\r\n    World.add(engine.world, [floor])\r\n    Engine.run(engine)\r\n    Render.run(render)\r\n    setContraints(boxRef.current.getBoundingClientRect())\r\n    setScene(render)\r\n\r\n    window.addEventListener(\"resize\", handleResize)\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize)\r\n    }\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    if (constraints) {\r\n      let { width, height } = constraints\r\n\r\n      // Dynamically update canvas and bounds\r\n      scene.bounds.max.x   = width\r\n      scene.bounds.max.y   = height\r\n      scene.options.width  = width\r\n      scene.options.height = height\r\n      scene.canvas.width   = width\r\n      scene.canvas.height  = height\r\n      \r\n      // Dynamically update floor\r\n      const floor = scene.engine.world.bodies[0]\r\n      Matter.Body.setPosition(floor, {\r\n        x: width / 2,\r\n        y: height + STATIC_DENSITY / 2,\r\n      })\r\n      Matter.Body.setVertices(floor, [\r\n        { x: 0, y: height },\r\n        { x: width, y: height },\r\n        { x: width, y: height + STATIC_DENSITY },\r\n        { x: 0, y: height + STATIC_DENSITY },\r\n      ])\r\n    }\r\n  }, [scene, constraints])\r\n\r\n\r\n  return (\r\n    \r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        border: \"1px solid white\",\r\n        padding: \"8px\",\r\n      }}\r\n    >\r\n      <div\r\n        ref={boxRef}\r\n        style={{\r\n          position:\"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          pointerEvents: \"none\",\r\n        }}\r\n      >\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}