{"ast":null,"code":"/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.Matter = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Body` module contains methods for creating and manipulating body models.\n      * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n      * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      \n      * @class Body\n      */\n      var Body = {};\n      module.exports = Body;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Render = _dereq_('../render/Render');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Axes = _dereq_('../geometry/Axes');\n\n      (function () {\n        Body._inertiaScale = 4;\n        Body._nextCollidingGroupId = 1;\n        Body._nextNonCollidingGroupId = -1;\n        Body._nextCategory = 0x0001;\n        /**\n         * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * Vertices must be specified in clockwise order.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {body} body\n         */\n\n        Body.create = function (options) {\n          var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: {\n              x: 0,\n              y: 0\n            },\n            force: {\n              x: 0,\n              y: 0\n            },\n            torque: 0,\n            positionImpulse: {\n              x: 0,\n              y: 0\n            },\n            constraintImpulse: {\n              x: 0,\n              y: 0,\n              angle: 0\n            },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: {\n              x: 0,\n              y: 0\n            },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n              visible: true,\n              opacity: 1,\n              sprite: {\n                xScale: 1,\n                yScale: 1,\n                xOffset: 0,\n                yOffset: 0\n              },\n              lineWidth: 0\n            }\n          };\n          var body = Common.extend(defaults, options);\n\n          _initProperties(body, options);\n\n          return body;\n        };\n        /**\n         * Returns the next unique group index for which bodies will collide.\n         * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n         * See `body.collisionFilter` for more information.\n         * @method nextGroup\n         * @param {bool} [isNonColliding=false]\n         * @return {Number} Unique group index\n         */\n\n\n        Body.nextGroup = function (isNonColliding) {\n          if (isNonColliding) return Body._nextNonCollidingGroupId--;\n          return Body._nextCollidingGroupId++;\n        };\n        /**\n         * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n         * There are 32 available. See `body.collisionFilter` for more information.\n         * @method nextCategory\n         * @return {Number} Unique category bitfield\n         */\n\n\n        Body.nextCategory = function () {\n          Body._nextCategory = Body._nextCategory << 1;\n          return Body._nextCategory;\n        };\n        /**\n         * Initialises body properties.\n         * @method _initProperties\n         * @private\n         * @param {body} body\n         * @param {} [options]\n         */\n\n\n        var _initProperties = function (body, options) {\n          options = options || {}; // init required properties (order is important)\n\n          Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n          });\n          Vertices.rotate(body.vertices, body.angle, body.position);\n          Axes.rotate(body.axes, body.angle);\n          Bounds.update(body.bounds, body.vertices, body.velocity); // allow options to override the automatically calculated properties\n\n          Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n          }); // render properties\n\n          var defaultFillStyle = body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56']),\n              defaultStrokeStyle = '#000';\n          body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n          body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n          body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n          body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n        };\n        /**\n         * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n         * Prefer to use the actual setter functions in performance critical situations.\n         * @method set\n         * @param {body} body\n         * @param {} settings A property name (or map of properties and values) to set on the body.\n         * @param {} value The value to set if `settings` is a single property name.\n         */\n\n\n        Body.set = function (body, settings, value) {\n          var property;\n\n          if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n          }\n\n          for (property in settings) {\n            value = settings[property];\n            if (!settings.hasOwnProperty(property)) continue;\n\n            switch (property) {\n              case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n\n              case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n\n              case 'mass':\n                Body.setMass(body, value);\n                break;\n\n              case 'density':\n                Body.setDensity(body, value);\n                break;\n\n              case 'inertia':\n                Body.setInertia(body, value);\n                break;\n\n              case 'vertices':\n                Body.setVertices(body, value);\n                break;\n\n              case 'position':\n                Body.setPosition(body, value);\n                break;\n\n              case 'angle':\n                Body.setAngle(body, value);\n                break;\n\n              case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n\n              case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n\n              case 'parts':\n                Body.setParts(body, value);\n                break;\n\n              default:\n                body[property] = value;\n            }\n          }\n        };\n        /**\n         * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n         * @method setStatic\n         * @param {body} body\n         * @param {bool} isStatic\n         */\n\n\n        Body.setStatic = function (body, isStatic) {\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n              part.restitution = 0;\n              part.friction = 1;\n              part.mass = part.inertia = part.density = Infinity;\n              part.inverseMass = part.inverseInertia = 0;\n              part.positionPrev.x = part.position.x;\n              part.positionPrev.y = part.position.y;\n              part.anglePrev = part.angle;\n              part.angularVelocity = 0;\n              part.speed = 0;\n              part.angularSpeed = 0;\n              part.motion = 0;\n            } else if (part._original) {\n              part.restitution = part._original.restitution;\n              part.friction = part._original.friction;\n              part.mass = part._original.mass;\n              part.inertia = part._original.inertia;\n              part.density = part._original.density;\n              part.inverseMass = part._original.inverseMass;\n              part.inverseInertia = part._original.inverseInertia;\n              delete part._original;\n            }\n          }\n        };\n        /**\n         * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n         * @method setMass\n         * @param {body} body\n         * @param {number} mass\n         */\n\n\n        Body.setMass = function (body, mass) {\n          var moment = body.inertia / (body.mass / 6);\n          body.inertia = moment * (mass / 6);\n          body.inverseInertia = 1 / body.inertia;\n          body.mass = mass;\n          body.inverseMass = 1 / body.mass;\n          body.density = body.mass / body.area;\n        };\n        /**\n         * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n         * @method setDensity\n         * @param {body} body\n         * @param {number} density\n         */\n\n\n        Body.setDensity = function (body, density) {\n          Body.setMass(body, density * body.area);\n          body.density = density;\n        };\n        /**\n         * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n         * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n         * @method setInertia\n         * @param {body} body\n         * @param {number} inertia\n         */\n\n\n        Body.setInertia = function (body, inertia) {\n          body.inertia = inertia;\n          body.inverseInertia = 1 / body.inertia;\n        };\n        /**\n         * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n         * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n         * They are then automatically translated to world space based on `body.position`.\n         *\n         * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n         * Vertices must form a convex hull, concave hulls are not supported.\n         *\n         * @method setVertices\n         * @param {body} body\n         * @param {vector[]} vertices\n         */\n\n\n        Body.setVertices = function (body, vertices) {\n          // change vertices\n          if (vertices[0].body === body) {\n            body.vertices = vertices;\n          } else {\n            body.vertices = Vertices.create(vertices, body);\n          } // update properties\n\n\n          body.axes = Axes.fromVertices(body.vertices);\n          body.area = Vertices.area(body.vertices);\n          Body.setMass(body, body.density * body.area); // orient vertices around the centre of mass at origin (0, 0)\n\n          var centre = Vertices.centre(body.vertices);\n          Vertices.translate(body.vertices, centre, -1); // update inertia while vertices are at origin (0, 0)\n\n          Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass)); // update geometry\n\n          Vertices.translate(body.vertices, body.position);\n          Bounds.update(body.bounds, body.vertices, body.velocity);\n        };\n        /**\n         * Sets the parts of the `body` and updates mass, inertia and centroid.\n         * Each part will have its parent set to `body`.\n         * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n         * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n         * @method setParts\n         * @param {body} body\n         * @param [body] parts\n         * @param {bool} [autoHull=true]\n         */\n\n\n        Body.setParts = function (body, parts, autoHull) {\n          var i; // add all the parts, ensuring that the first part is always the parent body\n\n          parts = parts.slice(0);\n          body.parts.length = 0;\n          body.parts.push(body);\n          body.parent = body;\n\n          for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n\n            if (part !== body) {\n              part.parent = body;\n              body.parts.push(part);\n            }\n          }\n\n          if (body.parts.length === 1) return;\n          autoHull = typeof autoHull !== 'undefined' ? autoHull : true; // find the convex hull of all parts to set on the parent body\n\n          if (autoHull) {\n            var vertices = [];\n\n            for (i = 0; i < parts.length; i++) {\n              vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n          } // sum the properties of all compound parts of the parent body\n\n\n          var total = Body._totalProperties(body);\n\n          body.area = total.area;\n          body.parent = body;\n          body.position.x = total.centre.x;\n          body.position.y = total.centre.y;\n          body.positionPrev.x = total.centre.x;\n          body.positionPrev.y = total.centre.y;\n          Body.setMass(body, total.mass);\n          Body.setInertia(body, total.inertia);\n          Body.setPosition(body, total.centre);\n        };\n        /**\n         * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n         * @method setPosition\n         * @param {body} body\n         * @param {vector} position\n         */\n\n\n        Body.setPosition = function (body, position) {\n          var delta = Vector.sub(position, body.position);\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n         * @method setAngle\n         * @param {body} body\n         * @param {number} angle\n         */\n\n\n        Body.setAngle = function (body, angle) {\n          var delta = angle - body.angle;\n          body.anglePrev += delta;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n\n            if (i > 0) {\n              Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n          }\n        };\n        /**\n         * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setVelocity\n         * @param {body} body\n         * @param {vector} velocity\n         */\n\n\n        Body.setVelocity = function (body, velocity) {\n          body.positionPrev.x = body.position.x - velocity.x;\n          body.positionPrev.y = body.position.y - velocity.y;\n          body.velocity.x = velocity.x;\n          body.velocity.y = velocity.y;\n          body.speed = Vector.magnitude(body.velocity);\n        };\n        /**\n         * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n         * @method setAngularVelocity\n         * @param {body} body\n         * @param {number} velocity\n         */\n\n\n        Body.setAngularVelocity = function (body, velocity) {\n          body.anglePrev = body.angle - velocity;\n          body.angularVelocity = velocity;\n          body.angularSpeed = Math.abs(body.angularVelocity);\n        };\n        /**\n         * Moves a body by a given vector relative to its current position, without imparting any velocity.\n         * @method translate\n         * @param {body} body\n         * @param {vector} translation\n         */\n\n\n        Body.translate = function (body, translation) {\n          Body.setPosition(body, Vector.add(body.position, translation));\n        };\n        /**\n         * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n         * @method rotate\n         * @param {body} body\n         * @param {number} rotation\n         * @param {vector} [point]\n         */\n\n\n        Body.rotate = function (body, rotation, point) {\n          if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n          } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.setAngle(body, body.angle + rotation);\n          }\n        };\n        /**\n         * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n         * @method scale\n         * @param {body} body\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} [point]\n         */\n\n\n        Body.scale = function (body, scaleX, scaleY, point) {\n          var totalArea = 0,\n              totalInertia = 0;\n          point = point || body.position;\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i]; // scale vertices\n\n            Vertices.scale(part.vertices, scaleX, scaleY, point); // update properties\n\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area); // update inertia (requires vertices to be at origin)\n\n            Vertices.translate(part.vertices, {\n              x: -part.position.x,\n              y: -part.position.y\n            });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, {\n              x: part.position.x,\n              y: part.position.y\n            });\n\n            if (i > 0) {\n              totalArea += part.area;\n              totalInertia += part.inertia;\n            } // scale position\n\n\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY; // update bounds\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          } // handle parent body\n\n\n          if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n              Body.setMass(body, body.density * totalArea);\n              Body.setInertia(body, totalInertia);\n            }\n          } // handle circles\n\n\n          if (body.circleRadius) {\n            if (scaleX === scaleY) {\n              body.circleRadius *= scaleX;\n            } else {\n              // body is no longer a circle\n              body.circleRadius = null;\n            }\n          }\n        };\n        /**\n         * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n         * @method update\n         * @param {body} body\n         * @param {number} deltaTime\n         * @param {number} timeScale\n         * @param {number} correction\n         */\n\n\n        Body.update = function (body, deltaTime, timeScale, correction) {\n          var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2); // from the previous step\n\n          var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n              velocityPrevX = body.position.x - body.positionPrev.x,\n              velocityPrevY = body.position.y - body.positionPrev.y; // update velocity with Verlet integration\n\n          body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n          body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.position.x += body.velocity.x;\n          body.position.y += body.velocity.y; // update angular velocity with Verlet integration\n\n          body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n          body.anglePrev = body.angle;\n          body.angle += body.angularVelocity; // track speed and acceleration\n\n          body.speed = Vector.magnitude(body.velocity);\n          body.angularSpeed = Math.abs(body.angularVelocity); // transform the body geometry\n\n          for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            Vertices.translate(part.vertices, body.velocity);\n\n            if (i > 0) {\n              part.position.x += body.velocity.x;\n              part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n              Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n              Axes.rotate(part.axes, body.angularVelocity);\n\n              if (i > 0) {\n                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n              }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n        };\n        /**\n         * Applies a force to a body from a given world-space position, including resulting torque.\n         * @method applyForce\n         * @param {body} body\n         * @param {vector} position\n         * @param {vector} force\n         */\n\n\n        Body.applyForce = function (body, position, force) {\n          body.force.x += force.x;\n          body.force.y += force.y;\n          var offset = {\n            x: position.x - body.position.x,\n            y: position.y - body.position.y\n          };\n          body.torque += offset.x * force.y - offset.y * force.x;\n        };\n        /**\n         * Returns the sums of the properties of all compound parts of the parent body.\n         * @method _totalProperties\n         * @private\n         * @param {body} body\n         * @return {}\n         */\n\n\n        Body._totalProperties = function (body) {\n          // from equations at:\n          // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n          // http://output.to/sideway/default.asp?qno=121100087\n          var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: {\n              x: 0,\n              y: 0\n            }\n          }; // sum the properties of all compound parts of the parent body\n\n          for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n          }\n\n          properties.centre = Vector.div(properties.centre, properties.mass);\n          return properties;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a body starts sleeping (where `this` is the body).\n        *\n        * @event sleepStart\n        * @this {body} The body that has started sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a body ends sleeping (where `this` is the body).\n        *\n        * @event sleepEnd\n        * @this {body} The body that has ended sleeping\n        * @param {} event An event object\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"body\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Body\"\n         */\n\n        /**\n         * An array of bodies that make up this body. \n         * The first body in the array must always be a self reference to the current body instance.\n         * All bodies in the `parts` array together form a single rigid compound body.\n         * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n         * Parts themselves should never be added to a `World`, only the parent body should be.\n         * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n         *\n         * @property parts\n         * @type body[]\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n        /**\n         * A self reference if the body is _not_ a part of another body.\n         * Otherwise this is a reference to the body that this is a part of.\n         * See `body.parts`.\n         *\n         * @property parent\n         * @type body\n         */\n\n        /**\n         * A `Number` specifying the angle of the body, in radians.\n         *\n         * @property angle\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An array of `Vector` objects that specify the convex hull of the rigid body.\n         * These should be provided about the origin `(0, 0)`. E.g.\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n         * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n         *\n         * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n         * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n         *\n         * @property vertices\n         * @type vector[]\n         */\n\n        /**\n         * A `Vector` that specifies the current world-space position of the body.\n         *\n         * @property position\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n         *\n         * @property force\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n         *\n         * @property torque\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n         *\n         * @readOnly\n         * @property speed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n         *\n         * @readOnly\n         * @property angularSpeed\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property velocity\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n         * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n         *\n         * @readOnly\n         * @property angularVelocity\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n         * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n         *\n         * @property isStatic\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n         *\n         * @property isSensor\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n         * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n         *\n         * @property isSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n         * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n         *\n         * @readOnly\n         * @property motion\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n         *\n         * @property sleepThreshold\n         * @type number\n         * @default 60\n         */\n\n        /**\n         * A `Number` that defines the density of the body, that is its mass per unit area.\n         * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n         * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n         *\n         * @property density\n         * @type number\n         * @default 0.001\n         */\n\n        /**\n         * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n         * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n         *\n         * @property mass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse mass of the body (`1 / mass`).\n         * If you modify this value, you must also modify the `body.mass` property.\n         *\n         * @property inverseMass\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n         * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n         *\n         * @property inertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n         * If you modify this value, you must also modify the `body.inertia` property.\n         *\n         * @property inverseInertia\n         * @type number\n         */\n\n        /**\n         * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n         * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n         * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n         *\n         *     Math.max(bodyA.restitution, bodyB.restitution)\n         *\n         * @property restitution\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n         * A value of `0` means that the body may slide indefinitely.\n         * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n         *\n         * The effects of the value may be non-linear. \n         * High values may be unstable depending on the body.\n         * The engine uses a Coulomb friction model including static and kinetic friction.\n         * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n         *\n         *     Math.min(bodyA.friction, bodyB.friction)\n         *\n         * @property friction\n         * @type number\n         * @default 0.1\n         */\n\n        /**\n         * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n         * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n         * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n         * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n         *\n         * @property frictionStatic\n         * @type number\n         * @default 0.5\n         */\n\n        /**\n         * A `Number` that defines the air friction of the body (air resistance). \n         * A value of `0` means the body will never slow as it moves through space.\n         * The higher the value, the faster a body slows when moving through space.\n         * The effects of the value are non-linear. \n         *\n         * @property frictionAir\n         * @type number\n         * @default 0.01\n         */\n\n        /**\n         * An `Object` that specifies the collision filtering properties of this body.\n         *\n         * Collisions between two bodies will obey the following rules:\n         * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n         *   they will always collide if the value is positive, and they will never collide\n         *   if the value is negative.\n         * - If the two bodies have different values of `collisionFilter.group` or if one\n         *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n         *\n         * Each body belongs to a collision category, given by `collisionFilter.category`. This\n         * value is used as a bit field and the category should have only one bit set, meaning that\n         * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n         * different collision categories available.\n         *\n         * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n         * the categories it collides with (the value is the bitwise AND value of all these categories).\n         *\n         * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n         * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n         * are both true.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n        /**\n         * An Integer `Number`, that specifies the collision group this body belongs to.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.group\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * A bit field that specifies the collision category this body belongs to.\n         * The category value should have only one bit set, for example `0x0001`.\n         * This means there are up to 32 unique collision categories available.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.category\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * A bit mask that specifies the collision categories this body may collide with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter.mask\n         * @type object\n         * @default -1\n         */\n\n        /**\n         * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n         * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n         * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n         *\n         * @property slop\n         * @type number\n         * @default 0.05\n         */\n\n        /**\n         * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n         *\n         * @property timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the body should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * Sets the opacity to use when rendering.\n         *\n         * @property render.opacity\n         * @type number\n         * @default 1\n        */\n\n        /**\n         * An `Object` that defines the sprite properties to use when rendering, if any.\n         *\n         * @property render.sprite\n         * @type object\n         */\n\n        /**\n         * An `String` that defines the path to the image to use as the sprite texture, if any.\n         *\n         * @property render.sprite.texture\n         * @type string\n         */\n\n        /**\n         * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n         *\n         * @property render.sprite.xScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n         *\n         * @property render.sprite.yScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n         *\n         * @property render.sprite.xOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n         *\n         * @property render.sprite.yOffset\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.fillStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * An array of unique axis vectors (edge normals) used for collision detection.\n         * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n         * They are constantly updated by `Body.update` during the simulation.\n         *\n         * @property axes\n         * @type vector[]\n         */\n\n        /**\n         * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n         *\n         * @property area\n         * @type string\n         * @default \n         */\n\n        /**\n         * A `Bounds` object that defines the AABB region for the body.\n         * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31\n    }],\n    2: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n      * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n      * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n      * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composite\n      */\n      var Composite = {};\n      module.exports = Composite;\n\n      var Events = _dereq_('../core/Events');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Body = _dereq_('./Body');\n\n      (function () {\n        /**\n         * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properites section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} [options]\n         * @return {composite} A new composite\n         */\n        Composite.create = function (options) {\n          return Common.extend({\n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [],\n            constraints: [],\n            composites: [],\n            label: 'Composite',\n            plugin: {}\n          }, options);\n        };\n        /**\n         * Sets the composite's `isModified` flag. \n         * If `updateParents` is true, all parents will be set (default: false).\n         * If `updateChildren` is true, all children will be set (default: false).\n         * @method setModified\n         * @param {composite} composite\n         * @param {boolean} isModified\n         * @param {boolean} [updateParents=false]\n         * @param {boolean} [updateChildren=false]\n         */\n\n\n        Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n          composite.isModified = isModified;\n\n          if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n          }\n\n          if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              var childComposite = composite.composites[i];\n              Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n          }\n        };\n        /**\n         * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n         * @method add\n         * @param {composite} composite\n         * @param {} object\n         * @return {composite} The original composite with the objects added\n         */\n\n\n        Composite.add = function (composite, object) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeAdd', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                  Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                  break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n\n              case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n\n              case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n\n              case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterAdd', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n         * Optionally searching its children recursively.\n         * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n         * @method remove\n         * @param {composite} composite\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the objects removed\n         */\n\n\n        Composite.remove = function (composite, object, deep) {\n          var objects = [].concat(object);\n          Events.trigger(composite, 'beforeRemove', {\n            object: object\n          });\n\n          for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n              case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n\n              case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n\n              case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n\n              case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n            }\n          }\n\n          Events.trigger(composite, 'afterRemove', {\n            object: object\n          });\n          return composite;\n        };\n        /**\n         * Adds a composite to the given composite.\n         * @private\n         * @method addComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @return {composite} The original compositeA with the objects from compositeB added\n         */\n\n\n        Composite.addComposite = function (compositeA, compositeB) {\n          compositeA.composites.push(compositeB);\n          compositeB.parent = compositeA;\n          Composite.setModified(compositeA, true, true, false);\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeComposite\n         * @param {composite} compositeA\n         * @param {composite} compositeB\n         * @param {boolean} [deep=false]\n         * @return {composite} The original compositeA with the composite removed\n         */\n\n\n        Composite.removeComposite = function (compositeA, compositeB, deep) {\n          var position = Common.indexOf(compositeA.composites, compositeB);\n\n          if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++) {\n              Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n          }\n\n          return compositeA;\n        };\n        /**\n         * Removes a composite from the given composite.\n         * @private\n         * @method removeCompositeAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the composite removed\n         */\n\n\n        Composite.removeCompositeAt = function (composite, position) {\n          composite.composites.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a body to the given composite.\n         * @private\n         * @method addBody\n         * @param {composite} composite\n         * @param {body} body\n         * @return {composite} The original composite with the body added\n         */\n\n\n        Composite.addBody = function (composite, body) {\n          composite.bodies.push(body);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeBody\n         * @param {composite} composite\n         * @param {body} body\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBody = function (composite, body, deep) {\n          var position = Common.indexOf(composite.bodies, body);\n\n          if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeBody(composite.composites[i], body, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeBodyAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the body removed\n         */\n\n\n        Composite.removeBodyAt = function (composite, position) {\n          composite.bodies.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Adds a constraint to the given composite.\n         * @private\n         * @method addConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @return {composite} The original composite with the constraint added\n         */\n\n\n        Composite.addConstraint = function (composite, constraint) {\n          composite.constraints.push(constraint);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes a constraint from the given composite, and optionally searching its children recursively.\n         * @private\n         * @method removeConstraint\n         * @param {composite} composite\n         * @param {constraint} constraint\n         * @param {boolean} [deep=false]\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraint = function (composite, constraint, deep) {\n          var position = Common.indexOf(composite.constraints, constraint);\n\n          if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n          }\n\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n          }\n\n          return composite;\n        };\n        /**\n         * Removes a body from the given composite.\n         * @private\n         * @method removeConstraintAt\n         * @param {composite} composite\n         * @param {number} position\n         * @return {composite} The original composite with the constraint removed\n         */\n\n\n        Composite.removeConstraintAt = function (composite, position) {\n          composite.constraints.splice(position, 1);\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Removes all bodies, constraints and composites from the given composite.\n         * Optionally clearing its children recursively.\n         * @method clear\n         * @param {composite} composite\n         * @param {boolean} keepStatic\n         * @param {boolean} [deep=false]\n         */\n\n\n        Composite.clear = function (composite, keepStatic, deep) {\n          if (deep) {\n            for (var i = 0; i < composite.composites.length; i++) {\n              Composite.clear(composite.composites[i], keepStatic, true);\n            }\n          }\n\n          if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function (body) {\n              return body.isStatic;\n            });\n          } else {\n            composite.bodies.length = 0;\n          }\n\n          composite.constraints.length = 0;\n          composite.composites.length = 0;\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns all bodies in the given composite, including all bodies in its children, recursively.\n         * @method allBodies\n         * @param {composite} composite\n         * @return {body[]} All the bodies\n         */\n\n\n        Composite.allBodies = function (composite) {\n          var bodies = [].concat(composite.bodies);\n\n          for (var i = 0; i < composite.composites.length; i++) bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n          return bodies;\n        };\n        /**\n         * Returns all constraints in the given composite, including all constraints in its children, recursively.\n         * @method allConstraints\n         * @param {composite} composite\n         * @return {constraint[]} All the constraints\n         */\n\n\n        Composite.allConstraints = function (composite) {\n          var constraints = [].concat(composite.constraints);\n\n          for (var i = 0; i < composite.composites.length; i++) constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n          return constraints;\n        };\n        /**\n         * Returns all composites in the given composite, including all composites in its children, recursively.\n         * @method allComposites\n         * @param {composite} composite\n         * @return {composite[]} All the composites\n         */\n\n\n        Composite.allComposites = function (composite) {\n          var composites = [].concat(composite.composites);\n\n          for (var i = 0; i < composite.composites.length; i++) composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n          return composites;\n        };\n        /**\n         * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n         * @method get\n         * @param {composite} composite\n         * @param {number} id\n         * @param {string} type\n         * @return {object} The requested object, if found\n         */\n\n\n        Composite.get = function (composite, id, type) {\n          var objects, object;\n\n          switch (type) {\n            case 'body':\n              objects = Composite.allBodies(composite);\n              break;\n\n            case 'constraint':\n              objects = Composite.allConstraints(composite);\n              break;\n\n            case 'composite':\n              objects = Composite.allComposites(composite).concat(composite);\n              break;\n          }\n\n          if (!objects) return null;\n          object = objects.filter(function (object) {\n            return object.id.toString() === id.toString();\n          });\n          return object.length === 0 ? null : object[0];\n        };\n        /**\n         * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n         * @method move\n         * @param {compositeA} compositeA\n         * @param {object[]} objects\n         * @param {compositeB} compositeB\n         * @return {composite} Returns compositeA\n         */\n\n\n        Composite.move = function (compositeA, objects, compositeB) {\n          Composite.remove(compositeA, objects);\n          Composite.add(compositeB, objects);\n          return compositeA;\n        };\n        /**\n         * Assigns new ids for all objects in the composite, recursively.\n         * @method rebase\n         * @param {composite} composite\n         * @return {composite} Returns composite\n         */\n\n\n        Composite.rebase = function (composite) {\n          var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n\n          for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Translates all children in the composite by a given vector relative to their current positions, \n         * without imparting any velocity.\n         * @method translate\n         * @param {composite} composite\n         * @param {vector} translation\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.translate = function (composite, translation, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n         * @method rotate\n         * @param {composite} composite\n         * @param {number} rotation\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.rotate = function (composite, rotation, point, recursive) {\n          var cos = Math.cos(rotation),\n              sin = Math.sin(rotation),\n              bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + (dx * cos - dy * sin),\n              y: point.y + (dx * sin + dy * cos)\n            });\n            Body.rotate(body, rotation);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n         * @method scale\n         * @param {composite} composite\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         * @param {bool} [recursive=true]\n         */\n\n\n        Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n          var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n            Body.setPosition(body, {\n              x: point.x + dx * scaleX,\n              y: point.y + dy * scaleY\n            });\n            Body.scale(body, scaleX, scaleY);\n          }\n\n          Composite.setModified(composite, true, true, false);\n          return composite;\n        };\n        /**\n         * Returns the union of the bounds of all of the composite's bodies.\n         * @method bounds\n         * @param {composite} composite The composite.\n         * @returns {bounds} The composite bounds.\n         */\n\n\n        Composite.bounds = function (composite) {\n          var bodies = Composite.allBodies(composite),\n              vertices = [];\n\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n          }\n\n          return Bounds.create(vertices);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, before objects have been added.\n        *\n        * @event beforeAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.add` is made, after objects have been added.\n        *\n        * @event afterAdd\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, before objects have been removed.\n        *\n        * @event beforeRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when a call to `Composite.remove` is made, after objects have been removed.\n        *\n        * @event afterRemove\n        * @param {} event An event object\n        * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"composite\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage composites.\n         *\n         * @property label\n         * @type string\n         * @default \"Composite\"\n         */\n\n        /**\n         * A flag that specifies whether the composite has been modified during the current step.\n         * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n         * If you need to change it manually, you should use the `Composite.setModified` method.\n         *\n         * @property isModified\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n         *\n         * @property parent\n         * @type composite\n         * @default null\n         */\n\n        /**\n         * An array of `Body` that are _direct_ children of this composite.\n         * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n         *\n         * @property bodies\n         * @type body[]\n         * @default []\n         */\n\n        /**\n         * An array of `Constraint` that are _direct_ children of this composite.\n         * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n         *\n         * @property constraints\n         * @type constraint[]\n         * @default []\n         */\n\n        /**\n         * An array of `Composite` that are _direct_ children of this composite.\n         * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n         * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n         *\n         * @property composites\n         * @type composite[]\n         * @default []\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"./Body\": 1\n    }],\n    3: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.World` module contains methods for creating and manipulating the world composite.\n      * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n      * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n      * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n      * There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class World\n      * @extends Composite\n      */\n      var World = {};\n      module.exports = World;\n\n      var Composite = _dereq_('./Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @constructor\n         * @param {} options\n         * @return {world} A new world\n         */\n        World.create = function (options) {\n          var composite = Composite.create();\n          var defaults = {\n            label: 'World',\n            gravity: {\n              x: 0,\n              y: 1,\n              scale: 0.001\n            },\n            bounds: {\n              min: {\n                x: -Infinity,\n                y: -Infinity\n              },\n              max: {\n                x: Infinity,\n                y: Infinity\n              }\n            }\n          };\n          return Common.extend(composite, defaults, options);\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * The gravity to apply on the world.\n         *\n         * @property gravity\n         * @type object\n         */\n\n        /**\n         * The gravity x component.\n         *\n         * @property gravity.x\n         * @type object\n         * @default 0\n         */\n\n        /**\n         * The gravity y component.\n         *\n         * @property gravity.y\n         * @type object\n         * @default 1\n         */\n\n        /**\n         * The gravity scale factor.\n         *\n         * @property gravity.scale\n         * @type object\n         * @default 0.001\n         */\n\n        /**\n         * A `Bounds` object that defines the world bounds for collision detection.\n         *\n         * @property bounds\n         * @type bounds\n         * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n         */\n        // World is a Composite body\n        // see src/module/Outro.js for these aliases:\n\n        /**\n         * An alias for Composite.add\n         * @method add\n         * @param {world} world\n         * @param {} object\n         * @return {composite} The original world with the objects added\n         */\n\n        /**\n         * An alias for Composite.remove\n         * @method remove\n         * @param {world} world\n         * @param {} object\n         * @param {boolean} [deep=false]\n         * @return {composite} The original world with the objects removed\n         */\n\n        /**\n         * An alias for Composite.clear\n         * @method clear\n         * @param {world} world\n         * @param {boolean} keepStatic\n         */\n\n        /**\n         * An alias for Composite.addComposite\n         * @method addComposite\n         * @param {world} world\n         * @param {composite} composite\n         * @return {world} The original world with the objects from composite added\n         */\n\n        /**\n         * An alias for Composite.addBody\n         * @method addBody\n         * @param {world} world\n         * @param {body} body\n         * @return {world} The original world with the body added\n         */\n\n        /**\n         * An alias for Composite.addConstraint\n         * @method addConstraint\n         * @param {world} world\n         * @param {constraint} constraint\n         * @return {world} The original world with the constraint added\n         */\n\n      })();\n    }, {\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Composite\": 2\n    }],\n    4: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n      *\n      * @class Contact\n      */\n      var Contact = {};\n      module.exports = Contact;\n\n      (function () {\n        /**\n         * Creates a new contact.\n         * @method create\n         * @param {vertex} vertex\n         * @return {contact} A new contact\n         */\n        Contact.create = function (vertex) {\n          return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n          };\n        };\n        /**\n         * Generates a contact id.\n         * @method id\n         * @param {vertex} vertex\n         * @return {string} Unique contactID\n         */\n\n\n        Contact.id = function (vertex) {\n          return vertex.body.id + '_' + vertex.index;\n        };\n      })();\n    }, {}],\n    5: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n      *\n      * @class Detector\n      */\n      // TODO: speculative contacts\n      var Detector = {};\n      module.exports = Detector;\n\n      var SAT = _dereq_('./SAT');\n\n      var Pair = _dereq_('./Pair');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        /**\n         * Finds all collisions given a list of pairs.\n         * @method collisions\n         * @param {pair[]} broadphasePairs\n         * @param {engine} engine\n         * @return {array} collisions\n         */\n        Detector.collisions = function (broadphasePairs, engine) {\n          var collisions = [],\n              pairsTable = engine.pairs.table;\n\n          for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0],\n                bodyB = broadphasePairs[i][1];\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping)) continue;\n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue; // mid phase\n\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n              for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                var partA = bodyA.parts[j];\n\n                for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                  var partB = bodyB.parts[k];\n\n                  if (partA === bodyA && partB === bodyB || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                    // find a previous collision we could reuse\n                    var pairId = Pair.id(partA, partB),\n                        pair = pairsTable[pairId],\n                        previousCollision;\n\n                    if (pair && pair.isActive) {\n                      previousCollision = pair.collision;\n                    } else {\n                      previousCollision = null;\n                    } // narrow phase\n\n\n                    var collision = SAT.collides(partA, partB, previousCollision);\n\n                    if (collision.collided) {\n                      collisions.push(collision);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns `true` if both supplied collision filters will allow a collision to occur.\n         * See `body.collisionFilter` for more information.\n         * @method canCollide\n         * @param {} filterA\n         * @param {} filterB\n         * @return {bool} `true` if collision can occur\n         */\n\n\n        Detector.canCollide = function (filterA, filterB) {\n          if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n          return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n        };\n      })();\n    }, {\n      \"../geometry/Bounds\": 26,\n      \"./Pair\": 7,\n      \"./SAT\": 11\n    }],\n    6: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n      *\n      * @class Grid\n      */\n      var Grid = {};\n      module.exports = Grid;\n\n      var Pair = _dereq_('./Pair');\n\n      var Detector = _dereq_('./Detector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new grid.\n         * @method create\n         * @param {} options\n         * @return {grid} A new grid\n         */\n        Grid.create = function (options) {\n          var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n          };\n          return Common.extend(defaults, options);\n        };\n        /**\n         * The width of a single grid bucket.\n         *\n         * @property bucketWidth\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * The height of a single grid bucket.\n         *\n         * @property bucketHeight\n         * @type number\n         * @default 48\n         */\n\n        /**\n         * Updates the grid.\n         * @method update\n         * @param {grid} grid\n         * @param {body[]} bodies\n         * @param {engine} engine\n         * @param {boolean} forceUpdate\n         */\n\n\n        Grid.update = function (grid, bodies, engine, forceUpdate) {\n          var i,\n              col,\n              row,\n              world = engine.world,\n              buckets = grid.buckets,\n              bucket,\n              bucketId,\n              gridChanged = false;\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isSleeping && !forceUpdate) continue; // don't update out of world bodies\n\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y) continue;\n\n            var newRegion = Grid._getRegion(grid, body); // if the body has changed grid region\n\n\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n              if (!body.region || forceUpdate) body.region = newRegion;\n\n              var union = Grid._regionUnion(newRegion, body.region); // update grid buckets affected by region change\n              // iterate over the union of both regions\n\n\n              for (col = union.startCol; col <= union.endCol; col++) {\n                for (row = union.startRow; row <= union.endRow; row++) {\n                  bucketId = Grid._getBucketId(col, row);\n                  bucket = buckets[bucketId];\n                  var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                  var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow; // remove from old region buckets\n\n                  if (!isInsideNewRegion && isInsideOldRegion) {\n                    if (isInsideOldRegion) {\n                      if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                    }\n                  } // add to new region buckets\n\n\n                  if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n\n                    Grid._bucketAddBody(grid, bucket, body);\n                  }\n                }\n              } // set the new region\n\n\n              body.region = newRegion; // flag changes so we can update pairs\n\n              gridChanged = true;\n            }\n          } // update pairs list only if pairs changed (i.e. a body changed region)\n\n\n          if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n        };\n        /**\n         * Clears the grid.\n         * @method clear\n         * @param {grid} grid\n         */\n\n\n        Grid.clear = function (grid) {\n          grid.buckets = {};\n          grid.pairs = {};\n          grid.pairsList = [];\n        };\n        /**\n         * Finds the union of two regions.\n         * @method _regionUnion\n         * @private\n         * @param {} regionA\n         * @param {} regionB\n         * @return {} region\n         */\n\n\n        Grid._regionUnion = function (regionA, regionB) {\n          var startCol = Math.min(regionA.startCol, regionB.startCol),\n              endCol = Math.max(regionA.endCol, regionB.endCol),\n              startRow = Math.min(regionA.startRow, regionB.startRow),\n              endRow = Math.max(regionA.endRow, regionB.endRow);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Gets the region a given body falls in for a given grid.\n         * @method _getRegion\n         * @private\n         * @param {} grid\n         * @param {} body\n         * @return {} region\n         */\n\n\n        Grid._getRegion = function (grid, body) {\n          var bounds = body.bounds,\n              startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n              endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n              startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n              endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n          return Grid._createRegion(startCol, endCol, startRow, endRow);\n        };\n        /**\n         * Creates a region.\n         * @method _createRegion\n         * @private\n         * @param {} startCol\n         * @param {} endCol\n         * @param {} startRow\n         * @param {} endRow\n         * @return {} region\n         */\n\n\n        Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n          return {\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol,\n            endCol: endCol,\n            startRow: startRow,\n            endRow: endRow\n          };\n        };\n        /**\n         * Gets the bucket id at the given position.\n         * @method _getBucketId\n         * @private\n         * @param {} column\n         * @param {} row\n         * @return {string} bucket id\n         */\n\n\n        Grid._getBucketId = function (column, row) {\n          return 'C' + column + 'R' + row;\n        };\n        /**\n         * Creates a bucket.\n         * @method _createBucket\n         * @private\n         * @param {} buckets\n         * @param {} bucketId\n         * @return {} bucket\n         */\n\n\n        Grid._createBucket = function (buckets, bucketId) {\n          var bucket = buckets[bucketId] = [];\n          return bucket;\n        };\n        /**\n         * Adds a body to a bucket.\n         * @method _bucketAddBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketAddBody = function (grid, bucket, body) {\n          // add new pairs\n          for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n            if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue; // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n              pair[2] += 1;\n            } else {\n              grid.pairs[pairId] = [body, bodyB, 1];\n            }\n          } // add to bodies (after pairs, otherwise pairs with self)\n\n\n          bucket.push(body);\n        };\n        /**\n         * Removes a body from a bucket.\n         * @method _bucketRemoveBody\n         * @private\n         * @param {} grid\n         * @param {} bucket\n         * @param {} body\n         */\n\n\n        Grid._bucketRemoveBody = function (grid, bucket, body) {\n          // remove from bucket\n          bucket.splice(Common.indexOf(bucket, body), 1); // update pair counts\n\n          for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n            if (pair) pair[2] -= 1;\n          }\n        };\n        /**\n         * Generates a list of the active pairs in the grid.\n         * @method _createActivePairsList\n         * @private\n         * @param {} grid\n         * @return [] pairs\n         */\n\n\n        Grid._createActivePairsList = function (grid) {\n          var pairKeys,\n              pair,\n              pairs = []; // grid.pairs is used as a hashmap\n\n          pairKeys = Common.keys(grid.pairs); // iterate over grid.pairs\n\n          for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]]; // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n\n            if (pair[2] > 0) {\n              pairs.push(pair);\n            } else {\n              delete grid.pairs[pairKeys[k]];\n            }\n          }\n\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Detector\": 5,\n      \"./Pair\": 7\n    }],\n    7: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n      *\n      * @class Pair\n      */\n      var Pair = {};\n      module.exports = Pair;\n\n      var Contact = _dereq_('./Contact');\n\n      (function () {\n        /**\n         * Creates a pair.\n         * @method create\n         * @param {collision} collision\n         * @param {number} timestamp\n         * @return {pair} A new pair\n         */\n        Pair.create = function (collision, timestamp) {\n          var bodyA = collision.bodyA,\n              bodyB = collision.bodyB,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n          };\n          Pair.update(pair, collision, timestamp);\n          return pair;\n        };\n        /**\n         * Updates a pair given a collision.\n         * @method update\n         * @param {pair} pair\n         * @param {collision} collision\n         * @param {number} timestamp\n         */\n\n\n        Pair.update = function (pair, collision, timestamp) {\n          var contacts = pair.contacts,\n              supports = collision.supports,\n              activeContacts = pair.activeContacts,\n              parentA = collision.parentA,\n              parentB = collision.parentB;\n          pair.collision = collision;\n          pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n          pair.friction = Math.min(parentA.friction, parentB.friction);\n          pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n          pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n          pair.slop = Math.max(parentA.slop, parentB.slop);\n          activeContacts.length = 0;\n\n          if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n              var support = supports[i],\n                  contactId = Contact.id(support),\n                  contact = contacts[contactId];\n\n              if (contact) {\n                activeContacts.push(contact);\n              } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n              }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n          } else {\n            if (pair.isActive === true) Pair.setActive(pair, false, timestamp);\n          }\n        };\n        /**\n         * Set a pair as active or inactive.\n         * @method setActive\n         * @param {pair} pair\n         * @param {bool} isActive\n         * @param {number} timestamp\n         */\n\n\n        Pair.setActive = function (pair, isActive, timestamp) {\n          if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n          } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n          }\n        };\n        /**\n         * Get the id for the given pair.\n         * @method id\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @return {string} Unique pairId\n         */\n\n\n        Pair.id = function (bodyA, bodyB) {\n          if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n          } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n          }\n        };\n      })();\n    }, {\n      \"./Contact\": 4\n    }],\n    8: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n      *\n      * @class Pairs\n      */\n      var Pairs = {};\n      module.exports = Pairs;\n\n      var Pair = _dereq_('./Pair');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        Pairs._pairMaxIdleLife = 1000;\n        /**\n         * Creates a new pairs structure.\n         * @method create\n         * @param {object} options\n         * @return {pairs} A new pairs structure\n         */\n\n        Pairs.create = function (options) {\n          return Common.extend({\n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n          }, options);\n        };\n        /**\n         * Updates pairs given a list of collisions.\n         * @method update\n         * @param {object} pairs\n         * @param {collision[]} collisions\n         * @param {number} timestamp\n         */\n\n\n        Pairs.update = function (pairs, collisions, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              collisionStart = pairs.collisionStart,\n              collisionEnd = pairs.collisionEnd,\n              collisionActive = pairs.collisionActive,\n              activePairIds = [],\n              collision,\n              pairId,\n              pair,\n              i; // clear collision state arrays, but maintain old reference\n\n          collisionStart.length = 0;\n          collisionEnd.length = 0;\n          collisionActive.length = 0;\n\n          for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n              pairId = Pair.id(collision.bodyA, collision.bodyB);\n              activePairIds.push(pairId);\n              pair = pairsTable[pairId];\n\n              if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                  // pair exists and is active\n                  collisionActive.push(pair);\n                } else {\n                  // pair exists but was inactive, so a collision has just started again\n                  collisionStart.push(pair);\n                } // update the pair\n\n\n                Pair.update(pair, collision, timestamp);\n              } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pairId] = pair; // push the new pair\n\n                collisionStart.push(pair);\n                pairsList.push(pair);\n              }\n            }\n          } // deactivate previously active pairs that are now inactive\n\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n              Pair.setActive(pair, false, timestamp);\n              collisionEnd.push(pair);\n            }\n          }\n        };\n        /**\n         * Finds and removes pairs that have been inactive for a set amount of time.\n         * @method removeOld\n         * @param {object} pairs\n         * @param {number} timestamp\n         */\n\n\n        Pairs.removeOld = function (pairs, timestamp) {\n          var pairsList = pairs.list,\n              pairsTable = pairs.table,\n              indexesToRemove = [],\n              pair,\n              collision,\n              pairIndex,\n              i;\n\n          for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision; // never remove sleeping pairs\n\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n              pair.timeUpdated = timestamp;\n              continue;\n            } // if pair is inactive for too long, mark it to be removed\n\n\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n              indexesToRemove.push(i);\n            }\n          } // remove marked pairs\n\n\n          for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n          }\n        };\n        /**\n         * Clears the given pairs structure.\n         * @method clear\n         * @param {pairs} pairs\n         * @return {pairs} pairs\n         */\n\n\n        Pairs.clear = function (pairs) {\n          pairs.table = {};\n          pairs.list.length = 0;\n          pairs.collisionStart.length = 0;\n          pairs.collisionActive.length = 0;\n          pairs.collisionEnd.length = 0;\n          return pairs;\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"./Pair\": 7\n    }],\n    9: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Query` module contains methods for performing collision queries.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Query\n      */\n      var Query = {};\n      module.exports = Query;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var SAT = _dereq_('./SAT');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Bodies = _dereq_('../factory/Bodies');\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      (function () {\n        /**\n         * Returns a list of collisions between `body` and `bodies`.\n         * @method collides\n         * @param {body} body\n         * @param {body[]} bodies\n         * @return {object[]} Collisions\n         */\n        Query.collides = function (body, bodies) {\n          var collisions = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n\n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n              for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                var part = bodyA.parts[j];\n\n                if (Bounds.overlaps(part.bounds, body.bounds)) {\n                  var collision = SAT.collides(part, body);\n\n                  if (collision.collided) {\n                    collisions.push(collision);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          return collisions;\n        };\n        /**\n         * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n         * @method ray\n         * @param {body[]} bodies\n         * @param {vector} startPoint\n         * @param {vector} endPoint\n         * @param {number} [rayWidth]\n         * @return {object[]} Collisions\n         */\n\n\n        Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n          rayWidth = rayWidth || 1e-100;\n          var rayAngle = Vector.angle(startPoint, endPoint),\n              rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n              rayX = (endPoint.x + startPoint.x) * 0.5,\n              rayY = (endPoint.y + startPoint.y) * 0.5,\n              ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n              collisions = Query.collides(ray, bodies);\n\n          for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;\n          }\n\n          return collisions;\n        };\n        /**\n         * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n         * @method region\n         * @param {body[]} bodies\n         * @param {bounds} bounds\n         * @param {bool} [outside=false]\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.region = function (bodies, bounds, outside) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if (overlaps && !outside || !overlaps && outside) result.push(body);\n          }\n\n          return result;\n        };\n        /**\n         * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n         * @method point\n         * @param {body[]} bodies\n         * @param {vector} point\n         * @return {body[]} The bodies matching the query\n         */\n\n\n        Query.point = function (bodies, point) {\n          var result = [];\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (Bounds.contains(body.bounds, point)) {\n              for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                var part = body.parts[j];\n\n                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                  result.push(body);\n                  break;\n                }\n              }\n            }\n          }\n\n          return result;\n        };\n      })();\n    }, {\n      \"../factory/Bodies\": 23,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"./SAT\": 11\n    }],\n    10: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Resolver` module contains methods for resolving collision pairs.\n      *\n      * @class Resolver\n      */\n      var Resolver = {};\n      module.exports = Resolver;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        Resolver._restingThresh = 4;\n        Resolver._restingThreshTangent = 6;\n        Resolver._positionDampen = 0.9;\n        Resolver._positionWarming = 0.8;\n        Resolver._frictionNormalMultiplier = 5;\n        /**\n         * Prepare pairs for position solving.\n         * @method preSolvePosition\n         * @param {pair[]} pairs\n         */\n\n        Resolver.preSolvePosition = function (pairs) {\n          var i, pair, activeCount; // find total contacts on each body\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n          }\n        };\n        /**\n         * Find a solution for pair positions.\n         * @method solvePosition\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solvePosition = function (pairs, timeScale) {\n          var i,\n              pair,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              bodyBtoA,\n              contactShare,\n              positionImpulse,\n              contactCount = {},\n              tempA = Vector._temp[0],\n              tempB = Vector._temp[1],\n              tempC = Vector._temp[2],\n              tempD = Vector._temp[3]; // find impulses required to resolve penetration\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal; // get current separation between body edges involved in collision\n\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), Vector.add(bodyA.positionImpulse, Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n            pair.separation = Vector.dot(normal, bodyBtoA);\n          }\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n            if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyA.totalContacts;\n              bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n              bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              contactShare = Resolver._positionDampen / bodyB.totalContacts;\n              bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n              bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n          }\n        };\n        /**\n         * Apply position resolution.\n         * @method postSolvePosition\n         * @param {body[]} bodies\n         */\n\n\n        Resolver.postSolvePosition = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset contact count\n\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n              // update body geometry\n              for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                Vertices.translate(part.vertices, body.positionImpulse);\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n                part.position.x += body.positionImpulse.x;\n                part.position.y += body.positionImpulse.y;\n              } // move the body without changing velocity\n\n\n              body.positionPrev.x += body.positionImpulse.x;\n              body.positionPrev.y += body.positionImpulse.y;\n\n              if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                // reset cached impulse if the body has velocity along it\n                body.positionImpulse.x = 0;\n                body.positionImpulse.y = 0;\n              } else {\n                // warm the next iteration\n                body.positionImpulse.x *= Resolver._positionWarming;\n                body.positionImpulse.y *= Resolver._positionWarming;\n              }\n            }\n          }\n        };\n        /**\n         * Prepare pairs for velocity solving.\n         * @method preSolveVelocity\n         * @param {pair[]} pairs\n         */\n\n\n        Resolver.preSolveVelocity = function (pairs) {\n          var i,\n              j,\n              pair,\n              contacts,\n              collision,\n              bodyA,\n              bodyB,\n              normal,\n              tangent,\n              contact,\n              contactVertex,\n              normalImpulse,\n              tangentImpulse,\n              offset,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1];\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent; // resolve each contact\n\n            for (j = 0; j < contacts.length; j++) {\n              contact = contacts[j];\n              contactVertex = contact.vertex;\n              normalImpulse = contact.normalImpulse;\n              tangentImpulse = contact.tangentImpulse;\n\n              if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                // total impulse from contact\n                impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n                impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                  bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                  bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                  bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                  offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                  bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                  bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                  bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                }\n              }\n            }\n          }\n        };\n        /**\n         * Find a solution for pair velocities.\n         * @method solveVelocity\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Resolver.solveVelocity = function (pairs, timeScale) {\n          var timeScaleSquared = timeScale * timeScale,\n              impulse = Vector._temp[0],\n              tempA = Vector._temp[1],\n              tempB = Vector._temp[2],\n              tempC = Vector._temp[3],\n              tempD = Vector._temp[4],\n              tempE = Vector._temp[5];\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            if (!pair.isActive || pair.isSensor) continue;\n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length; // update body velocities\n\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev; // resolve each contact\n\n            for (var j = 0; j < contacts.length; j++) {\n              var contact = contacts[j],\n                  contactVertex = contact.vertex,\n                  offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                  offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                  velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                  velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD),\n                  relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                  normalVelocity = Vector.dot(normal, relativeVelocity);\n              var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                  tangentSpeed = Math.abs(tangentVelocity),\n                  tangentVelocityDirection = Common.sign(tangentVelocity); // raw impulses\n\n              var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                  normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier; // coulomb friction\n\n\n              var tangentImpulse = tangentVelocity,\n                  maxFriction = Infinity;\n\n              if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                maxFriction = tangentSpeed;\n                tangentImpulse = Common.clamp(pair.friction * tangentVelocityDirection * timeScaleSquared, -maxFriction, maxFriction);\n              } // modify impulses accounting for mass, inertia and offset\n\n\n              var oAcN = Vector.cross(offsetA, normal),\n                  oBcN = Vector.cross(offsetB, normal),\n                  share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n              normalImpulse *= share;\n              tangentImpulse *= share; // handle high velocity and resting collisions separately\n\n              if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                // high normal velocity so clear cached contact normal impulse\n                contact.normalImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // impulse constraint tends to 0\n                var contactNormalImpulse = contact.normalImpulse;\n                contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n              } // handle high velocity and resting collisions separately\n\n\n              if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                // high tangent velocity so clear cached contact tangent impulse\n                contact.tangentImpulse = 0;\n              } else {\n                // solve resting collision constraints using Erin Catto's method (GDC08)\n                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                var contactTangentImpulse = contact.tangentImpulse;\n                contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n              } // total impulse from contact\n\n\n              impulse.x = normal.x * normalImpulse + tangent.x * tangentImpulse;\n              impulse.y = normal.y * normalImpulse + tangent.y * tangentImpulse; // apply impulse from contact\n\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n              }\n\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    11: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n      *\n      * @class SAT\n      */\n      // TODO: true circles and curves\n      var SAT = {};\n      module.exports = SAT;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      (function () {\n        /**\n         * Detect collision between two bodies using the Separating Axis Theorem.\n         * @method collides\n         * @param {body} bodyA\n         * @param {body} bodyB\n         * @param {collision} previousCollision\n         * @return {collision} collision\n         */\n        SAT.collides = function (bodyA, bodyB, previousCollision) {\n          var overlapAB,\n              overlapBA,\n              minOverlap,\n              collision,\n              canReusePrevCol = false;\n\n          if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed; // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2; // reuse collision object\n\n            collision = previousCollision;\n          } else {\n            collision = {\n              collided: false,\n              bodyA: bodyA,\n              bodyB: bodyB\n            };\n          }\n\n          if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n          } else {\n            // if we can't reuse a result, perform a full SAT test\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n              collision.collided = false;\n              return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n              minOverlap = overlapAB;\n              collision.axisBody = bodyA;\n            } else {\n              minOverlap = overlapBA;\n              collision.axisBody = bodyB;\n            } // important for reuse later\n\n\n            collision.axisNumber = minOverlap.axisNumber;\n          }\n\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.collided = true;\n          collision.depth = minOverlap.overlap;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB; // ensure normal is facing away from bodyA\n\n          if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n              x: minOverlap.axis.x,\n              y: minOverlap.axis.y\n            };\n          } else {\n            collision.normal = {\n              x: -minOverlap.axis.x,\n              y: -minOverlap.axis.y\n            };\n          }\n\n          collision.tangent = Vector.perp(collision.normal);\n          collision.penetration = collision.penetration || {};\n          collision.penetration.x = collision.normal.x * collision.depth;\n          collision.penetration.y = collision.normal.y * collision.depth; // find support points, there is always either exactly one or two\n\n          var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n              supports = []; // find the supports from bodyB that are inside bodyA\n\n\n          if (Vertices.contains(bodyA.vertices, verticesB[0])) supports.push(verticesB[0]);\n          if (Vertices.contains(bodyA.vertices, verticesB[1])) supports.push(verticesB[1]); // find the supports from bodyA that are inside bodyB\n\n          if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\n            if (Vertices.contains(bodyB.vertices, verticesA[0])) supports.push(verticesA[0]);\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1])) supports.push(verticesA[1]);\n          } // account for the edge case of overlapping but no vertex containment\n\n\n          if (supports.length < 1) supports = [verticesB[0]];\n          collision.supports = supports;\n          return collision;\n        };\n        /**\n         * Find the overlap between two sets of vertices.\n         * @method _overlapAxes\n         * @private\n         * @param {} verticesA\n         * @param {} verticesB\n         * @param {} axes\n         * @return result\n         */\n\n\n        SAT._overlapAxes = function (verticesA, verticesB, axes) {\n          var projectionA = Vector._temp[0],\n              projectionB = Vector._temp[1],\n              result = {\n            overlap: Number.MAX_VALUE\n          },\n              overlap,\n              axis;\n\n          for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n              result.overlap = overlap;\n              return result;\n            }\n\n            if (overlap < result.overlap) {\n              result.overlap = overlap;\n              result.axis = axis;\n              result.axisNumber = i;\n            }\n          }\n\n          return result;\n        };\n        /**\n         * Projects vertices on an axis and returns an interval.\n         * @method _projectToAxis\n         * @private\n         * @param {} projection\n         * @param {} vertices\n         * @param {} axis\n         */\n\n\n        SAT._projectToAxis = function (projection, vertices, axis) {\n          var min = Vector.dot(vertices[0], axis),\n              max = min;\n\n          for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) {\n              max = dot;\n            } else if (dot < min) {\n              min = dot;\n            }\n          }\n\n          projection.min = min;\n          projection.max = max;\n        };\n        /**\n         * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n         * @method _findSupports\n         * @private\n         * @param {} bodyA\n         * @param {} bodyB\n         * @param {} normal\n         * @return [vector]\n         */\n\n\n        SAT._findSupports = function (bodyA, bodyB, normal) {\n          var nearestDistance = Number.MAX_VALUE,\n              vertexToBody = Vector._temp[0],\n              vertices = bodyB.vertices,\n              bodyAPosition = bodyA.position,\n              distance,\n              vertex,\n              vertexA,\n              vertexB; // find closest vertex on bodyB\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n              nearestDistance = distance;\n              vertexA = vertex;\n            }\n          } // find next closest vertex using the two connected to it\n\n\n          var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n          vertex = vertices[prevIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          nearestDistance = -Vector.dot(normal, vertexToBody);\n          vertexB = vertex;\n          var nextIndex = (vertexA.index + 1) % vertices.length;\n          vertex = vertices[nextIndex];\n          vertexToBody.x = vertex.x - bodyAPosition.x;\n          vertexToBody.y = vertex.y - bodyAPosition.y;\n          distance = -Vector.dot(normal, vertexToBody);\n\n          if (distance < nearestDistance) {\n            vertexB = vertex;\n          }\n\n          return [vertexA, vertexB];\n        };\n      })();\n    }, {\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    12: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n      * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n      * The stiffness of constraints can be modified to create springs or elastic.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Constraint\n      */\n      var Constraint = {};\n      module.exports = Constraint;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Axes = _dereq_('../geometry/Axes');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        Constraint._warming = 0.4;\n        Constraint._torqueDampen = 1;\n        Constraint._minLength = 0.000001;\n        /**\n         * Creates a new constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n         * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n         * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {} options\n         * @return {constraint} constraint\n         */\n\n        Constraint.create = function (options) {\n          var constraint = options; // if bodies defined but no points, use body centre\n\n          if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n            x: 0,\n            y: 0\n          };\n          if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n            x: 0,\n            y: 0\n          }; // calculate static length using initial world space points\n\n          var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n              initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n              length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n          constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n          constraint.id = constraint.id || Common.nextId();\n          constraint.label = constraint.label || 'Constraint';\n          constraint.type = 'constraint';\n          constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n          constraint.damping = constraint.damping || 0;\n          constraint.angularStiffness = constraint.angularStiffness || 0;\n          constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n          constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n          constraint.plugin = {}; // render\n\n          var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n          };\n\n          if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n          } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n          }\n\n          constraint.render = Common.extend(render, constraint.render);\n          return constraint;\n        };\n        /**\n         * Prepares for solving by constraint warming.\n         * @private\n         * @method preSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.preSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n          }\n        };\n        /**\n         * Solves all constraints in a list of collisions.\n         * @private\n         * @method solveAll\n         * @param {constraint[]} constraints\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solveAll = function (constraints, timeScale) {\n          // Solve fixed constraints first.\n          for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n                fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (fixedA || fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          } // Solve free constraints last.\n\n\n          for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n            if (!fixedA && !fixedB) {\n              Constraint.solve(constraints[i], timeScale);\n            }\n          }\n        };\n        /**\n         * Solves a distance constraint with Gauss-Siedel method.\n         * @private\n         * @method solve\n         * @param {constraint} constraint\n         * @param {number} timeScale\n         */\n\n\n        Constraint.solve = function (constraint, timeScale) {\n          var bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB;\n          if (!bodyA && !bodyB) return; // update reference angle\n\n          if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n          } // update reference angle\n\n\n          if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n          }\n\n          var pointAWorld = pointA,\n              pointBWorld = pointB;\n          if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n          if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n          if (!pointAWorld || !pointBWorld) return;\n          var delta = Vector.sub(pointAWorld, pointBWorld),\n              currentLength = Vector.magnitude(delta); // prevent singularity\n\n          if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n          } // solve distance constraint with Gauss-Siedel method\n\n\n          var difference = (currentLength - constraint.length) / currentLength,\n              stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n              force = Vector.mult(delta, difference * stiffness),\n              massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n              inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n              resistanceTotal = massTotal + inertiaTotal,\n              torque,\n              share,\n              normal,\n              normalVelocity,\n              relativeVelocity;\n\n          if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n            relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n          }\n\n          if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n              bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n          }\n\n          if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share; // apply damping\n\n            if (constraint.damping) {\n              bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n              bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            } // apply torque\n\n\n            torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n          }\n        };\n        /**\n         * Performs body updates required after solving constraints.\n         * @private\n         * @method postSolveAll\n         * @param {body[]} bodies\n         */\n\n\n        Constraint.postSolveAll = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n              continue;\n            }\n\n            Sleeping.set(body, false); // update geometry and reset\n\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              Vertices.translate(part.vertices, impulse);\n\n              if (j > 0) {\n                part.position.x += impulse.x;\n                part.position.y += impulse.y;\n              }\n\n              if (impulse.angle !== 0) {\n                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                Axes.rotate(part.axes, impulse.angle);\n\n                if (j > 0) {\n                  Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                }\n              }\n\n              Bounds.update(part.bounds, part.vertices, body.velocity);\n            } // dampen the cached impulse for warming next step\n\n\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n          }\n        };\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n         *\n         * @property id\n         * @type number\n         */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * An arbitrary `String` name to help the user identify and manage bodies.\n         *\n         * @property label\n         * @type string\n         * @default \"Constraint\"\n         */\n\n        /**\n         * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n         *\n         * @property render\n         * @type object\n         */\n\n        /**\n         * A flag that indicates if the constraint should be rendered.\n         *\n         * @property render.visible\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Number` that defines the line width to use when rendering the constraint outline.\n         * A value of `0` means no outline will be rendered.\n         *\n         * @property render.lineWidth\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A `String` that defines the stroke style to use when rendering the constraint outline.\n         * It is the same as when using a canvas, so it accepts CSS style property values.\n         *\n         * @property render.strokeStyle\n         * @type string\n         * @default a random colour\n         */\n\n        /**\n         * A `String` that defines the constraint rendering type. \n         * The possible values are 'line', 'pin', 'spring'.\n         * An appropriate render type will be automatically chosen unless one is given in options.\n         *\n         * @property render.type\n         * @type string\n         * @default 'line'\n         */\n\n        /**\n         * A `Boolean` that defines if the constraint's anchor points should be rendered.\n         *\n         * @property render.anchors\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * The first possible `Body` that this constraint is attached to.\n         *\n         * @property bodyA\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The second possible `Body` that this constraint is attached to.\n         *\n         * @property bodyB\n         * @type body\n         * @default null\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n         *\n         * @property pointA\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n         *\n         * @property pointB\n         * @type vector\n         * @default { x: 0, y: 0 }\n         */\n\n        /**\n         * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n         * A value of `1` means the constraint should be very stiff.\n         * A value of `0.2` means the constraint acts like a soft spring.\n         *\n         * @property stiffness\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the damping of the constraint, \n         * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n         * Damping will only be apparent when the constraint also has a very low `stiffness`.\n         * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n         * A value of `0` means the constraint will apply no damping.\n         *\n         * @property damping\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * A `Number` that specifies the target resting length of the constraint. \n         * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n         *\n         * @property length\n         * @type number\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    13: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n      * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class MouseConstraint\n      */\n      var MouseConstraint = {};\n      module.exports = MouseConstraint;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Sleeping = _dereq_('../core/Sleeping');\n\n      var Mouse = _dereq_('../core/Mouse');\n\n      var Events = _dereq_('../core/Events');\n\n      var Detector = _dereq_('../collision/Detector');\n\n      var Constraint = _dereq_('./Constraint');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Common = _dereq_('../core/Common');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      (function () {\n        /**\n         * Creates a new mouse constraint.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {engine} engine\n         * @param {} options\n         * @return {MouseConstraint} A new MouseConstraint\n         */\n        MouseConstraint.create = function (engine, options) {\n          var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n          if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n              mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n              mouse = Mouse.create(options.element);\n            } else {\n              mouse = Mouse.create();\n              Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n          }\n\n          var constraint = Constraint.create({\n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: {\n              x: 0,\n              y: 0\n            },\n            length: 0.01,\n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n              strokeStyle: '#90EE90',\n              lineWidth: 3\n            }\n          });\n          var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n              category: 0x0001,\n              mask: 0xFFFFFFFF,\n              group: 0\n            }\n          };\n          var mouseConstraint = Common.extend(defaults, options);\n          Events.on(engine, 'beforeUpdate', function () {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n\n            MouseConstraint._triggerEvents(mouseConstraint);\n          });\n          return mouseConstraint;\n        };\n        /**\n         * Updates the given mouse constraint.\n         * @private\n         * @method update\n         * @param {MouseConstraint} mouseConstraint\n         * @param {body[]} bodies\n         */\n\n\n        MouseConstraint.update = function (mouseConstraint, bodies) {\n          var mouse = mouseConstraint.mouse,\n              constraint = mouseConstraint.constraint,\n              body = mouseConstraint.body;\n\n          if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n              for (var i = 0; i < bodies.length; i++) {\n                body = bodies[i];\n\n                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                  for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Vertices.contains(part.vertices, mouse.position)) {\n                      constraint.pointA = mouse.position;\n                      constraint.bodyB = mouseConstraint.body = body;\n                      constraint.pointB = {\n                        x: mouse.position.x - body.position.x,\n                        y: mouse.position.y - body.position.y\n                      };\n                      constraint.angleB = body.angle;\n                      Sleeping.set(body, false);\n                      Events.trigger(mouseConstraint, 'startdrag', {\n                        mouse: mouse,\n                        body: body\n                      });\n                      break;\n                    }\n                  }\n                }\n              }\n            } else {\n              Sleeping.set(constraint.bodyB, false);\n              constraint.pointA = mouse.position;\n            }\n          } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n            if (body) Events.trigger(mouseConstraint, 'enddrag', {\n              mouse: mouse,\n              body: body\n            });\n          }\n        };\n        /**\n         * Triggers mouse constraint events.\n         * @method _triggerEvents\n         * @private\n         * @param {mouse} mouseConstraint\n         */\n\n\n        MouseConstraint._triggerEvents = function (mouseConstraint) {\n          var mouse = mouseConstraint.mouse,\n              mouseEvents = mouse.sourceEvents;\n          if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n            mouse: mouse\n          });\n          if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n            mouse: mouse\n          });\n          if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n            mouse: mouse\n          }); // reset the mouse state ready for the next step\n\n          Mouse.clearSourceEvents(mouse);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired when the mouse has moved (or a touch moves) during the last step\n        *\n        * @event mousemove\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is down (or a touch has started) during the last step\n        *\n        * @event mousedown\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the mouse is up (or a touch has ended) during the last step\n        *\n        * @event mouseup\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user starts dragging a body\n        *\n        * @event startdrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired when the user ends dragging a body\n        *\n        * @event enddrag\n        * @param {} event An event object\n        * @param {mouse} event.mouse The engine's mouse instance\n        * @param {body} event.body The body that has stopped being dragged\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A `String` denoting the type of object.\n         *\n         * @property type\n         * @type string\n         * @default \"constraint\"\n         * @readOnly\n         */\n\n        /**\n         * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n         *\n         * @property mouse\n         * @type mouse\n         * @default mouse\n         */\n\n        /**\n         * The `Body` that is currently being moved by the user, or `null` if no body.\n         *\n         * @property body\n         * @type body\n         * @default null\n         */\n\n        /**\n         * The `Constraint` object that is used to move the body during interaction.\n         *\n         * @property constraint\n         * @type constraint\n         */\n\n        /**\n         * An `Object` that specifies the collision filter properties.\n         * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n         * See `body.collisionFilter` for more information.\n         *\n         * @property collisionFilter\n         * @type object\n         */\n\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Detector\": 5,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../core/Sleeping\": 22,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vertices\": 29,\n      \"./Constraint\": 12\n    }],\n    14: [function (_dereq_, module, exports) {\n      (function (global) {\n        /**\n        * The `Matter.Common` module contains utility functions that are common to all modules.\n        *\n        * @class Common\n        */\n        var Common = {};\n        module.exports = Common;\n\n        (function () {\n          Common._nextId = 0;\n          Common._seed = 0;\n          Common._nowStartTime = +new Date();\n          /**\n           * Extends the object in the first argument using the object in the second argument.\n           * @method extend\n           * @param {} obj\n           * @param {boolean} deep\n           * @return {} obj extended\n           */\n\n          Common.extend = function (obj, deep) {\n            var argsStart, args, deepClone;\n\n            if (typeof deep === 'boolean') {\n              argsStart = 2;\n              deepClone = deep;\n            } else {\n              argsStart = 1;\n              deepClone = true;\n            }\n\n            for (var i = argsStart; i < arguments.length; i++) {\n              var source = arguments[i];\n\n              if (source) {\n                for (var prop in source) {\n                  if (deepClone && source[prop] && source[prop].constructor === Object) {\n                    if (!obj[prop] || obj[prop].constructor === Object) {\n                      obj[prop] = obj[prop] || {};\n                      Common.extend(obj[prop], deepClone, source[prop]);\n                    } else {\n                      obj[prop] = source[prop];\n                    }\n                  } else {\n                    obj[prop] = source[prop];\n                  }\n                }\n              }\n            }\n\n            return obj;\n          };\n          /**\n           * Creates a new clone of the object, if deep is true references will also be cloned.\n           * @method clone\n           * @param {} obj\n           * @param {bool} deep\n           * @return {} obj cloned\n           */\n\n\n          Common.clone = function (obj, deep) {\n            return Common.extend({}, deep, obj);\n          };\n          /**\n           * Returns the list of keys for the given object.\n           * @method keys\n           * @param {} obj\n           * @return {string[]} keys\n           */\n\n\n          Common.keys = function (obj) {\n            if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n            var keys = [];\n\n            for (var key in obj) keys.push(key);\n\n            return keys;\n          };\n          /**\n           * Returns the list of values for the given object.\n           * @method values\n           * @param {} obj\n           * @return {array} Array of the objects property values\n           */\n\n\n          Common.values = function (obj) {\n            var values = [];\n\n            if (Object.keys) {\n              var keys = Object.keys(obj);\n\n              for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n              }\n\n              return values;\n            } // avoid hasOwnProperty for performance\n\n\n            for (var key in obj) values.push(obj[key]);\n\n            return values;\n          };\n          /**\n           * Gets a value from `base` relative to the `path` string.\n           * @method get\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} The object at the given path\n           */\n\n\n          Common.get = function (obj, path, begin, end) {\n            path = path.split('.').slice(begin, end);\n\n            for (var i = 0; i < path.length; i += 1) {\n              obj = obj[path[i]];\n            }\n\n            return obj;\n          };\n          /**\n           * Sets a value on `base` relative to the given `path` string.\n           * @method set\n           * @param {} obj The base object\n           * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n           * @param {} val The value to set\n           * @param {number} [begin] Path slice begin\n           * @param {number} [end] Path slice end\n           * @return {} Pass through `val` for chaining\n           */\n\n\n          Common.set = function (obj, path, val, begin, end) {\n            var parts = path.split('.').slice(begin, end);\n            Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n            return val;\n          };\n          /**\n           * Shuffles the given array in-place.\n           * The function uses a seeded random generator.\n           * @method shuffle\n           * @param {array} array\n           * @return {array} array shuffled randomly\n           */\n\n\n          Common.shuffle = function (array) {\n            for (var i = array.length - 1; i > 0; i--) {\n              var j = Math.floor(Common.random() * (i + 1));\n              var temp = array[i];\n              array[i] = array[j];\n              array[j] = temp;\n            }\n\n            return array;\n          };\n          /**\n           * Randomly chooses a value from a list with equal probability.\n           * The function uses a seeded random generator.\n           * @method choose\n           * @param {array} choices\n           * @return {object} A random choice object from the array\n           */\n\n\n          Common.choose = function (choices) {\n            return choices[Math.floor(Common.random() * choices.length)];\n          };\n          /**\n           * Returns true if the object is a HTMLElement, otherwise false.\n           * @method isElement\n           * @param {object} obj\n           * @return {boolean} True if the object is a HTMLElement, otherwise false\n           */\n\n\n          Common.isElement = function (obj) {\n            if (typeof HTMLElement !== 'undefined') {\n              return obj instanceof HTMLElement;\n            }\n\n            return !!(obj && obj.nodeType && obj.nodeName);\n          };\n          /**\n           * Returns true if the object is an array.\n           * @method isArray\n           * @param {object} obj\n           * @return {boolean} True if the object is an array, otherwise false\n           */\n\n\n          Common.isArray = function (obj) {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n          };\n          /**\n           * Returns true if the object is a function.\n           * @method isFunction\n           * @param {object} obj\n           * @return {boolean} True if the object is a function, otherwise false\n           */\n\n\n          Common.isFunction = function (obj) {\n            return typeof obj === \"function\";\n          };\n          /**\n           * Returns true if the object is a plain object.\n           * @method isPlainObject\n           * @param {object} obj\n           * @return {boolean} True if the object is a plain object, otherwise false\n           */\n\n\n          Common.isPlainObject = function (obj) {\n            return typeof obj === 'object' && obj.constructor === Object;\n          };\n          /**\n           * Returns true if the object is a string.\n           * @method isString\n           * @param {object} obj\n           * @return {boolean} True if the object is a string, otherwise false\n           */\n\n\n          Common.isString = function (obj) {\n            return toString.call(obj) === '[object String]';\n          };\n          /**\n           * Returns the given value clamped between a minimum and maximum value.\n           * @method clamp\n           * @param {number} value\n           * @param {number} min\n           * @param {number} max\n           * @return {number} The value clamped between min and max inclusive\n           */\n\n\n          Common.clamp = function (value, min, max) {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n          };\n          /**\n           * Returns the sign of the given value.\n           * @method sign\n           * @param {number} value\n           * @return {number} -1 if negative, +1 if 0 or positive\n           */\n\n\n          Common.sign = function (value) {\n            return value < 0 ? -1 : 1;\n          };\n          /**\n           * Returns the current timestamp since the time origin (e.g. from page load).\n           * The result will be high-resolution including decimal places if available.\n           * @method now\n           * @return {number} the current timestamp\n           */\n\n\n          Common.now = function () {\n            if (window.performance) {\n              if (window.performance.now) {\n                return window.performance.now();\n              } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n              }\n            }\n\n            return new Date() - Common._nowStartTime;\n          };\n          /**\n           * Returns a random value between a minimum and a maximum value inclusive.\n           * The function uses a seeded random generator.\n           * @method random\n           * @param {number} min\n           * @param {number} max\n           * @return {number} A random number between min and max inclusive\n           */\n\n\n          Common.random = function (min, max) {\n            min = typeof min !== \"undefined\" ? min : 0;\n            max = typeof max !== \"undefined\" ? max : 1;\n            return min + _seededRandom() * (max - min);\n          };\n\n          var _seededRandom = function () {\n            // https://en.wikipedia.org/wiki/Linear_congruential_generator\n            Common._seed = (Common._seed * 9301 + 49297) % 233280;\n            return Common._seed / 233280;\n          };\n          /**\n           * Converts a CSS hex colour string into an integer.\n           * @method colorToNumber\n           * @param {string} colorString\n           * @return {number} An integer representing the CSS hex string\n           */\n\n\n          Common.colorToNumber = function (colorString) {\n            colorString = colorString.replace('#', '');\n\n            if (colorString.length == 3) {\n              colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n            }\n\n            return parseInt(colorString, 16);\n          };\n          /**\n           * The console logging level to use, where each level includes all levels above and excludes the levels below.\n           * The default level is 'debug' which shows all console messages.  \n           *\n           * Possible level values are:\n           * - 0 = None\n           * - 1 = Debug\n           * - 2 = Info\n           * - 3 = Warn\n           * - 4 = Error\n           * @property Common.logLevel\n           * @type {Number}\n           * @default 1\n           */\n\n\n          Common.logLevel = 1;\n          /**\n           * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method log\n           * @param ...objs {} The objects to log.\n           */\n\n          Common.log = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method info\n           * @param ...objs {} The objects to log.\n           */\n\n\n          Common.info = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n              console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n           * The message will be prefixed with 'matter-js' to make it easily identifiable.\n           * @method warn\n           * @param ...objs {} The objects to log.\n           */\n\n\n          Common.warn = function () {\n            if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n              console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n            }\n          };\n          /**\n           * Returns the next unique sequential ID.\n           * @method nextId\n           * @return {Number} Unique sequential ID\n           */\n\n\n          Common.nextId = function () {\n            return Common._nextId++;\n          };\n          /**\n           * A cross browser compatible indexOf implementation.\n           * @method indexOf\n           * @param {array} haystack\n           * @param {object} needle\n           * @return {number} The position of needle in haystack, otherwise -1.\n           */\n\n\n          Common.indexOf = function (haystack, needle) {\n            if (haystack.indexOf) return haystack.indexOf(needle);\n\n            for (var i = 0; i < haystack.length; i++) {\n              if (haystack[i] === needle) return i;\n            }\n\n            return -1;\n          };\n          /**\n           * A cross browser compatible array map implementation.\n           * @method map\n           * @param {array} list\n           * @param {function} func\n           * @return {array} Values from list transformed by func.\n           */\n\n\n          Common.map = function (list, func) {\n            if (list.map) {\n              return list.map(func);\n            }\n\n            var mapped = [];\n\n            for (var i = 0; i < list.length; i += 1) {\n              mapped.push(func(list[i]));\n            }\n\n            return mapped;\n          };\n          /**\n           * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n           * Circular dependencies are allowed.\n           * @method topologicalSort\n           * @param {object} graph\n           * @return {array} Partially ordered set of vertices in topological order.\n           */\n\n\n          Common.topologicalSort = function (graph) {\n            // https://github.com/mgechev/javascript-algorithms\n            // Copyright (c) Minko Gechev (MIT license)\n            // Modifications: tidy formatting and naming\n            var result = [],\n                visited = [],\n                temp = [];\n\n            for (var node in graph) {\n              if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n              }\n            }\n\n            return result;\n          };\n\n          Common._topologicalSort = function (node, visited, temp, graph, result) {\n            var neighbors = graph[node] || [];\n            temp[node] = true;\n\n            for (var i = 0; i < neighbors.length; i += 1) {\n              var neighbor = neighbors[i];\n\n              if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n              }\n\n              if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n              }\n            }\n\n            temp[node] = false;\n            visited[node] = true;\n            result.push(node);\n          };\n          /**\n           * Takes _n_ functions as arguments and returns a new function that calls them in order.\n           * The arguments applied when calling the new function will also be applied to every function passed.\n           * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n           * Therefore if a passed function does not return a value, the previously returned value is maintained.\n           * After all passed functions have been called the new function returns the last returned value (if any).\n           * If any of the passed functions are a chain, then the chain will be flattened.\n           * @method chain\n           * @param ...funcs {function} The functions to chain.\n           * @return {function} A new function that calls the passed functions in order.\n           */\n\n\n          Common.chain = function () {\n            var funcs = [];\n\n            for (var i = 0; i < arguments.length; i += 1) {\n              var func = arguments[i];\n\n              if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n              } else {\n                funcs.push(func);\n              }\n            }\n\n            var chain = function () {\n              // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n              var lastResult,\n                  args = new Array(arguments.length);\n\n              for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n              }\n\n              for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                  lastResult = result;\n                }\n              }\n\n              return lastResult;\n            };\n\n            chain._chained = funcs;\n            return chain;\n          };\n          /**\n           * Chains a function to excute before the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathBefore\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain before the original\n           * @return {function} The chained function that replaced the original\n           */\n\n\n          Common.chainPathBefore = function (base, path, func) {\n            return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n          };\n          /**\n           * Chains a function to excute after the original function on the given `path` relative to `base`.\n           * See also docs for `Common.chain`.\n           * @method chainPathAfter\n           * @param {} base The base object\n           * @param {string} path The path relative to `base`\n           * @param {function} func The function to chain after the original\n           * @return {function} The chained function that replaced the original\n           */\n\n\n          Common.chainPathAfter = function (base, path, func) {\n            return Common.set(base, path, Common.chain(Common.get(base, path), func));\n          };\n          /**\n           * Used to require external libraries outside of the bundle.\n           * It first looks for the `globalName` on the environment's global namespace.\n           * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n           * @private\n           * @method _requireGlobal\n           * @param {string} globalName The global module name\n           * @param {string} moduleName The fallback CommonJS module name\n           * @return {} The loaded module\n           */\n\n\n          Common._requireGlobal = function (globalName, moduleName) {\n            var obj = typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null;\n            return obj || _dereq_(moduleName);\n          };\n        })();\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    15: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Engine` module contains methods for creating and manipulating engines.\n      * An engine is a controller that manages updating the simulation of the world.\n      * See `Matter.Runner` for an optional game loop utility.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Engine\n      */\n      var Engine = {};\n      module.exports = Engine;\n\n      var World = _dereq_('../body/World');\n\n      var Sleeping = _dereq_('./Sleeping');\n\n      var Resolver = _dereq_('../collision/Resolver');\n\n      var Render = _dereq_('../render/Render');\n\n      var Pairs = _dereq_('../collision/Pairs');\n\n      var Metrics = _dereq_('./Metrics');\n\n      var Grid = _dereq_('../collision/Grid');\n\n      var Events = _dereq_('./Events');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('./Common');\n\n      var Body = _dereq_('../body/Body');\n\n      (function () {\n        /**\n         * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {engine} engine\n         */\n        Engine.create = function (element, options) {\n          // options may be passed as the first (and only) argument\n          options = Common.isElement(element) ? options : element;\n          element = Common.isElement(element) ? element : null;\n          options = options || {};\n\n          if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n          }\n\n          var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n              timestamp: 0,\n              timeScale: 1\n            },\n            broadphase: {\n              controller: Grid\n            }\n          };\n          var engine = Common.extend(defaults, options); // @deprecated\n\n          if (element || engine.render) {\n            var renderDefaults = {\n              element: element,\n              controller: Render\n            };\n            engine.render = Common.extend(renderDefaults, engine.render);\n          } // @deprecated\n\n\n          if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n          } // @deprecated\n\n\n          if (engine.render) {\n            engine.render.engine = engine;\n          }\n\n          engine.world = options.world || World.create(engine.world);\n          engine.pairs = Pairs.create();\n          engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n          engine.metrics = engine.metrics || {\n            extended: false\n          };\n          return engine;\n        };\n        /**\n         * Moves the simulation forward in time by `delta` ms.\n         * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n         * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n         * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n         * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n         * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n         *\n         * Triggers `beforeUpdate` and `afterUpdate` events.\n         * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n         * @method update\n         * @param {engine} engine\n         * @param {number} [delta=16.666]\n         * @param {number} [correction=1]\n         */\n\n\n        Engine.update = function (engine, delta, correction) {\n          delta = delta || 1000 / 60;\n          correction = correction || 1;\n          var world = engine.world,\n              timing = engine.timing,\n              broadphase = engine.broadphase,\n              broadphasePairs = [],\n              i; // increment timestamp\n\n          timing.timestamp += delta * timing.timeScale; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(engine, 'beforeUpdate', event); // get lists of all bodies and constraints, no matter what composites they are in\n\n          var allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world); // if sleeping enabled, call the sleeping controller\n\n          if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale); // applies gravity to all bodies\n\n          Engine._bodiesApplyGravity(allBodies, world.gravity); // update all body position and rotation by integration\n\n\n          Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds); // update all constraints (first pass)\n\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // broadphase pass: find potential collision pairs\n\n          if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified) broadphase.controller.clear(broadphase); // update the grid buckets based on current bodies\n\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n          } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n          } // clear all composite modified flags\n\n\n          if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n          } // narrowphase pass: find actual collisions, then create or update collision pairs\n\n\n          var collisions = broadphase.detector(broadphasePairs, engine); // update collision pairs\n\n          var pairs = engine.pairs,\n              timestamp = timing.timestamp;\n          Pairs.update(pairs, collisions, timestamp);\n          Pairs.removeOld(pairs, timestamp); // wake up bodies involved in collisions\n\n          if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale); // trigger collision events\n\n          if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart\n          }); // iteratively resolve position between collisions\n\n          Resolver.preSolvePosition(pairs.list);\n\n          for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n          }\n\n          Resolver.postSolvePosition(allBodies); // update all constraints (second pass)\n\n          Constraint.preSolveAll(allBodies);\n\n          for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n          }\n\n          Constraint.postSolveAll(allBodies); // iteratively resolve velocity between collisions\n\n          Resolver.preSolveVelocity(pairs.list);\n\n          for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n          } // trigger collision events\n\n\n          if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive\n          });\n          if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd\n          }); // clear force buffers\n\n          Engine._bodiesClearForces(allBodies);\n\n          Events.trigger(engine, 'afterUpdate', event);\n          return engine;\n        };\n        /**\n         * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n         * @method merge\n         * @param {engine} engineA\n         * @param {engine} engineB\n         */\n\n\n        Engine.merge = function (engineA, engineB) {\n          Common.extend(engineA, engineB);\n\n          if (engineB.world) {\n            engineA.world = engineB.world;\n            Engine.clear(engineA);\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              Sleeping.set(body, false);\n              body.id = Common.nextId();\n            }\n          }\n        };\n        /**\n         * Clears the engine including the world, pairs and broadphase.\n         * @method clear\n         * @param {engine} engine\n         */\n\n\n        Engine.clear = function (engine) {\n          var world = engine.world;\n          Pairs.clear(engine.pairs);\n          var broadphase = engine.broadphase;\n\n          if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n          }\n        };\n        /**\n         * Zeroes the `body.force` and `body.torque` force buffers.\n         * @method _bodiesClearForces\n         * @private\n         * @param {body[]} bodies\n         */\n\n\n        Engine._bodiesClearForces = function (bodies) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i]; // reset force buffers\n\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n          }\n        };\n        /**\n         * Applys a mass dependant force to all given bodies.\n         * @method _bodiesApplyGravity\n         * @private\n         * @param {body[]} bodies\n         * @param {vector} gravity\n         */\n\n\n        Engine._bodiesApplyGravity = function (bodies, gravity) {\n          var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n          if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n            return;\n          }\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue; // apply gravity\n\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n          }\n        };\n        /**\n         * Applys `Body.update` to all given `bodies`.\n         * @method _bodiesUpdate\n         * @private\n         * @param {body[]} bodies\n         * @param {number} deltaTime \n         * The amount of time elapsed between updates\n         * @param {number} timeScale\n         * @param {number} correction \n         * The Verlet correction factor (deltaTime / lastDeltaTime)\n         * @param {bounds} worldBounds\n         */\n\n\n        Engine._bodiesUpdate = function (bodies, deltaTime, timeScale, correction, worldBounds) {\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (body.isStatic || body.isSleeping) continue;\n            Body.update(body, deltaTime, timeScale, correction);\n          }\n        };\n        /**\n         * An alias for `Runner.run`, see `Matter.Runner` for more information.\n         * @method run\n         * @param {engine} engine\n         */\n\n        /**\n        * Fired just before an update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update and all collision events\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n        *\n        * @event collisionStart\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n        *\n        * @event collisionActive\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n        *\n        * @event collisionEnd\n        * @param {} event An event object\n        * @param {} event.pairs List of affected pairs\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * An integer `Number` that specifies the number of position iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property positionIterations\n         * @type number\n         * @default 6\n         */\n\n        /**\n         * An integer `Number` that specifies the number of velocity iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         *\n         * @property velocityIterations\n         * @type number\n         * @default 4\n         */\n\n        /**\n         * An integer `Number` that specifies the number of constraint iterations to perform each update.\n         * The higher the value, the higher quality the simulation will be at the expense of performance.\n         * The default value of `2` is usually very adequate.\n         *\n         * @property constraintIterations\n         * @type number\n         * @default 2\n         */\n\n        /**\n         * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n         * Sleeping can improve stability and performance, but often at the expense of accuracy.\n         *\n         * @property enableSleeping\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * An `Object` containing properties regarding the timing systems of the engine. \n         *\n         * @property timing\n         * @type object\n         */\n\n        /**\n         * A `Number` that specifies the global scaling factor of time for all bodies.\n         * A value of `0` freezes the simulation.\n         * A value of `0.1` gives a slow-motion effect.\n         * A value of `1.2` gives a speed-up effect.\n         *\n         * @property timing.timeScale\n         * @type number\n         * @default 1\n         */\n\n        /**\n         * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n         * It is incremented on every `Engine.update` by the given `delta` argument. \n         *\n         * @property timing.timestamp\n         * @type number\n         * @default 0\n         */\n\n        /**\n         * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n         * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n         *\n         * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n         * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n         *\n         * @property render\n         * @type render\n         * @deprecated see Demo.js for an example of creating a renderer\n         * @default a Matter.Render instance\n         */\n\n        /**\n         * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n         *\n         * @property broadphase\n         * @type grid\n         * @default a Matter.Grid instance\n         */\n\n        /**\n         * A `World` composite object that will contain all simulated bodies and constraints.\n         *\n         * @property world\n         * @type world\n         * @default a Matter.World instance\n         */\n\n        /**\n         * An object reserved for storing plugin-specific properties.\n         *\n         * @property plugin\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Grid\": 6,\n      \"../collision/Pairs\": 8,\n      \"../collision/Resolver\": 10,\n      \"../constraint/Constraint\": 12,\n      \"../render/Render\": 31,\n      \"./Common\": 14,\n      \"./Events\": 16,\n      \"./Metrics\": 18,\n      \"./Sleeping\": 22\n    }],\n    16: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Events\n      */\n      var Events = {};\n      module.exports = Events;\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        /**\n         * Subscribes a callback function to the given object's `eventName`.\n         * @method on\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n        Events.on = function (object, eventNames, callback) {\n          var names = eventNames.split(' '),\n              name;\n\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n          }\n\n          return callback;\n        };\n        /**\n         * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n         * @method off\n         * @param {} object\n         * @param {string} eventNames\n         * @param {function} callback\n         */\n\n\n        Events.off = function (object, eventNames, callback) {\n          if (!eventNames) {\n            object.events = {};\n            return;\n          } // handle Events.off(object, callback)\n\n\n          if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n          }\n\n          var names = eventNames.split(' ');\n\n          for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n              for (var j = 0; j < callbacks.length; j++) {\n                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n              }\n            }\n\n            object.events[names[i]] = newCallbacks;\n          }\n        };\n        /**\n         * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n         * @method trigger\n         * @param {} object\n         * @param {string} eventNames\n         * @param {} event\n         */\n\n\n        Events.trigger = function (object, eventNames, event) {\n          var names, name, callbacks, eventClone;\n\n          if (object.events) {\n            if (!event) event = {};\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n              name = names[i];\n              callbacks = object.events[name];\n\n              if (callbacks) {\n                eventClone = Common.clone(event, false);\n                eventClone.name = name;\n                eventClone.source = object;\n\n                for (var j = 0; j < callbacks.length; j++) {\n                  callbacks[j].apply(object, [eventClone]);\n                }\n              }\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    17: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n      *\n      * @class Matter\n      */\n      var Matter = {};\n      module.exports = Matter;\n\n      var Plugin = _dereq_('./Plugin');\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        /**\n         * The library name.\n         * @property name\n         * @readOnly\n         * @type {String}\n         */\n        Matter.name = 'matter-js';\n        /**\n         * The library version.\n         * @property version\n         * @readOnly\n         * @type {String}\n         */\n\n        Matter.version = '0.14.2';\n        /**\n         * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n         * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n         * @property uses\n         * @type {Array}\n         */\n\n        Matter.uses = [];\n        /**\n         * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n         * @property used\n         * @readOnly\n         * @type {Array}\n         */\n\n        Matter.used = [];\n        /**\n         * Installs the given plugins on the `Matter` namespace.\n         * This is a short-hand for `Plugin.use`, see it for more information.\n         * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n         * Avoid calling this function multiple times unless you intend to manually control installation order.\n         * @method use\n         * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n         */\n\n        Matter.use = function () {\n          Plugin.use(Matter, Array.prototype.slice.call(arguments));\n        };\n        /**\n         * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method before\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain before the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Matter.before = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathBefore(Matter, path, func);\n        };\n        /**\n         * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n         * See also docs for `Common.chain`.\n         * @method after\n         * @param {string} path The path relative to `Matter`\n         * @param {function} func The function to chain after the original\n         * @return {function} The chained function that replaced the original\n         */\n\n\n        Matter.after = function (path, func) {\n          path = path.replace(/^Matter./, '');\n          return Common.chainPathAfter(Matter, path, func);\n        };\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Plugin\": 20\n    }],\n    18: [function (_dereq_, module, exports) {}, {\n      \"../body/Composite\": 2,\n      \"./Common\": 14\n    }],\n    19: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n      *\n      * @class Mouse\n      */\n      var Mouse = {};\n      module.exports = Mouse;\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a mouse input.\n         * @method create\n         * @param {HTMLElement} element\n         * @return {mouse} A new mouse\n         */\n        Mouse.create = function (element) {\n          var mouse = {};\n\n          if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n          }\n\n          mouse.element = element || document.body;\n          mouse.absolute = {\n            x: 0,\n            y: 0\n          };\n          mouse.position = {\n            x: 0,\n            y: 0\n          };\n          mouse.mousedownPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.mouseupPosition = {\n            x: 0,\n            y: 0\n          };\n          mouse.offset = {\n            x: 0,\n            y: 0\n          };\n          mouse.scale = {\n            x: 1,\n            y: 1\n          };\n          mouse.wheelDelta = 0;\n          mouse.button = -1;\n          mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n          mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n          };\n\n          mouse.mousemove = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n          };\n\n          mouse.mousedown = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              mouse.button = 0;\n              event.preventDefault();\n            } else {\n              mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n          };\n\n          mouse.mouseup = function (event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n              event.preventDefault();\n            }\n\n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n          };\n\n          mouse.mousewheel = function (event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n          };\n\n          Mouse.setElement(mouse, mouse.element);\n          return mouse;\n        };\n        /**\n         * Sets the element the mouse is bound to (and relative to).\n         * @method setElement\n         * @param {mouse} mouse\n         * @param {HTMLElement} element\n         */\n\n\n        Mouse.setElement = function (mouse, element) {\n          mouse.element = element;\n          element.addEventListener('mousemove', mouse.mousemove);\n          element.addEventListener('mousedown', mouse.mousedown);\n          element.addEventListener('mouseup', mouse.mouseup);\n          element.addEventListener('mousewheel', mouse.mousewheel);\n          element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n          element.addEventListener('touchmove', mouse.mousemove);\n          element.addEventListener('touchstart', mouse.mousedown);\n          element.addEventListener('touchend', mouse.mouseup);\n        };\n        /**\n         * Clears all captured source events.\n         * @method clearSourceEvents\n         * @param {mouse} mouse\n         */\n\n\n        Mouse.clearSourceEvents = function (mouse) {\n          mouse.sourceEvents.mousemove = null;\n          mouse.sourceEvents.mousedown = null;\n          mouse.sourceEvents.mouseup = null;\n          mouse.sourceEvents.mousewheel = null;\n          mouse.wheelDelta = 0;\n        };\n        /**\n         * Sets the mouse position offset.\n         * @method setOffset\n         * @param {mouse} mouse\n         * @param {vector} offset\n         */\n\n\n        Mouse.setOffset = function (mouse, offset) {\n          mouse.offset.x = offset.x;\n          mouse.offset.y = offset.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Sets the mouse position scale.\n         * @method setScale\n         * @param {mouse} mouse\n         * @param {vector} scale\n         */\n\n\n        Mouse.setScale = function (mouse, scale) {\n          mouse.scale.x = scale.x;\n          mouse.scale.y = scale.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n        };\n        /**\n         * Gets the mouse position relative to an element given a screen pixel ratio.\n         * @method _getRelativeMousePosition\n         * @private\n         * @param {} event\n         * @param {} element\n         * @param {number} pixelRatio\n         * @return {}\n         */\n\n\n        Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n          var elementBounds = element.getBoundingClientRect(),\n              rootNode = document.documentElement || document.body.parentNode || document.body,\n              scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n              scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n              touches = event.changedTouches,\n              x,\n              y;\n\n          if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n          } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n          }\n\n          return {\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n          };\n        };\n      })();\n    }, {\n      \"../core/Common\": 14\n    }],\n    20: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n      *\n      * @class Plugin\n      */\n      var Plugin = {};\n      module.exports = Plugin;\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        Plugin._registry = {};\n        /**\n         * Registers a plugin object so it can be resolved later by name.\n         * @method register\n         * @param plugin {} The plugin to register.\n         * @return {object} The plugin.\n         */\n\n        Plugin.register = function (plugin) {\n          if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n          }\n\n          if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n              Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n              Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n              Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n          } else {\n            Plugin._registry[plugin.name] = plugin;\n          }\n\n          return plugin;\n        };\n        /**\n         * Resolves a dependency to a plugin object from the registry if it exists. \n         * The `dependency` may contain a version, but only the name matters when resolving.\n         * @method resolve\n         * @param dependency {string} The dependency.\n         * @return {object} The plugin if resolved, otherwise `undefined`.\n         */\n\n\n        Plugin.resolve = function (dependency) {\n          return Plugin._registry[Plugin.dependencyParse(dependency).name];\n        };\n        /**\n         * Returns a pretty printed plugin name and version.\n         * @method toString\n         * @param plugin {} The plugin.\n         * @return {string} Pretty printed plugin name and version.\n         */\n\n\n        Plugin.toString = function (plugin) {\n          return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n        };\n        /**\n         * Returns `true` if the object meets the minimum standard to be considered a plugin.\n         * This means it must define the following properties:\n         * - `name`\n         * - `version`\n         * - `install`\n         * @method isPlugin\n         * @param obj {} The obj to test.\n         * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n         */\n\n\n        Plugin.isPlugin = function (obj) {\n          return obj && obj.name && obj.version && obj.install;\n        };\n        /**\n         * Returns `true` if a plugin with the given `name` been installed on `module`.\n         * @method isUsed\n         * @param module {} The module.\n         * @param name {string} The plugin name.\n         * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n         */\n\n\n        Plugin.isUsed = function (module, name) {\n          return module.used.indexOf(name) > -1;\n        };\n        /**\n         * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n         * If `plugin.for` is not specified then it is assumed to be applicable.\n         * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n         * @method isFor\n         * @param plugin {} The plugin.\n         * @param module {} The module.\n         * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n         */\n\n\n        Plugin.isFor = function (plugin, module) {\n          var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n          return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n        };\n        /**\n         * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n         * For installing plugins on `Matter` see the convenience function `Matter.use`.\n         * Plugins may be specified either by their name or a reference to the plugin object.\n         * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n         * Order is important, a topological sort is performed to find the best resulting order of installation.\n         * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n         * This function logs the resulting status of each dependency in the console, along with any warnings.\n         * - A green tick ✅ indicates a dependency was resolved and installed.\n         * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n         * - A red cross ❌ indicates a dependency could not be resolved.\n         * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n         * @method use\n         * @param module {} The module install plugins on.\n         * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n         */\n\n\n        Plugin.use = function (module, plugins) {\n          module.uses = (module.uses || []).concat(plugins || []);\n\n          if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n          }\n\n          var dependencies = Plugin.dependencies(module),\n              sortedDependencies = Common.topologicalSort(dependencies),\n              status = [];\n\n          for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n              continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n              status.push('❌ ' + sortedDependencies[i]);\n              continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n              continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n              plugin._warned = true;\n            }\n\n            if (plugin.install) {\n              plugin.install(module);\n            } else {\n              Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n              plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n              status.push('🔶 ' + Plugin.toString(plugin));\n              delete plugin._warned;\n            } else {\n              status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n          }\n\n          if (status.length > 0) {\n            Common.info(status.join('  '));\n          }\n        };\n        /**\n         * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n         * @method dependencies\n         * @param module {} The module.\n         * @return {object} A dependency graph.\n         */\n\n\n        Plugin.dependencies = function (module, tracked) {\n          var parsedBase = Plugin.dependencyParse(module),\n              name = parsedBase.name;\n          tracked = tracked || {};\n\n          if (name in tracked) {\n            return;\n          }\n\n          module = Plugin.resolve(module) || module;\n          tracked[name] = Common.map(module.uses || [], function (dependency) {\n            if (Plugin.isPlugin(dependency)) {\n              Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n              resolved._warned = true;\n              module._warned = true;\n            } else if (!resolved) {\n              Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n              module._warned = true;\n            }\n\n            return parsed.name;\n          });\n\n          for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n          }\n\n          return tracked;\n        };\n        /**\n         * Parses a dependency string into its components.\n         * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * This function can also handle dependencies that are already resolved (e.g. a module object).\n         * @method dependencyParse\n         * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n         * @return {object} The dependency parsed into its components.\n         */\n\n\n        Plugin.dependencyParse = function (dependency) {\n          if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n              Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n              name: dependency.split('@')[0],\n              range: dependency.split('@')[1] || '*'\n            };\n          }\n\n          return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n          };\n        };\n        /**\n         * Parses a version string into its components.  \n         * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n         * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n         * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n         * Only the following range types are supported:\n         * - Tilde ranges e.g. `~1.2.3`\n         * - Caret ranges e.g. `^1.2.3`\n         * - Exact version e.g. `1.2.3`\n         * - Any version `*`\n         * @method versionParse\n         * @param range {string} The version string.\n         * @return {object} The version range parsed into its components.\n         */\n\n\n        Plugin.versionParse = function (range) {\n          var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n          if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n          }\n\n          var identifiers = range.split('-');\n          range = identifiers[0];\n          var isRange = isNaN(Number(range[0])),\n              version = isRange ? range.substr(1) : range,\n              parts = Common.map(version.split('.'), function (part) {\n            return Number(part);\n          });\n          return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n          };\n        };\n        /**\n         * Returns `true` if `version` satisfies the given `range`.\n         * See documentation for `Plugin.versionParse` for a description of the format.\n         * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n         * @method versionSatisfies\n         * @param version {string} The version string.\n         * @param range {string} The range string.\n         * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n         */\n\n\n        Plugin.versionSatisfies = function (version, range) {\n          range = range || '*';\n          var rangeParsed = Plugin.versionParse(range),\n              rangeParts = rangeParsed.parts,\n              versionParsed = Plugin.versionParse(version),\n              versionParts = versionParsed.parts;\n\n          if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n              return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n              return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n              if (rangeParts[0] > 0) {\n                return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n              }\n\n              if (rangeParts[1] > 0) {\n                return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n              }\n\n              return versionParts[2] === rangeParts[2];\n            }\n          }\n\n          return version === range || version === '*';\n        };\n      })();\n    }, {\n      \"./Common\": 14\n    }],\n    21: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Runner` module is an optional utility which provides a game loop, \n      * that handles continuously updating a `Matter.Engine` for you within a browser.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n      * Instead just call `Engine.update(engine, delta)` in your own loop.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Runner\n      */\n      var Runner = {};\n      module.exports = Runner;\n\n      var Events = _dereq_('./Events');\n\n      var Engine = _dereq_('./Engine');\n\n      var Common = _dereq_('./Common');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n\n        if (!_requestAnimationFrame) {\n          var _frameTimeout;\n\n          _requestAnimationFrame = function (callback) {\n            _frameTimeout = setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = function () {\n            clearTimeout(_frameTimeout);\n          };\n        }\n        /**\n         * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * @method create\n         * @param {} options\n         */\n\n\n        Runner.create = function (options) {\n          var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n          };\n          var runner = Common.extend(defaults, options);\n          runner.delta = runner.delta || 1000 / runner.fps;\n          runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n          runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n          runner.fps = 1000 / runner.delta;\n          return runner;\n        };\n        /**\n         * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n         * @method run\n         * @param {engine} engine\n         */\n\n\n        Runner.run = function (runner, engine) {\n          // create runner if engine is first argument\n          if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n          }\n\n          (function render(time) {\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n              Runner.tick(runner, engine, time);\n            }\n          })();\n\n          return runner;\n        };\n        /**\n         * A game loop utility that updates the engine and renderer by one step (a 'tick').\n         * Features delta smoothing, time correction and fixed or dynamic timing.\n         * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n         * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n         * @method tick\n         * @param {runner} runner\n         * @param {engine} engine\n         * @param {number} time\n         */\n\n\n        Runner.tick = function (runner, engine, time) {\n          var timing = engine.timing,\n              correction = 1,\n              delta; // create an event object\n\n          var event = {\n            timestamp: timing.timestamp\n          };\n          Events.trigger(runner, 'beforeTick', event);\n          Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n          if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n          } else {\n            // dynamic timestep based on wall clock between calls\n            delta = time - runner.timePrev || runner.delta;\n            runner.timePrev = time; // optimistically filter delta over a few frames, to improve stability\n\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory); // limit delta\n\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta; // correction for delta\n\n            correction = delta / runner.delta; // update engine timing object\n\n            runner.delta = delta;\n          } // time correction for time scaling\n\n\n          if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n          if (timing.timeScale === 0) correction = 0;\n          runner.timeScalePrev = timing.timeScale;\n          runner.correction = correction; // fps counter\n\n          runner.frameCounter += 1;\n\n          if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n          }\n\n          Events.trigger(runner, 'tick', event);\n          Events.trigger(engine, 'tick', event); // @deprecated\n          // if world has been modified, clear the render scene graph\n\n          if (engine.world.isModified && engine.render && engine.render.controller && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n          } // update\n\n\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, delta, correction);\n          Events.trigger(runner, 'afterUpdate', event); // render\n          // @deprecated\n\n          if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n          }\n\n          Events.trigger(runner, 'afterTick', event);\n          Events.trigger(engine, 'afterTick', event); // @deprecated\n        };\n        /**\n         * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n         * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n         * @method stop\n         * @param {runner} runner\n         */\n\n\n        Runner.stop = function (runner) {\n          _cancelAnimationFrame(runner.frameRequestId);\n        };\n        /**\n         * Alias for `Runner.run`.\n         * @method start\n         * @param {runner} runner\n         * @param {engine} engine\n         */\n\n\n        Runner.start = function (runner, engine) {\n          Runner.run(runner, engine);\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired at the start of a tick, before any updates to the engine or timing\n        *\n        * @event beforeTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after engine timing updated, but just before update\n        *\n        * @event tick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired at the end of a tick, after engine update and after rendering\n        *\n        * @event afterTick\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before update\n        *\n        * @event beforeUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after update\n        *\n        * @event afterUpdate\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        * @deprecated\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A flag that specifies whether the runner is running or not.\n         *\n         * @property enabled\n         * @type boolean\n         * @default true\n         */\n\n        /**\n         * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n         * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n         * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n         *\n         * @property isFixed\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Number` that specifies the time step between updates in milliseconds.\n         * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n         * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n         *\n         * @property delta\n         * @type number\n         * @default 1000 / 60\n         */\n\n      })();\n    }, {\n      \"./Common\": 14,\n      \"./Engine\": 15,\n      \"./Events\": 16\n    }],\n    22: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n      *\n      * @class Sleeping\n      */\n      var Sleeping = {};\n      module.exports = Sleeping;\n\n      var Events = _dereq_('./Events');\n\n      (function () {\n        Sleeping._motionWakeThreshold = 0.18;\n        Sleeping._motionSleepThreshold = 0.08;\n        Sleeping._minBias = 0.9;\n        /**\n         * Puts bodies to sleep or wakes them up depending on their motion.\n         * @method update\n         * @param {body[]} bodies\n         * @param {number} timeScale\n         */\n\n        Sleeping.update = function (bodies, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // update bodies sleeping status\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed; // wake up bodies if they have a force applied\n\n            if (body.force.x !== 0 || body.force.y !== 0) {\n              Sleeping.set(body, false);\n              continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion); // biased average motion estimation between frames\n\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n              body.sleepCounter += 1;\n              if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n              body.sleepCounter -= 1;\n            }\n          }\n        };\n        /**\n         * Given a set of colliding pairs, wakes the sleeping bodies involved.\n         * @method afterCollisions\n         * @param {pair[]} pairs\n         * @param {number} timeScale\n         */\n\n\n        Sleeping.afterCollisions = function (pairs, timeScale) {\n          var timeFactor = timeScale * timeScale * timeScale; // wake up bodies involved in collisions\n\n          for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i]; // don't wake inactive pairs\n\n            if (!pair.isActive) continue;\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent,\n                bodyB = collision.bodyB.parent; // don't wake if at least one body is static\n\n            if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n\n            if (bodyA.isSleeping || bodyB.isSleeping) {\n              var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n                  movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n              if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                Sleeping.set(sleepingBody, false);\n              }\n            }\n          }\n        };\n        /**\n         * Set a body as sleeping or awake.\n         * @method set\n         * @param {body} body\n         * @param {boolean} isSleeping\n         */\n\n\n        Sleeping.set = function (body, isSleeping) {\n          var wasSleeping = body.isSleeping;\n\n          if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n              Events.trigger(body, 'sleepStart');\n            }\n          } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n              Events.trigger(body, 'sleepEnd');\n            }\n          }\n        };\n      })();\n    }, {\n      \"./Events\": 16\n    }],\n    23: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bodies` module contains factory methods for creating rigid body models \n      * with commonly used body configurations (such as rectangles, circles and other polygons).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Bodies\n      */\n      // TODO: true circle bodies\n      var Bodies = {};\n      module.exports = Bodies;\n\n      var Vertices = _dereq_('../geometry/Vertices');\n\n      var Common = _dereq_('../core/Common');\n\n      var Body = _dereq_('../body/Body');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var decomp;\n\n      (function () {\n        /**\n         * Creates a new rigid body model with a rectangle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method rectangle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {object} [options]\n         * @return {body} A new rectangle body\n         */\n        Bodies.rectangle = function (x, y, width, height, options) {\n          options = options || {};\n          var rectangle = {\n            label: 'Rectangle Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, rectangle, options));\n        };\n        /**\n         * Creates a new rigid body model with a trapezoid hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method trapezoid\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         * @param {number} slope\n         * @param {object} [options]\n         * @return {body} A new trapezoid body\n         */\n\n\n        Bodies.trapezoid = function (x, y, width, height, slope, options) {\n          options = options || {};\n          slope *= 0.5;\n          var roof = (1 - slope * 2) * width;\n          var x1 = width * slope,\n              x2 = x1 + roof,\n              x3 = x2 + x1,\n              verticesPath;\n\n          if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n          }\n\n          var trapezoid = {\n            label: 'Trapezoid Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(verticesPath)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, trapezoid, options));\n        };\n        /**\n         * Creates a new rigid body model with a circle hull. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method circle\n         * @param {number} x\n         * @param {number} y\n         * @param {number} radius\n         * @param {object} [options]\n         * @param {number} [maxSides]\n         * @return {body} A new circle body\n         */\n\n\n        Bodies.circle = function (x, y, radius, options, maxSides) {\n          options = options || {};\n          var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n          }; // approximate circles with polygons until true circles implemented in SAT\n\n          maxSides = maxSides || 25;\n          var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius))); // optimisation: always use even number of sides (half the number of unique axes)\n\n          if (sides % 2 === 1) sides += 1;\n          return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n        };\n        /**\n         * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n         * The options parameter is an object that specifies any properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method polygon\n         * @param {number} x\n         * @param {number} y\n         * @param {number} sides\n         * @param {number} radius\n         * @param {object} [options]\n         * @return {body} A new regular polygon body\n         */\n\n\n        Bodies.polygon = function (x, y, sides, radius, options) {\n          options = options || {};\n          if (sides < 3) return Bodies.circle(x, y, radius, options);\n          var theta = 2 * Math.PI / sides,\n              path = '',\n              offset = theta * 0.5;\n\n          for (var i = 0; i < sides; i += 1) {\n            var angle = offset + i * theta,\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n          }\n\n          var polygon = {\n            label: 'Polygon Body',\n            position: {\n              x: x,\n              y: y\n            },\n            vertices: Vertices.fromPath(path)\n          };\n\n          if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n          }\n\n          return Body.create(Common.extend({}, polygon, options));\n        };\n        /**\n         * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n         * If the vertices are convex, they will pass through as supplied.\n         * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n         * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n         * By default the decomposition will discard collinear edges (to improve performance).\n         * It can also optionally discard any parts that have an area less than `minimumArea`.\n         * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n         * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n         * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n         * @method fromVertices\n         * @param {number} x\n         * @param {number} y\n         * @param [[vector]] vertexSets\n         * @param {object} [options]\n         * @param {bool} [flagInternal=false]\n         * @param {number} [removeCollinear=0.01]\n         * @param {number} [minimumArea=10]\n         * @return {body}\n         */\n\n\n        Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n          if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n          }\n\n          var body, parts, isConvex, vertices, i, j, k, v, z;\n          options = options || {};\n          parts = [];\n          flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n          removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n          minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n          if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n          } // ensure vertexSets is an array of arrays\n\n\n          if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n          }\n\n          for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n              if (isConvex) {\n                vertices = Vertices.clockwiseSort(vertices);\n              } else {\n                // fallback to convex hull when decomposition is not possible\n                vertices = Vertices.hull(vertices);\n              }\n\n              parts.push({\n                position: {\n                  x: x,\n                  y: y\n                },\n                vertices: vertices\n              });\n            } else {\n              // initialise a decomposition\n              var concave = vertices.map(function (vertex) {\n                return [vertex.x, vertex.y];\n              }); // vertices are concave and simple, we can decompose into parts\n\n              decomp.makeCCW(concave);\n              if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear); // use the quick decomposition algorithm (Bayazit)\n\n              var decomposed = decomp.quickDecomp(concave); // for each decomposed chunk\n\n              for (i = 0; i < decomposed.length; i++) {\n                var chunk = decomposed[i]; // convert vertices into the correct structure\n\n                var chunkVertices = chunk.map(function (vertices) {\n                  return {\n                    x: vertices[0],\n                    y: vertices[1]\n                  };\n                }); // skip small chunks\n\n                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue; // create a compound part\n\n                parts.push({\n                  position: Vertices.centre(chunkVertices),\n                  vertices: chunkVertices\n                });\n              }\n            }\n          } // create body parts\n\n\n          for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n          } // flag internal edges (coincident part edges)\n\n\n          if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n              var partA = parts[i];\n\n              for (j = i + 1; j < parts.length; j++) {\n                var partB = parts[j];\n\n                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                  var pav = partA.vertices,\n                      pbv = partB.vertices; // iterate vertices of both parts\n\n                  for (k = 0; k < partA.vertices.length; k++) {\n                    for (z = 0; z < partB.vertices.length; z++) {\n                      // find distances between the vertices\n                      var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                          db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length])); // if both vertices are very close, consider the edge concident (internal)\n\n                      if (da < coincident_max_dist && db < coincident_max_dist) {\n                        pav[k].isInternal = true;\n                        pbv[z].isInternal = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({\n              parts: parts.slice(0)\n            }, options));\n            Body.setPosition(body, {\n              x: x,\n              y: y\n            });\n            return body;\n          } else {\n            return parts[0];\n          }\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29\n    }],\n    24: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Composites` module contains factory methods for creating composite bodies\n      * with commonly used configurations (such as stacks and chains).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Composites\n      */\n      var Composites = {};\n      module.exports = Composites;\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Constraint = _dereq_('../constraint/Constraint');\n\n      var Common = _dereq_('../core/Common');\n\n      var Body = _dereq_('../body/Body');\n\n      var Bodies = _dereq_('./Bodies');\n\n      (function () {\n        /**\n         * Create a new composite containing bodies created in the callback in a grid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method stack\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n        Composites.stack = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          var stack = Composite.create({\n            label: 'Stack'\n          }),\n              x = xx,\n              y = yy,\n              lastBody,\n              i = 0;\n\n          for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n\n            for (var column = 0; column < columns; column++) {\n              var body = callback(x, y, column, row, lastBody, i);\n\n              if (body) {\n                var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                    bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                Body.translate(body, {\n                  x: bodyWidth * 0.5,\n                  y: bodyHeight * 0.5\n                });\n                x = body.bounds.max.x + columnGap;\n                Composite.addBody(stack, body);\n                lastBody = body;\n                i += 1;\n              } else {\n                x += columnGap;\n              }\n            }\n\n            y += maxHeight + rowGap;\n            x = xx;\n          }\n\n          return stack;\n        };\n        /**\n         * Chains all bodies in the given composite together using constraints.\n         * @method chain\n         * @param {composite} composite\n         * @param {number} xOffsetA\n         * @param {number} yOffsetA\n         * @param {number} xOffsetB\n         * @param {number} yOffsetB\n         * @param {object} options\n         * @return {composite} A new composite containing objects chained together with constraints\n         */\n\n\n        Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n          var bodies = composite.bodies;\n\n          for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n            var defaults = {\n              bodyA: bodyA,\n              pointA: {\n                x: bodyAWidth * xOffsetA,\n                y: bodyAHeight * yOffsetA\n              },\n              bodyB: bodyB,\n              pointB: {\n                x: bodyBWidth * xOffsetB,\n                y: bodyBHeight * yOffsetB\n              }\n            };\n            var constraint = Common.extend(defaults, options);\n            Composite.addConstraint(composite, Constraint.create(constraint));\n          }\n\n          composite.label += ' Chain';\n          return composite;\n        };\n        /**\n         * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n         * @method mesh\n         * @param {composite} composite\n         * @param {number} columns\n         * @param {number} rows\n         * @param {boolean} crossBrace\n         * @param {object} options\n         * @return {composite} The composite containing objects meshed together with constraints\n         */\n\n\n        Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n          var bodies = composite.bodies,\n              row,\n              col,\n              bodyA,\n              bodyB,\n              bodyC;\n\n          for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n              bodyA = bodies[col - 1 + row * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n            }\n\n            if (row > 0) {\n              for (col = 0; col < columns; col++) {\n                bodyA = bodies[col + (row - 1) * columns];\n                bodyB = bodies[col + row * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyA,\n                  bodyB: bodyB\n                }, options)));\n\n                if (crossBrace && col > 0) {\n                  bodyC = bodies[col - 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n\n                if (crossBrace && col < columns - 1) {\n                  bodyC = bodies[col + 1 + (row - 1) * columns];\n                  Composite.addConstraint(composite, Constraint.create(Common.extend({\n                    bodyA: bodyC,\n                    bodyB: bodyB\n                  }, options)));\n                }\n              }\n            }\n          }\n\n          composite.label += ' Mesh';\n          return composite;\n        };\n        /**\n         * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n         * This function uses the body's bounds to prevent overlaps.\n         * @method pyramid\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {function} callback\n         * @return {composite} A new composite containing objects created in the callback\n         */\n\n\n        Composites.pyramid = function (xx, yy, columns, rows, columnGap, rowGap, callback) {\n          return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            if (row > actualRows) return; // reverse row order\n\n            row = actualRows - row;\n            var start = row,\n                end = columns - 1 - row;\n            if (column < start || column > end) return; // retroactively fix the first body's position, since width was unknown\n\n            if (i === 1) {\n              Body.translate(lastBody, {\n                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                y: 0\n              });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n          });\n        };\n        /**\n         * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n         * @method newtonsCradle\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} number\n         * @param {number} size\n         * @param {number} length\n         * @return {composite} A new composite newtonsCradle body\n         */\n\n\n        Composites.newtonsCradle = function (xx, yy, number, size, length) {\n          var newtonsCradle = Composite.create({\n            label: 'Newtons Cradle'\n          });\n\n          for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n                constraint = Constraint.create({\n              pointA: {\n                x: xx + i * (size * separation),\n                y: yy\n              },\n              bodyB: circle\n            });\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n          }\n\n          return newtonsCradle;\n        };\n        /**\n         * Creates a composite with simple car setup of bodies and constraints.\n         * @method car\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} width\n         * @param {number} height\n         * @param {number} wheelSize\n         * @return {composite} A new composite car body\n         */\n\n\n        Composites.car = function (xx, yy, width, height, wheelSize) {\n          var group = Body.nextGroup(true),\n              wheelBase = 20,\n              wheelAOffset = -width * 0.5 + wheelBase,\n              wheelBOffset = width * 0.5 - wheelBase,\n              wheelYOffset = 0;\n          var car = Composite.create({\n            label: 'Car'\n          }),\n              body = Bodies.rectangle(xx, yy, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n          var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n            collisionFilter: {\n              group: group\n            },\n            friction: 0.8\n          });\n          var axelA = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelAOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n          });\n          var axelB = Constraint.create({\n            bodyB: body,\n            pointB: {\n              x: wheelBOffset,\n              y: wheelYOffset\n            },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n          });\n          Composite.addBody(car, body);\n          Composite.addBody(car, wheelA);\n          Composite.addBody(car, wheelB);\n          Composite.addConstraint(car, axelA);\n          Composite.addConstraint(car, axelB);\n          return car;\n        };\n        /**\n         * Creates a simple soft body like object.\n         * @method softBody\n         * @param {number} xx\n         * @param {number} yy\n         * @param {number} columns\n         * @param {number} rows\n         * @param {number} columnGap\n         * @param {number} rowGap\n         * @param {boolean} crossBrace\n         * @param {number} particleRadius\n         * @param {} particleOptions\n         * @param {} constraintOptions\n         * @return {composite} A new composite softBody\n         */\n\n\n        Composites.softBody = function (xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n          particleOptions = Common.extend({\n            inertia: Infinity\n          }, particleOptions);\n          constraintOptions = Common.extend({\n            stiffness: 0.2,\n            render: {\n              type: 'line',\n              anchors: false\n            }\n          }, constraintOptions);\n          var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function (x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n          });\n          Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n          softBody.label = 'Soft Body';\n          return softBody;\n        };\n      })();\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../constraint/Constraint\": 12,\n      \"../core/Common\": 14,\n      \"./Bodies\": 23\n    }],\n    25: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n      *\n      * @class Axes\n      */\n      var Axes = {};\n      module.exports = Axes;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new set of axes from the given vertices.\n         * @method fromVertices\n         * @param {vertices} vertices\n         * @return {axes} A new axes from the given vertices\n         */\n        Axes.fromVertices = function (vertices) {\n          var axes = {}; // find the unique axes, using edge normal gradients\n\n          for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length,\n                normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n                gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n          }\n\n          return Common.values(axes);\n        };\n        /**\n         * Rotates a set of axes by the given angle.\n         * @method rotate\n         * @param {axes} axes\n         * @param {number} angle\n         */\n\n\n        Axes.rotate = function (axes, angle) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    26: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n      *\n      * @class Bounds\n      */\n      var Bounds = {};\n      module.exports = Bounds;\n\n      (function () {\n        /**\n         * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n         * @method create\n         * @param {vertices} vertices\n         * @return {bounds} A new bounds object\n         */\n        Bounds.create = function (vertices) {\n          var bounds = {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: 0,\n              y: 0\n            }\n          };\n          if (vertices) Bounds.update(bounds, vertices);\n          return bounds;\n        };\n        /**\n         * Updates bounds using the given vertices and extends the bounds given a velocity.\n         * @method update\n         * @param {bounds} bounds\n         * @param {vertices} vertices\n         * @param {vector} velocity\n         */\n\n\n        Bounds.update = function (bounds, vertices, velocity) {\n          bounds.min.x = Infinity;\n          bounds.max.x = -Infinity;\n          bounds.min.y = Infinity;\n          bounds.max.y = -Infinity;\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n          }\n\n          if (velocity) {\n            if (velocity.x > 0) {\n              bounds.max.x += velocity.x;\n            } else {\n              bounds.min.x += velocity.x;\n            }\n\n            if (velocity.y > 0) {\n              bounds.max.y += velocity.y;\n            } else {\n              bounds.min.y += velocity.y;\n            }\n          }\n        };\n        /**\n         * Returns true if the bounds contains the given point.\n         * @method contains\n         * @param {bounds} bounds\n         * @param {vector} point\n         * @return {boolean} True if the bounds contain the point, otherwise false\n         */\n\n\n        Bounds.contains = function (bounds, point) {\n          return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n        };\n        /**\n         * Returns true if the two bounds intersect.\n         * @method overlaps\n         * @param {bounds} boundsA\n         * @param {bounds} boundsB\n         * @return {boolean} True if the bounds overlap, otherwise false\n         */\n\n\n        Bounds.overlaps = function (boundsA, boundsB) {\n          return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n        };\n        /**\n         * Translates the bounds by the given vector.\n         * @method translate\n         * @param {bounds} bounds\n         * @param {vector} vector\n         */\n\n\n        Bounds.translate = function (bounds, vector) {\n          bounds.min.x += vector.x;\n          bounds.max.x += vector.x;\n          bounds.min.y += vector.y;\n          bounds.max.y += vector.y;\n        };\n        /**\n         * Shifts the bounds to the given position.\n         * @method shift\n         * @param {bounds} bounds\n         * @param {vector} position\n         */\n\n\n        Bounds.shift = function (bounds, position) {\n          var deltaX = bounds.max.x - bounds.min.x,\n              deltaY = bounds.max.y - bounds.min.y;\n          bounds.min.x = position.x;\n          bounds.max.x = position.x + deltaX;\n          bounds.min.y = position.y;\n          bounds.max.y = position.y + deltaY;\n        };\n      })();\n    }, {}],\n    27: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n      *\n      * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Svg\n      */\n      var Svg = {};\n      module.exports = Svg;\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Converts an SVG path into an array of vector points.\n         * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n         * See `Bodies.fromVertices` which provides support for this.\n         * Note that this function is not guaranteed to support complex paths (such as those with holes).\n         * You must load the `pathseg.js` polyfill on newer browsers.\n         * @method pathToVertices\n         * @param {SVGPathElement} path\n         * @param {Number} [sampleLength=15]\n         * @return {Vector[]} points\n         */\n        Svg.pathToVertices = function (path, sampleLength) {\n          if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n          } // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\n\n          var i,\n              il,\n              total,\n              point,\n              segment,\n              segments,\n              segmentsQueue,\n              lastSegment,\n              lastPoint,\n              segmentIndex,\n              points = [],\n              lx,\n              ly,\n              length = 0,\n              x = 0,\n              y = 0;\n          sampleLength = sampleLength || 15;\n\n          var addPoint = function (px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1; // when the last point doesn't equal the current point add the current point\n\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n              if (lastPoint && isRelative) {\n                lx = lastPoint.x;\n                ly = lastPoint.y;\n              } else {\n                lx = 0;\n                ly = 0;\n              }\n\n              var point = {\n                x: lx + px,\n                y: ly + py\n              }; // set last point\n\n              if (isRelative || !lastPoint) {\n                lastPoint = point;\n              }\n\n              points.push(point);\n              x = lx + px;\n              y = ly + py;\n            }\n          };\n\n          var addSegmentPoint = function (segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase(); // skip path ends\n\n            if (segType === 'Z') return; // map segment to x and y\n\n            switch (segType) {\n              case 'M':\n              case 'L':\n              case 'T':\n              case 'C':\n              case 'S':\n              case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n\n              case 'H':\n                x = segment.x;\n                break;\n\n              case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n          }; // ensure path is absolute\n\n\n          Svg._svgPathToAbsolute(path); // get total length\n\n\n          total = path.getTotalLength(); // queue segments\n\n          segments = [];\n\n          for (i = 0; i < path.pathSegList.numberOfItems; i += 1) segments.push(path.pathSegList.getItem(i));\n\n          segmentsQueue = segments.concat(); // sample through path\n\n          while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex]; // new segment\n\n            if (segment != lastSegment) {\n              while (segmentsQueue.length && segmentsQueue[0] != segment) addSegmentPoint(segmentsQueue.shift());\n\n              lastSegment = segment;\n            } // add points in between when curving\n            // TODO: adaptive sampling\n\n\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n              case 'C':\n              case 'T':\n              case 'S':\n              case 'Q':\n              case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n            } // increment by sample value\n\n\n            length += sampleLength;\n          } // add remaining segments not passed by sampling\n\n\n          for (i = 0, il = segmentsQueue.length; i < il; ++i) addSegmentPoint(segmentsQueue[i]);\n\n          return points;\n        };\n\n        Svg._svgPathToAbsolute = function (path) {\n          // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n          // Copyright (c) Gavin Kistner\n          // http://phrogz.net/js/_ReuseLicense.txt\n          // Modifications: tidy formatting and naming\n          var x0,\n              y0,\n              x1,\n              y1,\n              x2,\n              y2,\n              segs = path.pathSegList,\n              x = 0,\n              y = 0,\n              len = segs.numberOfItems;\n\n          for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n              if ('x' in seg) x = seg.x;\n              if ('y' in seg) y = seg.y;\n            } else {\n              if ('x1' in seg) x1 = x + seg.x1;\n              if ('x2' in seg) x2 = x + seg.x2;\n              if ('y1' in seg) y1 = y + seg.y1;\n              if ('y2' in seg) y2 = y + seg.y2;\n              if ('x' in seg) x += seg.x;\n              if ('y' in seg) y += seg.y;\n\n              switch (segType) {\n                case 'm':\n                  segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                  break;\n\n                case 'l':\n                  segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                  break;\n\n                case 'h':\n                  segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                  break;\n\n                case 'v':\n                  segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                  break;\n\n                case 'c':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                  break;\n\n                case 's':\n                  segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                  break;\n\n                case 'q':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                  break;\n\n                case 't':\n                  segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                  break;\n\n                case 'a':\n                  segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                  break;\n\n                case 'z':\n                case 'Z':\n                  x = x0;\n                  y = y0;\n                  break;\n              }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n              x0 = x;\n              y0 = y;\n            }\n          }\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Bounds\": 26\n    }],\n    28: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n      * Vectors are the basis of all the geometry related operations in the engine.\n      * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vector\n      */\n      // TODO: consider params for reusing vector objects\n      var Vector = {};\n      module.exports = Vector;\n\n      (function () {\n        /**\n         * Creates a new vector.\n         * @method create\n         * @param {number} x\n         * @param {number} y\n         * @return {vector} A new vector\n         */\n        Vector.create = function (x, y) {\n          return {\n            x: x || 0,\n            y: y || 0\n          };\n        };\n        /**\n         * Returns a new vector with `x` and `y` copied from the given `vector`.\n         * @method clone\n         * @param {vector} vector\n         * @return {vector} A new cloned vector\n         */\n\n\n        Vector.clone = function (vector) {\n          return {\n            x: vector.x,\n            y: vector.y\n          };\n        };\n        /**\n         * Returns the magnitude (length) of a vector.\n         * @method magnitude\n         * @param {vector} vector\n         * @return {number} The magnitude of the vector\n         */\n\n\n        Vector.magnitude = function (vector) {\n          return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        };\n        /**\n         * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n         * @method magnitudeSquared\n         * @param {vector} vector\n         * @return {number} The squared magnitude of the vector\n         */\n\n\n        Vector.magnitudeSquared = function (vector) {\n          return vector.x * vector.x + vector.y * vector.y;\n        };\n        /**\n         * Rotates the vector about (0, 0) by specified angle.\n         * @method rotate\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} [output]\n         * @return {vector} The vector rotated about (0, 0)\n         */\n\n\n        Vector.rotate = function (vector, angle, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = vector.x * cos - vector.y * sin;\n          output.y = vector.x * sin + vector.y * cos;\n          output.x = x;\n          return output;\n        };\n        /**\n         * Rotates the vector about a specified point by specified angle.\n         * @method rotateAbout\n         * @param {vector} vector\n         * @param {number} angle\n         * @param {vector} point\n         * @param {vector} [output]\n         * @return {vector} A new vector rotated about the point\n         */\n\n\n        Vector.rotateAbout = function (vector, angle, point, output) {\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n          if (!output) output = {};\n          var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n          output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n          output.x = x;\n          return output;\n        };\n        /**\n         * Normalises a vector (such that its magnitude is `1`).\n         * @method normalise\n         * @param {vector} vector\n         * @return {vector} A new vector normalised\n         */\n\n\n        Vector.normalise = function (vector) {\n          var magnitude = Vector.magnitude(vector);\n          if (magnitude === 0) return {\n            x: 0,\n            y: 0\n          };\n          return {\n            x: vector.x / magnitude,\n            y: vector.y / magnitude\n          };\n        };\n        /**\n         * Returns the dot-product of two vectors.\n         * @method dot\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The dot product of the two vectors\n         */\n\n\n        Vector.dot = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n        };\n        /**\n         * Returns the cross-product of two vectors.\n         * @method cross\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The cross product of the two vectors\n         */\n\n\n        Vector.cross = function (vectorA, vectorB) {\n          return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n        };\n        /**\n         * Returns the cross-product of three vectors.\n         * @method cross3\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} vectorC\n         * @return {number} The cross product of the three vectors\n         */\n\n\n        Vector.cross3 = function (vectorA, vectorB, vectorC) {\n          return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n        };\n        /**\n         * Adds the two vectors.\n         * @method add\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB added\n         */\n\n\n        Vector.add = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x + vectorB.x;\n          output.y = vectorA.y + vectorB.y;\n          return output;\n        };\n        /**\n         * Subtracts the two vectors.\n         * @method sub\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @param {vector} [output]\n         * @return {vector} A new vector of vectorA and vectorB subtracted\n         */\n\n\n        Vector.sub = function (vectorA, vectorB, output) {\n          if (!output) output = {};\n          output.x = vectorA.x - vectorB.x;\n          output.y = vectorA.y - vectorB.y;\n          return output;\n        };\n        /**\n         * Multiplies a vector and a scalar.\n         * @method mult\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector multiplied by scalar\n         */\n\n\n        Vector.mult = function (vector, scalar) {\n          return {\n            x: vector.x * scalar,\n            y: vector.y * scalar\n          };\n        };\n        /**\n         * Divides a vector and a scalar.\n         * @method div\n         * @param {vector} vector\n         * @param {number} scalar\n         * @return {vector} A new vector divided by scalar\n         */\n\n\n        Vector.div = function (vector, scalar) {\n          return {\n            x: vector.x / scalar,\n            y: vector.y / scalar\n          };\n        };\n        /**\n         * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n         * @method perp\n         * @param {vector} vector\n         * @param {bool} [negate=false]\n         * @return {vector} The perpendicular vector\n         */\n\n\n        Vector.perp = function (vector, negate) {\n          negate = negate === true ? -1 : 1;\n          return {\n            x: negate * -vector.y,\n            y: negate * vector.x\n          };\n        };\n        /**\n         * Negates both components of a vector such that it points in the opposite direction.\n         * @method neg\n         * @param {vector} vector\n         * @return {vector} The negated vector\n         */\n\n\n        Vector.neg = function (vector) {\n          return {\n            x: -vector.x,\n            y: -vector.y\n          };\n        };\n        /**\n         * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n         * @method angle\n         * @param {vector} vectorA\n         * @param {vector} vectorB\n         * @return {number} The angle in radians\n         */\n\n\n        Vector.angle = function (vectorA, vectorB) {\n          return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n        };\n        /**\n         * Temporary vector pool (not thread-safe).\n         * @property _temp\n         * @type {vector[]}\n         * @private\n         */\n\n\n        Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n      })();\n    }, {}],\n    29: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n      * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n      * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n      *\n      * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n      *\n      * @class Vertices\n      */\n      var Vertices = {};\n      module.exports = Vertices;\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Common = _dereq_('../core/Common');\n\n      (function () {\n        /**\n         * Creates a new set of `Matter.Body` compatible vertices.\n         * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n         *\n         *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n         *\n         * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n         * but with some additional references required for efficient collision detection routines.\n         *\n         * Vertices must be specified in clockwise order.\n         *\n         * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n         *\n         * @method create\n         * @param {vector[]} points\n         * @param {body} body\n         */\n        Vertices.create = function (points, body) {\n          var vertices = [];\n\n          for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n            vertices.push(vertex);\n          }\n\n          return vertices;\n        };\n        /**\n         * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n         * into a `Matter.Vertices` object for the given `Matter.Body`.\n         * For parsing SVG paths, see `Svg.pathToVertices`.\n         * @method fromPath\n         * @param {string} path\n         * @param {body} body\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.fromPath = function (path, body) {\n          var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n              points = [];\n          path.replace(pathPattern, function (match, x, y) {\n            points.push({\n              x: parseFloat(x),\n              y: parseFloat(y)\n            });\n          });\n          return Vertices.create(points, body);\n        };\n        /**\n         * Returns the centre (centroid) of the set of vertices.\n         * @method centre\n         * @param {vertices} vertices\n         * @return {vector} The centre point\n         */\n\n\n        Vertices.centre = function (vertices) {\n          var area = Vertices.area(vertices, true),\n              centre = {\n            x: 0,\n            y: 0\n          },\n              cross,\n              temp,\n              j;\n\n          for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n          }\n\n          return Vector.div(centre, 6 * area);\n        };\n        /**\n         * Returns the average (mean) of the set of vertices.\n         * @method mean\n         * @param {vertices} vertices\n         * @return {vector} The average point\n         */\n\n\n        Vertices.mean = function (vertices) {\n          var average = {\n            x: 0,\n            y: 0\n          };\n\n          for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n          }\n\n          return Vector.div(average, vertices.length);\n        };\n        /**\n         * Returns the area of the set of vertices.\n         * @method area\n         * @param {vertices} vertices\n         * @param {bool} signed\n         * @return {number} The area\n         */\n\n\n        Vertices.area = function (vertices, signed) {\n          var area = 0,\n              j = vertices.length - 1;\n\n          for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n          }\n\n          if (signed) return area / 2;\n          return Math.abs(area) / 2;\n        };\n        /**\n         * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n         * @method inertia\n         * @param {vertices} vertices\n         * @param {number} mass\n         * @return {number} The polygon's moment of inertia\n         */\n\n\n        Vertices.inertia = function (vertices, mass) {\n          var numerator = 0,\n              denominator = 0,\n              v = vertices,\n              cross,\n              j; // find the polygon's moment of inertia, using second moment of area\n          // from equations at http://www.physicsforums.com/showthread.php?t=25293\n\n          for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n          }\n\n          return mass / 6 * (numerator / denominator);\n        };\n        /**\n         * Translates the set of vertices in-place.\n         * @method translate\n         * @param {vertices} vertices\n         * @param {vector} vector\n         * @param {number} scalar\n         */\n\n\n        Vertices.translate = function (vertices, vector, scalar) {\n          var i;\n\n          if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x * scalar;\n              vertices[i].y += vector.y * scalar;\n            }\n          } else {\n            for (i = 0; i < vertices.length; i++) {\n              vertices[i].x += vector.x;\n              vertices[i].y += vector.y;\n            }\n          }\n\n          return vertices;\n        };\n        /**\n         * Rotates the set of vertices in-place.\n         * @method rotate\n         * @param {vertices} vertices\n         * @param {number} angle\n         * @param {vector} point\n         */\n\n\n        Vertices.rotate = function (vertices, angle, point) {\n          if (angle === 0) return;\n          var cos = Math.cos(angle),\n              sin = Math.sin(angle);\n\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n          }\n\n          return vertices;\n        };\n        /**\n         * Returns `true` if the `point` is inside the set of `vertices`.\n         * @method contains\n         * @param {vertices} vertices\n         * @param {vector} point\n         * @return {boolean} True if the vertices contains point, otherwise false\n         */\n\n\n        Vertices.contains = function (vertices, point) {\n          for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n        /**\n         * Scales the vertices from a point (default is centre) in-place.\n         * @method scale\n         * @param {vertices} vertices\n         * @param {number} scaleX\n         * @param {number} scaleY\n         * @param {vector} point\n         */\n\n\n        Vertices.scale = function (vertices, scaleX, scaleY, point) {\n          if (scaleX === 1 && scaleY === 1) return vertices;\n          point = point || Vertices.centre(vertices);\n          var vertex, delta;\n\n          for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n          }\n\n          return vertices;\n        };\n        /**\n         * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n         * The radius parameter is a single number or an array to specify the radius for each vertex.\n         * @method chamfer\n         * @param {vertices} vertices\n         * @param {number[]} radius\n         * @param {number} quality\n         * @param {number} qualityMin\n         * @param {number} qualityMax\n         */\n\n\n        Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n          if (typeof radius === 'number') {\n            radius = [radius];\n          } else {\n            radius = radius || [8];\n          } // quality defaults to -1, which is auto\n\n\n          quality = typeof quality !== 'undefined' ? quality : -1;\n          qualityMin = qualityMin || 2;\n          qualityMax = qualityMax || 14;\n          var newVertices = [];\n\n          for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n              newVertices.push(vertex);\n              continue;\n            }\n\n            var prevNormal = Vector.normalise({\n              x: vertex.y - prevVertex.y,\n              y: prevVertex.x - vertex.x\n            });\n            var nextNormal = Vector.normalise({\n              x: nextVertex.y - vertex.y,\n              y: vertex.x - nextVertex.x\n            });\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n            var precision = quality;\n\n            if (quality === -1) {\n              // automatically decide precision\n              precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax); // use an even value for precision, more likely to reduce axes by using symmetry\n\n            if (precision % 2 === 1) precision += 1;\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n              newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n          }\n\n          return newVertices;\n        };\n        /**\n         * Sorts the input vertices into clockwise order in place.\n         * @method clockwiseSort\n         * @param {vertices} vertices\n         * @return {vertices} vertices\n         */\n\n\n        Vertices.clockwiseSort = function (vertices) {\n          var centre = Vertices.mean(vertices);\n          vertices.sort(function (vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n          });\n          return vertices;\n        };\n        /**\n         * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n         * @method isConvex\n         * @param {vertices} vertices\n         * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n         */\n\n\n        Vertices.isConvex = function (vertices) {\n          // http://paulbourke.net/geometry/polygonmesh/\n          // Copyright (c) Paul Bourke (use permitted)\n          var flag = 0,\n              n = vertices.length,\n              i,\n              j,\n              k,\n              z;\n          if (n < 3) return null;\n\n          for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n              flag |= 1;\n            } else if (z > 0) {\n              flag |= 2;\n            }\n\n            if (flag === 3) {\n              return false;\n            }\n          }\n\n          if (flag !== 0) {\n            return true;\n          } else {\n            return null;\n          }\n        };\n        /**\n         * Returns the convex hull of the input vertices as a new array of points.\n         * @method hull\n         * @param {vertices} vertices\n         * @return [vertex] vertices\n         */\n\n\n        Vertices.hull = function (vertices) {\n          // http://geomalgorithms.com/a10-_hull-1.html\n          var upper = [],\n              lower = [],\n              vertex,\n              i; // sort vertices on x-axis (y-axis for ties)\n\n          vertices = vertices.slice(0);\n          vertices.sort(function (vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n          }); // build lower hull\n\n          for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n              lower.pop();\n            }\n\n            lower.push(vertex);\n          } // build upper hull\n\n\n          for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n              upper.pop();\n            }\n\n            upper.push(vertex);\n          } // concatenation of the lower and upper hulls gives the convex hull\n          // omit last points because they are repeated at the beginning of the other list\n\n\n          upper.pop();\n          lower.pop();\n          return upper.concat(lower);\n        };\n      })();\n    }, {\n      \"../core/Common\": 14,\n      \"../geometry/Vector\": 28\n    }],\n    30: [function (_dereq_, module, exports) {\n      var Matter = module.exports = _dereq_('../core/Matter');\n\n      Matter.Body = _dereq_('../body/Body');\n      Matter.Composite = _dereq_('../body/Composite');\n      Matter.World = _dereq_('../body/World');\n      Matter.Contact = _dereq_('../collision/Contact');\n      Matter.Detector = _dereq_('../collision/Detector');\n      Matter.Grid = _dereq_('../collision/Grid');\n      Matter.Pairs = _dereq_('../collision/Pairs');\n      Matter.Pair = _dereq_('../collision/Pair');\n      Matter.Query = _dereq_('../collision/Query');\n      Matter.Resolver = _dereq_('../collision/Resolver');\n      Matter.SAT = _dereq_('../collision/SAT');\n      Matter.Constraint = _dereq_('../constraint/Constraint');\n      Matter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n      Matter.Common = _dereq_('../core/Common');\n      Matter.Engine = _dereq_('../core/Engine');\n      Matter.Events = _dereq_('../core/Events');\n      Matter.Mouse = _dereq_('../core/Mouse');\n      Matter.Runner = _dereq_('../core/Runner');\n      Matter.Sleeping = _dereq_('../core/Sleeping');\n      Matter.Plugin = _dereq_('../core/Plugin');\n      Matter.Bodies = _dereq_('../factory/Bodies');\n      Matter.Composites = _dereq_('../factory/Composites');\n      Matter.Axes = _dereq_('../geometry/Axes');\n      Matter.Bounds = _dereq_('../geometry/Bounds');\n      Matter.Svg = _dereq_('../geometry/Svg');\n      Matter.Vector = _dereq_('../geometry/Vector');\n      Matter.Vertices = _dereq_('../geometry/Vertices');\n      Matter.Render = _dereq_('../render/Render');\n      Matter.RenderPixi = _dereq_('../render/RenderPixi'); // aliases\n\n      Matter.World.add = Matter.Composite.add;\n      Matter.World.remove = Matter.Composite.remove;\n      Matter.World.addComposite = Matter.Composite.addComposite;\n      Matter.World.addBody = Matter.Composite.addBody;\n      Matter.World.addConstraint = Matter.Composite.addConstraint;\n      Matter.World.clear = Matter.Composite.clear;\n      Matter.Engine.run = Matter.Runner.run;\n    }, {\n      \"../body/Body\": 1,\n      \"../body/Composite\": 2,\n      \"../body/World\": 3,\n      \"../collision/Contact\": 4,\n      \"../collision/Detector\": 5,\n      \"../collision/Grid\": 6,\n      \"../collision/Pair\": 7,\n      \"../collision/Pairs\": 8,\n      \"../collision/Query\": 9,\n      \"../collision/Resolver\": 10,\n      \"../collision/SAT\": 11,\n      \"../constraint/Constraint\": 12,\n      \"../constraint/MouseConstraint\": 13,\n      \"../core/Common\": 14,\n      \"../core/Engine\": 15,\n      \"../core/Events\": 16,\n      \"../core/Matter\": 17,\n      \"../core/Metrics\": 18,\n      \"../core/Mouse\": 19,\n      \"../core/Plugin\": 20,\n      \"../core/Runner\": 21,\n      \"../core/Sleeping\": 22,\n      \"../factory/Bodies\": 23,\n      \"../factory/Composites\": 24,\n      \"../geometry/Axes\": 25,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Svg\": 27,\n      \"../geometry/Vector\": 28,\n      \"../geometry/Vertices\": 29,\n      \"../render/Render\": 31,\n      \"../render/RenderPixi\": 32\n    }],\n    31: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n      * It is intended for development and debugging purposes, but may also be suitable for simple games.\n      * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n      *\n      * @class Render\n      */\n      var Render = {};\n      module.exports = Render;\n\n      var Common = _dereq_('../core/Common');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Events = _dereq_('../core/Events');\n\n      var Grid = _dereq_('../collision/Grid');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      var Mouse = _dereq_('../core/Mouse');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n         * All properties have default values, and many are pre-calculated automatically based on other properties.\n         * See the properties section below for detailed information on what you can pass via the `options` object.\n         * @method create\n         * @param {object} [options]\n         * @return {render} A new renderer\n         */\n\n\n        Render.create = function (options) {\n          var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n              width: 800,\n              height: 600,\n              pixelRatio: 1,\n              background: '#18181d',\n              wireframeBackground: '#0f0f13',\n              hasBounds: !!options.bounds,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showSeparations: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false,\n              showVertexNumbers: false,\n              showConvexHulls: false,\n              showInternalEdges: false,\n              showMousePosition: false\n            }\n          };\n          var render = Common.extend(defaults, options);\n\n          if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n          }\n\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n          render.context = render.canvas.getContext('2d');\n          render.textures = {};\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.canvas.width,\n              y: render.canvas.height\n            }\n          };\n\n          if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n          }\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n          }\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         */\n\n\n        Render.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         */\n\n\n        Render.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Sets the pixel ratio of the renderer and updates the canvas.\n         * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n         * @method setPixelRatio\n         * @param {render} render\n         * @param {number} pixelRatio\n         */\n\n\n        Render.setPixelRatio = function (render, pixelRatio) {\n          var options = render.options,\n              canvas = render.canvas;\n\n          if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n          }\n\n          options.pixelRatio = pixelRatio;\n          canvas.setAttribute('data-pixel-ratio', pixelRatio);\n          canvas.width = options.width * pixelRatio;\n          canvas.height = options.height * pixelRatio;\n          canvas.style.width = options.width + 'px';\n          canvas.style.height = options.height + 'px';\n          render.context.scale(pixelRatio, pixelRatio);\n        };\n        /**\n         * Positions and sizes the viewport around the given object bounds.\n         * Objects must have at least one of the following properties:\n         * - `object.bounds`\n         * - `object.position`\n         * - `object.min` and `object.max`\n         * - `object.x` and `object.y`\n         * @method lookAt\n         * @param {render} render\n         * @param {object[]} objects\n         * @param {vector} [padding]\n         * @param {bool} [center=true]\n         */\n\n\n        Render.lookAt = function (render, objects, padding, center) {\n          center = typeof center !== 'undefined' ? center : true;\n          objects = Common.isArray(objects) ? objects : [objects];\n          padding = padding || {\n            x: 0,\n            y: 0\n          }; // find bounds of all objects\n\n          var bounds = {\n            min: {\n              x: Infinity,\n              y: Infinity\n            },\n            max: {\n              x: -Infinity,\n              y: -Infinity\n            }\n          };\n\n          for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : object.min || object.position || object,\n                max = object.bounds ? object.bounds.max : object.max || object.position || object;\n\n            if (min && max) {\n              if (min.x < bounds.min.x) bounds.min.x = min.x;\n              if (max.x > bounds.max.x) bounds.max.x = max.x;\n              if (min.y < bounds.min.y) bounds.min.y = min.y;\n              if (max.y > bounds.max.y) bounds.max.y = max.y;\n            }\n          } // find ratios\n\n\n          var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n              height = bounds.max.y - bounds.min.y + 2 * padding.y,\n              viewHeight = render.canvas.height,\n              viewWidth = render.canvas.width,\n              outerRatio = viewWidth / viewHeight,\n              innerRatio = width / height,\n              scaleX = 1,\n              scaleY = 1; // find scale factor\n\n          if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n          } else {\n            scaleX = outerRatio / innerRatio;\n          } // enable bounds\n\n\n          render.options.hasBounds = true; // position and size\n\n          render.bounds.min.x = bounds.min.x;\n          render.bounds.max.x = bounds.min.x + width * scaleX;\n          render.bounds.min.y = bounds.min.y;\n          render.bounds.max.y = bounds.min.y + height * scaleY; // center\n\n          if (center) {\n            render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n            render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n            render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n          } // padding\n\n\n          render.bounds.min.x -= padding.x;\n          render.bounds.max.x -= padding.x;\n          render.bounds.min.y -= padding.y;\n          render.bounds.max.y -= padding.y; // update mouse\n\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        };\n        /**\n         * Applies viewport transforms based on `render.bounds` to a render context.\n         * @method startViewTransform\n         * @param {render} render\n         */\n\n\n        Render.startViewTransform = function (render) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n          render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n          render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        };\n        /**\n         * Resets all transforms on the render context.\n         * @method endViewTransform\n         * @param {render} render\n         */\n\n\n        Render.endViewTransform = function (render) {\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n        };\n        /**\n         * Renders the given `engine`'s `Matter.World` object.\n         * This is the entry point for all rendering and should be called every time the scene changes.\n         * @method world\n         * @param {render} render\n         */\n\n\n        Render.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              canvas = render.canvas,\n              context = render.context,\n              options = render.options,\n              allBodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              background = options.wireframes ? options.wireframeBackground : options.background,\n              bodies = [],\n              constraints = [],\n              i;\n          var event = {\n            timestamp: engine.timing.timestamp\n          };\n          Events.trigger(render, 'beforeRender', event); // apply background if it has changed\n\n          if (render.currentBackground !== background) _applyBackground(render, background); // clear the canvas with a transparent fill, to allow the canvas background to show\n\n          context.globalCompositeOperation = 'source-in';\n          context.fillStyle = \"transparent\";\n          context.fillRect(0, 0, canvas.width, canvas.height);\n          context.globalCompositeOperation = 'source-over'; // handle bounds\n\n          if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n              var body = allBodies[i];\n              if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            Render.startViewTransform(render); // update mouse\n\n            if (render.mouse) {\n              Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n              });\n              Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n          } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n          }\n\n          if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n          } else {\n            if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context); // optimised method for wireframes only\n\n            Render.bodyWireframes(render, bodies, context);\n          }\n\n          if (options.showBounds) Render.bodyBounds(render, bodies, context);\n          if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n          if (options.showPositions) Render.bodyPositions(render, bodies, context);\n          if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n          if (options.showIds) Render.bodyIds(render, bodies, context);\n          if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n          if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n          if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n          if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n          Render.constraints(constraints, context);\n          if (options.showBroadphase && engine.broadphase.controller === Grid) Render.grid(render, engine.broadphase, context);\n          if (options.showDebug) Render.debug(render, context);\n\n          if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n          }\n\n          Events.trigger(render, 'afterRender', event);\n        };\n        /**\n         * Description\n         * @private\n         * @method debug\n         * @param {render} render\n         * @param {RenderingContext} context\n         */\n\n\n        Render.debug = function (render, context) {\n          var c = context,\n              engine = render.engine,\n              world = engine.world,\n              metrics = engine.metrics,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              space = \"    \";\n\n          if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n              text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n          }\n\n          if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n              c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n              c.fillText(split[i], 50, 50 + i * 18);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method constraints\n         * @param {constraint[]} constraints\n         * @param {RenderingContext} context\n         */\n\n\n        Render.constraints = function (constraints, context) {\n          var c = context;\n\n          for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n              start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n              start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              if (bodyB) {\n                end = Vector.add(bodyB.position, constraint.pointB);\n              } else {\n                end = constraint.pointB;\n              }\n\n              c.beginPath();\n              c.moveTo(start.x, start.y);\n\n              if (constraint.render.type === 'spring') {\n                var delta = Vector.sub(end, start),\n                    normal = Vector.perp(Vector.normalise(delta)),\n                    coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                    offset;\n\n                for (var j = 1; j < coils; j += 1) {\n                  offset = j % 2 === 0 ? 1 : -1;\n                  c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                }\n              }\n\n              c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n              c.lineWidth = constraint.render.lineWidth;\n              c.strokeStyle = constraint.render.strokeStyle;\n              c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n              c.fillStyle = constraint.render.strokeStyle;\n              c.beginPath();\n              c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n              c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n              c.closePath();\n              c.fill();\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodyShadows\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyShadows = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine;\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n\n            if (body.circleRadius) {\n              c.beginPath();\n              c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n              c.closePath();\n            } else {\n              c.beginPath();\n              c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n              for (var j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n              }\n\n              c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n            c.fill();\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method bodies\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodies = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              showInternalEdges = options.showInternalEdges || !options.wireframes,\n              body,\n              part,\n              i,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              if (!part.render.visible) continue;\n\n              if (options.showSleeping && body.isSleeping) {\n                c.globalAlpha = 0.5 * part.render.opacity;\n              } else if (part.render.opacity !== 1) {\n                c.globalAlpha = part.render.opacity;\n              }\n\n              if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                // part sprite\n                var sprite = part.render.sprite,\n                    texture = _getTexture(render, sprite.texture);\n\n                c.translate(part.position.x, part.position.y);\n                c.rotate(part.angle);\n                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale); // revert translation, hopefully faster than save / restore\n\n                c.rotate(-part.angle);\n                c.translate(-part.position.x, -part.position.y);\n              } else {\n                // part polygon\n                if (part.circleRadius) {\n                  c.beginPath();\n                  c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                } else {\n                  c.beginPath();\n                  c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                  for (var j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                      c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                      c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                      c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                  }\n\n                  c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                  c.closePath();\n                }\n\n                if (!options.wireframes) {\n                  c.fillStyle = part.render.fillStyle;\n\n                  if (part.render.lineWidth) {\n                    c.lineWidth = part.render.lineWidth;\n                    c.strokeStyle = part.render.strokeStyle;\n                    c.stroke();\n                  }\n\n                  c.fill();\n                } else {\n                  c.lineWidth = 1;\n                  c.strokeStyle = '#bbb';\n                  c.stroke();\n                }\n              }\n\n              c.globalAlpha = 1;\n            }\n          }\n        };\n        /**\n         * Optimised method for drawing body wireframes in one pass\n         * @private\n         * @method bodyWireframes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyWireframes = function (render, bodies, context) {\n          var c = context,\n              showInternalEdges = render.options.showInternalEdges,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render all bodies\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n              for (j = 1; j < part.vertices.length; j++) {\n                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                  c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                } else {\n                  c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                }\n\n                if (part.vertices[j].isInternal && !showInternalEdges) {\n                  c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                }\n              }\n\n              c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = '#bbb';\n          c.stroke();\n        };\n        /**\n         * Optimised method for drawing body convex hull wireframes in one pass\n         * @private\n         * @method bodyConvexHulls\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyConvexHulls = function (render, bodies, context) {\n          var c = context,\n              body,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath(); // render convex hulls\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible || body.parts.length === 1) continue;\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n              c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n          }\n\n          c.lineWidth = 1;\n          c.strokeStyle = 'rgba(255,255,255,0.2)';\n          c.stroke();\n        };\n        /**\n         * Renders body vertex numbers.\n         * @private\n         * @method vertexNumbers\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.vertexNumbers = function (render, bodies, context) {\n          var c = context,\n              i,\n              j,\n              k;\n\n          for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n              var part = parts[k];\n\n              for (j = 0; j < part.vertices.length; j++) {\n                c.fillStyle = 'rgba(255,255,255,0.2)';\n                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n              }\n            }\n          }\n        };\n        /**\n         * Renders mouse position.\n         * @private\n         * @method mousePosition\n         * @param {render} render\n         * @param {mouse} mouse\n         * @param {RenderingContext} context\n         */\n\n\n        Render.mousePosition = function (render, mouse, context) {\n          var c = context;\n          c.fillStyle = 'rgba(255,255,255,0.8)';\n          c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n        };\n        /**\n         * Draws body bounds\n         * @private\n         * @method bodyBounds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyBounds = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n              var parts = bodies[i].parts;\n\n              for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n          } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Draws body angle indicators and axes\n         * @private\n         * @method bodyAxes\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyAxes = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              part,\n              i,\n              j,\n              k;\n          c.beginPath();\n\n          for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n            if (!body.render.visible) continue;\n\n            if (options.showAxes) {\n              // render all axes\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  var axis = part.axes[k];\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                }\n              }\n            } else {\n              for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                part = parts[j];\n\n                for (k = 0; k < part.axes.length; k++) {\n                  // render a single axis indicator\n                  c.moveTo(part.position.x, part.position.y);\n                  c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                }\n              }\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n          } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n          }\n\n          c.stroke();\n          c.globalCompositeOperation = 'source-over';\n        };\n        /**\n         * Draws body positions\n         * @private\n         * @method bodyPositions\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyPositions = function (render, bodies, context) {\n          var c = context,\n              engine = render.engine,\n              options = render.options,\n              body,\n              part,\n              i,\n              k;\n          c.beginPath(); // render current positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (!body.render.visible) continue; // handle compound parts\n\n            for (k = 0; k < body.parts.length; k++) {\n              part = body.parts[k];\n              c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'indianred';\n          } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n          }\n\n          c.fill();\n          c.beginPath(); // render previous positions\n\n          for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (body.render.visible) {\n              c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n              c.closePath();\n            }\n          }\n\n          c.fillStyle = 'rgba(255,165,0,0.8)';\n          c.fill();\n        };\n        /**\n         * Draws body velocity\n         * @private\n         * @method bodyVelocity\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyVelocity = function (render, bodies, context) {\n          var c = context;\n          c.beginPath();\n\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            if (!body.render.visible) continue;\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n          }\n\n          c.lineWidth = 3;\n          c.strokeStyle = 'cornflowerblue';\n          c.stroke();\n        };\n        /**\n         * Draws body ids\n         * @private\n         * @method bodyIds\n         * @param {render} render\n         * @param {body[]} bodies\n         * @param {RenderingContext} context\n         */\n\n\n        Render.bodyIds = function (render, bodies, context) {\n          var c = context,\n              i,\n              j;\n\n          for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible) continue;\n            var parts = bodies[i].parts;\n\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.font = \"12px Arial\";\n              c.fillStyle = 'rgba(255,255,255,0.5)';\n              c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n          }\n        };\n        /**\n         * Description\n         * @private\n         * @method collisions\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.collisions = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render collision positions\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            for (j = 0; j < pair.activeContacts.length; j++) {\n              var contact = pair.activeContacts[j],\n                  vertex = contact.vertex;\n              c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n          }\n\n          if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n          } else {\n            c.fillStyle = 'orange';\n          }\n\n          c.fill();\n          c.beginPath(); // render collision normals\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n              var normalPosX = pair.activeContacts[0].vertex.x,\n                  normalPosY = pair.activeContacts[0].vertex.y;\n\n              if (pair.activeContacts.length === 2) {\n                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n              }\n\n              if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n              } else {\n                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n              }\n\n              c.lineTo(normalPosX, normalPosY);\n            }\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method separations\n         * @param {render} render\n         * @param {pair[]} pairs\n         * @param {RenderingContext} context\n         */\n\n\n        Render.separations = function (render, pairs, context) {\n          var c = context,\n              options = render.options,\n              pair,\n              collision,\n              corrected,\n              bodyA,\n              bodyB,\n              i,\n              j;\n          c.beginPath(); // render separations\n\n          for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            if (!pair.isActive) continue;\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n            var k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n            k = 1;\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n          }\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n          } else {\n            c.strokeStyle = 'orange';\n          }\n\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method grid\n         * @param {render} render\n         * @param {grid} grid\n         * @param {RenderingContext} context\n         */\n\n\n        Render.grid = function (render, grid, context) {\n          var c = context,\n              options = render.options;\n\n          if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n          } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n          }\n\n          c.beginPath();\n          var bucketKeys = Common.keys(grid.buckets);\n\n          for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n            if (grid.buckets[bucketId].length < 2) continue;\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth, 0.5 + parseInt(region[2], 10) * grid.bucketHeight, grid.bucketWidth, grid.bucketHeight);\n          }\n\n          c.lineWidth = 1;\n          c.stroke();\n        };\n        /**\n         * Description\n         * @private\n         * @method inspector\n         * @param {inspector} inspector\n         * @param {RenderingContext} context\n         */\n\n\n        Render.inspector = function (inspector, context) {\n          var engine = inspector.engine,\n              selected = inspector.selected,\n              render = inspector.render,\n              options = render.options,\n              bounds;\n\n          if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n          }\n\n          for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1, 2]);\n\n            switch (item.type) {\n              case 'body':\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n                break;\n\n              case 'constraint':\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA) point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n                break;\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n          } // render selection region\n\n\n          if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n          }\n\n          if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n        };\n        /**\n         * Description\n         * @method _createCanvas\n         * @private\n         * @param {} width\n         * @param {} height\n         * @return canvas\n         */\n\n\n        var _createCanvas = function (width, height) {\n          var canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          canvas.onselectstart = function () {\n            return false;\n          };\n\n          return canvas;\n        };\n        /**\n         * Gets the pixel ratio of the canvas.\n         * @method _getPixelRatio\n         * @private\n         * @param {HTMLElement} canvas\n         * @return {Number} pixel ratio\n         */\n\n\n        var _getPixelRatio = function (canvas) {\n          var context = canvas.getContext('2d'),\n              devicePixelRatio = window.devicePixelRatio || 1,\n              backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n          return devicePixelRatio / backingStorePixelRatio;\n        };\n        /**\n         * Gets the requested texture (an Image) via its path\n         * @method _getTexture\n         * @private\n         * @param {render} render\n         * @param {string} imagePath\n         * @return {Image} texture\n         */\n\n\n        var _getTexture = function (render, imagePath) {\n          var image = render.textures[imagePath];\n          if (image) return image;\n          image = render.textures[imagePath] = new Image();\n          image.src = imagePath;\n          return image;\n        };\n        /**\n         * Applies the background to the canvas using CSS.\n         * @method applyBackground\n         * @private\n         * @param {render} render\n         * @param {string} background\n         */\n\n\n        var _applyBackground = function (render, background) {\n          var cssBackground = background;\n          if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n          render.canvas.style.background = cssBackground;\n          render.canvas.style.backgroundSize = \"contain\";\n          render.currentBackground = background;\n        };\n        /*\n        *\n        *  Events Documentation\n        *\n        */\n\n        /**\n        * Fired before rendering\n        *\n        * @event beforeRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /**\n        * Fired after rendering\n        *\n        * @event afterRender\n        * @param {} event An event object\n        * @param {number} event.timestamp The engine.timing.timestamp of the event\n        * @param {} event.source The source object of the event\n        * @param {} event.name The name of the event\n        */\n\n        /*\n        *\n        *  Properties Documentation\n        *\n        */\n\n        /**\n         * A back-reference to the `Matter.Render` module.\n         *\n         * @property controller\n         * @type render\n         */\n\n        /**\n         * A reference to the `Matter.Engine` instance to be used.\n         *\n         * @property engine\n         * @type engine\n         */\n\n        /**\n         * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n         *\n         * @property element\n         * @type HTMLElement\n         * @default null\n         */\n\n        /**\n         * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n         *\n         * @property canvas\n         * @type HTMLCanvasElement\n         * @default null\n         */\n\n        /**\n         * The configuration options of the renderer.\n         *\n         * @property options\n         * @type {}\n         */\n\n        /**\n         * The target width in pixels of the `render.canvas` to be created.\n         *\n         * @property options.width\n         * @type number\n         * @default 800\n         */\n\n        /**\n         * The target height in pixels of the `render.canvas` to be created.\n         *\n         * @property options.height\n         * @type number\n         * @default 600\n         */\n\n        /**\n         * A flag that specifies if `render.bounds` should be used when rendering.\n         *\n         * @property options.hasBounds\n         * @type boolean\n         * @default false\n         */\n\n        /**\n         * A `Bounds` object that specifies the drawing view region.\n         * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n         * This allows for creating views that can pan or zoom around the scene.\n         * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n         *\n         * @property bounds\n         * @type bounds\n         */\n\n        /**\n         * The 2d rendering context from the `render.canvas` element.\n         *\n         * @property context\n         * @type CanvasRenderingContext2D\n         */\n\n        /**\n         * The sprite texture cache.\n         *\n         * @property textures\n         * @type {}\n         */\n\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../collision/Grid\": 6,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../core/Mouse\": 19,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }],\n    32: [function (_dereq_, module, exports) {\n      /**\n      * The `Matter.RenderPixi` module is an example renderer using pixi.js.\n      * See also `Matter.Render` for a canvas based renderer.\n      *\n      * @class RenderPixi\n      * @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n      * It will likely be moved to its own repository (but maintenance will be limited).\n      */\n      var RenderPixi = {};\n      module.exports = RenderPixi;\n\n      var Bounds = _dereq_('../geometry/Bounds');\n\n      var Composite = _dereq_('../body/Composite');\n\n      var Common = _dereq_('../core/Common');\n\n      var Events = _dereq_('../core/Events');\n\n      var Vector = _dereq_('../geometry/Vector');\n\n      (function () {\n        var _requestAnimationFrame, _cancelAnimationFrame;\n\n        if (typeof window !== 'undefined') {\n          _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            window.setTimeout(function () {\n              callback(Common.now());\n            }, 1000 / 60);\n          };\n\n          _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n        }\n        /**\n         * Creates a new Pixi.js WebGL renderer\n         * @method create\n         * @param {object} options\n         * @return {RenderPixi} A new renderer\n         * @deprecated\n         */\n\n\n        RenderPixi.create = function (options) {\n          Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n          var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n              width: 800,\n              height: 600,\n              background: '#fafafa',\n              wireframeBackground: '#222',\n              hasBounds: false,\n              enabled: true,\n              wireframes: true,\n              showSleeping: true,\n              showDebug: false,\n              showBroadphase: false,\n              showBounds: false,\n              showVelocity: false,\n              showCollisions: false,\n              showAxes: false,\n              showPositions: false,\n              showAngleIndicator: false,\n              showIds: false,\n              showShadows: false\n            }\n          };\n          var render = Common.extend(defaults, options),\n              transparent = !render.options.wireframes && render.options.background === 'transparent'; // init pixi\n\n          render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n          };\n          render.mouse = options.mouse;\n          render.engine = options.engine;\n          render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n          render.container = render.container || new PIXI.Container();\n          render.spriteContainer = render.spriteContainer || new PIXI.Container();\n          render.canvas = render.canvas || render.renderer.view;\n          render.bounds = render.bounds || {\n            min: {\n              x: 0,\n              y: 0\n            },\n            max: {\n              x: render.options.width,\n              y: render.options.height\n            }\n          }; // event listeners\n\n          Events.on(render.engine, 'beforeUpdate', function () {\n            RenderPixi.clear(render);\n          }); // caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // use a sprite batch for performance\n\n          render.container.addChild(render.spriteContainer); // insert canvas\n\n          if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n          } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n          } // prevent menus on canvas\n\n\n          render.canvas.oncontextmenu = function () {\n            return false;\n          };\n\n          render.canvas.onselectstart = function () {\n            return false;\n          };\n\n          return render;\n        };\n        /**\n         * Continuously updates the render canvas on the `requestAnimationFrame` event.\n         * @method run\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.run = function (render) {\n          (function loop(time) {\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n          })();\n        };\n        /**\n         * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n         * @method stop\n         * @param {render} render\n         * @deprecated\n         */\n\n\n        RenderPixi.stop = function (render) {\n          _cancelAnimationFrame(render.frameRequestId);\n        };\n        /**\n         * Clears the scene graph\n         * @method clear\n         * @param {RenderPixi} render\n         * @deprecated\n         */\n\n\n        RenderPixi.clear = function (render) {\n          var container = render.container,\n              spriteContainer = render.spriteContainer; // clear stage container\n\n          while (container.children[0]) {\n            container.removeChild(container.children[0]);\n          } // clear sprite batch\n\n\n          while (spriteContainer.children[0]) {\n            spriteContainer.removeChild(spriteContainer.children[0]);\n          }\n\n          var bgSprite = render.sprites['bg-0']; // clear caches\n\n          render.textures = {};\n          render.sprites = {};\n          render.primitives = {}; // set background sprite\n\n          render.sprites['bg-0'] = bgSprite;\n          if (bgSprite) container.addChildAt(bgSprite, 0); // add sprite batch back into container\n\n          render.container.addChild(render.spriteContainer); // reset background state\n\n          render.currentBackground = null; // reset bounds transforms\n\n          container.scale.set(1, 1);\n          container.position.set(0, 0);\n        };\n        /**\n         * Sets the background of the canvas \n         * @method setBackground\n         * @param {RenderPixi} render\n         * @param {string} background\n         * @deprecated\n         */\n\n\n        RenderPixi.setBackground = function (render, background) {\n          if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n              // if solid background color\n              var color = Common.colorToNumber(background);\n              render.renderer.backgroundColor = color; // remove background sprite if existing\n\n              if (bgSprite) render.container.removeChild(bgSprite);\n            } else {\n              // initialise background sprite if needed\n              if (!bgSprite) {\n                var texture = _getTexture(render, background);\n\n                bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                bgSprite.position.x = 0;\n                bgSprite.position.y = 0;\n                render.container.addChildAt(bgSprite, 0);\n              }\n            }\n\n            render.currentBackground = background;\n          }\n        };\n        /**\n         * Description\n         * @method world\n         * @param {engine} engine\n         * @deprecated\n         */\n\n\n        RenderPixi.world = function (render) {\n          var engine = render.engine,\n              world = engine.world,\n              renderer = render.renderer,\n              container = render.container,\n              options = render.options,\n              bodies = Composite.allBodies(world),\n              allConstraints = Composite.allConstraints(world),\n              constraints = [],\n              i;\n\n          if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n          } else {\n            RenderPixi.setBackground(render, options.background);\n          } // handle bounds\n\n\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n              boundsHeight = render.bounds.max.y - render.bounds.min.y,\n              boundsScaleX = boundsWidth / render.options.width,\n              boundsScaleY = boundsHeight / render.options.height;\n\n          if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n              var body = bodies[i];\n              body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            } // filter out constraints that are not in view\n\n\n            for (i = 0; i < allConstraints.length; i++) {\n              var constraint = allConstraints[i],\n                  bodyA = constraint.bodyA,\n                  bodyB = constraint.bodyB,\n                  pointAWorld = constraint.pointA,\n                  pointBWorld = constraint.pointB;\n              if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n              if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n              if (!pointAWorld || !pointBWorld) continue;\n              if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n            } // transform the view\n\n\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n          } else {\n            constraints = allConstraints;\n          }\n\n          for (i = 0; i < bodies.length; i++) RenderPixi.body(render, bodies[i]);\n\n          for (i = 0; i < constraints.length; i++) RenderPixi.constraint(render, constraints[i]);\n\n          renderer.render(container);\n        };\n        /**\n         * Description\n         * @method constraint\n         * @param {engine} engine\n         * @param {constraint} constraint\n         * @deprecated\n         */\n\n\n        RenderPixi.constraint = function (render, constraint) {\n          var engine = render.engine,\n              bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointA = constraint.pointA,\n              pointB = constraint.pointB,\n              container = render.container,\n              constraintRender = constraint.render,\n              primitiveId = 'c-' + constraint.id,\n              primitive = render.primitives[primitiveId]; // initialise constraint primitive if not existing\n\n          if (!primitive) primitive = render.primitives[primitiveId] = new PIXI.Graphics(); // don't render if constraint does not have two end points\n\n          if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n          } // add to scene graph if not already there\n\n\n          if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // render the constraint on every update, since they can change dynamically\n\n          primitive.clear();\n          primitive.beginFill(0, 0);\n          primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\n          if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n          } else {\n            primitive.moveTo(pointA.x, pointA.y);\n          }\n\n          if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n          } else {\n            primitive.lineTo(pointB.x, pointB.y);\n          }\n\n          primitive.endFill();\n        };\n        /**\n         * Description\n         * @method body\n         * @param {engine} engine\n         * @param {body} body\n         * @deprecated\n         */\n\n\n        RenderPixi.body = function (render, body) {\n          var engine = render.engine,\n              bodyRender = body.render;\n          if (!bodyRender.visible) return;\n\n          if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer; // initialise body sprite if not existing\n\n            if (!sprite) sprite = render.sprites[spriteId] = _createBodySprite(render, body); // add to scene graph if not already there\n\n            if (Common.indexOf(spriteContainer.children, sprite) === -1) spriteContainer.addChild(sprite); // update body sprite\n\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n          } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container; // initialise body primitive if not existing\n\n            if (!primitive) {\n              primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n              primitive.initialAngle = body.angle;\n            } // add to scene graph if not already there\n\n\n            if (Common.indexOf(container.children, primitive) === -1) container.addChild(primitive); // update body primitive\n\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n          }\n        };\n        /**\n         * Creates a body sprite\n         * @method _createBodySprite\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Sprite} sprite\n         * @deprecated\n         */\n\n\n        var _createBodySprite = function (render, body) {\n          var bodyRender = body.render,\n              texturePath = bodyRender.sprite.texture,\n              texture = _getTexture(render, texturePath),\n              sprite = new PIXI.Sprite(texture);\n\n          sprite.anchor.x = body.render.sprite.xOffset;\n          sprite.anchor.y = body.render.sprite.yOffset;\n          return sprite;\n        };\n        /**\n         * Creates a body primitive\n         * @method _createBodyPrimitive\n         * @private\n         * @param {RenderPixi} render\n         * @param {body} body\n         * @return {PIXI.Graphics} graphics\n         * @deprecated\n         */\n\n\n        var _createBodyPrimitive = function (render, body) {\n          var bodyRender = body.render,\n              options = render.options,\n              primitive = new PIXI.Graphics(),\n              fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n              strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n              strokeStyleWireframe = Common.colorToNumber('#bbb'),\n              strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n              part;\n          primitive.clear(); // handle compound parts\n\n          for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n              primitive.beginFill(fillStyle, 1);\n              primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n              primitive.beginFill(0, 0);\n              primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n              primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n            primitive.endFill(); // angle indicator\n\n            if (options.showAngleIndicator || options.showAxes) {\n              primitive.beginFill(0, 0);\n\n              if (options.wireframes) {\n                primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n              } else {\n                primitive.lineStyle(1, strokeStyleIndicator);\n              }\n\n              primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n              primitive.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2 - body.position.x, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2 - body.position.y);\n              primitive.endFill();\n            }\n          }\n\n          return primitive;\n        };\n        /**\n         * Gets the requested texture (a PIXI.Texture) via its path\n         * @method _getTexture\n         * @private\n         * @param {RenderPixi} render\n         * @param {string} imagePath\n         * @return {PIXI.Texture} texture\n         * @deprecated\n         */\n\n\n        var _getTexture = function (render, imagePath) {\n          var texture = render.textures[imagePath];\n          if (!texture) texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n          return texture;\n        };\n      })();\n    }, {\n      \"../body/Composite\": 2,\n      \"../core/Common\": 14,\n      \"../core/Events\": 16,\n      \"../geometry/Bounds\": 26,\n      \"../geometry/Vector\": 28\n    }]\n  }, {}, [30])(30);\n});","map":{"version":3,"sources":["C:/Users/nilss/Desktop/Projects/galerie-sens/node_modules/matter-js/build/matter.js"],"names":["f","exports","module","define","amd","g","window","global","self","Matter","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","_dereq_","Body","Vertices","Vector","Sleeping","Render","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","defaultStrokeStyle","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","World","Constraint","gravity","Contact","vertex","normalImpulse","tangentImpulse","index","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","pairId","pair","previousCollision","isActive","collision","collides","collided","filterA","filterB","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","world","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","indexesToRemove","pairIndex","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","contactCount","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","nearestDistance","vertexToBody","bodyAPosition","distance","vertexA","vertexB","prevIndex","nextIndex","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","_nextId","_seed","_nowStartTime","Date","argsStart","args","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","Engine","Metrics","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","eventNames","callback","names","name","off","join","callbacks","newCallbacks","eventClone","Plugin","version","uses","used","use","before","after","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","undefined","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","width","clientHeight","height","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","Runner","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_frameTimeout","setTimeout","clearTimeout","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","runner","deltaMin","deltaMax","run","time","tick","stop","start","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","roof","x1","x2","x3","verticesPath","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","coincident_max_dist","pav","pbv","da","magnitudeSquared","db","isInternal","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","normalise","gradient","boundsA","boundsB","vector","shift","deltaX","deltaY","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","points","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","RenderPixi","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","space","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","corrected","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"mappings":"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CA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AA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","sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n"]},"metadata":{},"sourceType":"script"}