{"version":3,"file":"react-matter-js.cjs.production.min.js","sources":["../src/util/valueMemo.ts","../src/util/size.ts","../src/util/DefaultMap.ts","../src/util/TrackSet.ts","../src/util/trackCats.ts","../src/util/index.ts","../src/Engine.tsx","../src/Render.tsx","../src/util/useClones.ts","../src/extra/RenderClones.tsx","../src/bodies/Body.tsx","../src/bodies/Rectangle.tsx","../src/bodies/Circle.tsx","../src/bodies/Vertices.tsx","../src/Constraint.ts","../src/extra/Walls.tsx","../src/extra/Scene.tsx","../src/extra/Shape.tsx","../src/extra/WindowScene.tsx"],"sourcesContent":["import { PropsWithChildren, memo, ComponentType } from 'react';\nimport { ValueObject } from 'tuplerone';\n\nconst valueMemo = <A>(component: ComponentType<A>) =>\n  memo(component, valueCompare);\n\nexport default valueMemo;\n\nconst keyFilter = ([key]: [string, any]) => !key.startsWith('_');\nexport const valueCompare = <P>(\n  prev: Readonly<PropsWithChildren<P>>,\n  next: Readonly<PropsWithChildren<P>>,\n): boolean => ValueObject(prev, keyFilter) === ValueObject(next, keyFilter);\n","import { Engine } from 'matter-js';\nimport { useEngine } from '../Engine';\n\nexport const relX = (size: number) => (engine: Engine) =>\n  engine.render.options.width! * size;\n\nexport const relY = (size: number) => (engine: Engine) =>\n  engine.render.options.height! * size;\n\nexport type SizeFn = (x: Engine) => number;\nexport type Size = number | SizeFn;\nexport type Sizes = {\n  [name: string]: Size;\n};\n\nexport const getSize = (size: Size, engine: Engine): number =>\n  typeof size === 'function' ? size(engine) : size;\n\nexport const mapEntries = <A, B>(\n  object: { [key: string]: A },\n  fn: (entry: [string, A]) => [string, B],\n) => Object.fromEntries(Object.entries(object).map(fn));\n\nexport const useMapSizes = (sizes: Sizes) => {\n  const engine = useEngine();\n  return mapEntries(sizes, ([key, value]) => [key, getSize(value, engine)]);\n};\n","export default class DefaultMap<K, V> extends Map<K, V> {\n  constructor(private init: (a: K) => V) {\n    super();\n  }\n  get(key: K): V {\n    if (!this.has(key)) {\n      const value = this.init(key);\n      this.set(key, value);\n      return value;\n    }\n    return super.get(key)!;\n  }\n}\n","export default class TrackSet<A> extends Set<A> {\n  constructor(private subs = new Set<Sub<A>>()) {\n    super();\n  }\n  add(a: A) {\n    super.add(a);\n\n    this.subs.forEach(sub => sub(this));\n    return this;\n  }\n  delete(a: A) {\n    const result = super.delete(a);\n    if (result) {\n      this.subs.forEach(sub => sub(this));\n    }\n    return result;\n  }\n  track(sub: Sub<A>) {\n    this.subs.add(sub);\n  }\n  untrack(sub: Sub<A>) {\n    this.subs.delete(sub);\n  }\n  clear() {\n    super.clear();\n    this.subs.forEach(sub => sub(this));\n    this.subs.clear();\n  }\n}\n\ntype Sub<A> = (a: TrackSet<A>) => void;\n","import Matter from 'matter-js';\nimport { useEffect } from 'react';\nimport { useEngine } from '../Engine';\nimport DefaultMap from './DefaultMap';\nimport TrackSet from './TrackSet';\nimport { useRerender } from '../util';\n\nconst trackCats = (engine: Matter.Engine) => {\n  const cats: CatMap = new DefaultMap(() => new TrackSet());\n  engine[catsKey] = cats;\n\n  const afterAdd = ({ object: body }: { object: Matter.Body }) => {\n    if (!body[catsKey]?.length) {\n      return;\n    }\n    body[catsKey].forEach((key: CatKey) => void cats.get(key).add(body));\n  };\n  const afterRemove = ({ object: body }: { object: Matter.Body }) => {\n    if (!body[catsKey]) {\n      return;\n    }\n    body[catsKey].forEach((key: CatKey) => void cats.get(key).delete(body));\n  };\n\n  Matter.Events.on(engine.world, 'afterAdd', afterAdd);\n  Matter.Events.on(engine.world, 'afterRemove', afterRemove);\n\n  return () => {\n    Matter.Events.off(engine.world, 'afterAdd', afterAdd);\n    Matter.Events.off(engine.world, 'afterRemove', afterRemove);\n    cats.forEach(cat => void cat.clear());\n    cats.clear();\n  };\n};\n\nexport default trackCats;\n\nexport const catsKey = Symbol('categories');\n\nexport type Cat = TrackSet<Matter.Body>;\nexport type CatKey = string | symbol;\nexport type CatMap = DefaultMap<CatKey, Cat>;\n\nexport const useCat = (key: CatKey) => {\n  const engine = useEngine();\n  const rerender = useRerender();\n  const cat = engine[catsKey].get(key);\n\n  useEffect(() => {\n    cat.track(rerender);\n\n    return () => {\n      cat.untrack(rerender);\n    };\n  }, [cat, rerender]);\n\n  return cat;\n};\n\ndeclare module 'matter-js' {\n  interface Engine {\n    [catsKey]: CatMap;\n  }\n\n  interface Body {\n    [catsKey]: CatKey[];\n  }\n}\n","import { useState, useCallback } from 'react';\nimport * as windowSize from '@react-hook/window-size';\n\nexport { default as valueMemo, valueCompare } from './valueMemo';\nexport const randomSuffix = Math.round(Math.random() * 1e10).toString(32);\n\nexport const cESVG = (name: string) =>\n  document.createElementNS('http://www.w3.org/2000/svg', name);\n\nexport const useRerender = () => {\n  const [, updateState] = useState();\n  return useCallback(() => updateState(Symbol()), []);\n};\n\nexport const useWindowSize = () => {\n  const [width, height] = windowSize.useWindowSize();\n  return { width, height };\n};\n\nexport * from './size';\n","import React, { useState, createContext, useContext, useEffect } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\n\nimport { valueMemo } from './util';\nimport trackCats from './util/trackCats';\n\nconst Engine = ({ options, children }: Props) => {\n  const [engine, setEngine] = useState<Matter.Engine | null>(null);\n\n  useEffect(() => {\n    const engine = shallow(Matter.Engine.create(options));\n    setEngine(engine);\n    const clearCats = trackCats(engine);\n\n    return () => {\n      Matter.World.clear(engine.world, false);\n      Matter.Engine.clear(engine);\n      engine.enabled = false;\n      clearCats();\n      setEngine(null);\n    };\n  }, [options]);\n\n  return engine ? <Provider value={engine}>{children}</Provider> : null;\n};\n\nexport default valueMemo(Engine);\n\ntype Props = {\n  options: Matter.IEngineDefinition;\n  children: React.ReactNode;\n};\n\nexport const EngineContext = createContext<Matter.Engine>(null as any);\nconst { Provider } = EngineContext;\nexport const useEngine = () => useContext(EngineContext);\n\nexport const cloneKey = Symbol('clone');\n","import React, { useRef, useEffect, useState } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\n\nimport { useEngine } from './Engine';\nimport { valueMemo } from './util';\nimport { css } from 'emotion';\n\nconst Render = ({\n  options,\n  enableMouse = false,\n  mouseConstraintOptions,\n  children,\n  ...props\n}: Props) => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const engine = useEngine();\n  const [render, setRender] = useState<Matter.Render | null>(null);\n  const { width } = options;\n\n  useEffect(() => {\n    const render = shallow(\n      Matter.Render.create({\n        element: elementRef.current!,\n        engine,\n        options,\n      }),\n    );\n    engine.render = render;\n    setRender(render);\n    Matter.Render.run(render);\n\n    const runner = shallow(Matter.Runner.create());\n    Matter.Runner.run(runner, engine);\n\n    if (enableMouse || mouseConstraintOptions) {\n      const mouse = shallow(Matter.Mouse.create(render.canvas));\n      const mouseConstraint = shallow(\n        Matter.MouseConstraint.create(engine, {\n          ...mouseConstraintOptions,\n          mouse,\n        }),\n      );\n      Matter.World.add(engine.world, mouseConstraint);\n    }\n\n    return () => {\n      Matter.Render.stop(render);\n      render.canvas.remove();\n      // @ts-ignore\n      render.canvas = null;\n      // @ts-ignore\n      render.context = null;\n      Matter.Runner.stop(runner);\n      render.textures = {};\n    };\n  }, [engine, options, mouseConstraintOptions, enableMouse, setRender]);\n\n  return (\n    <div\n      {...props}\n      ref={elementRef}\n      className={css`\n        display: block;\n        width: ${width}px;\n        position: relative;\n        canvas {\n          position: relative;\n          display: block;\n          z-index: 1;\n        }\n      `}\n    >\n      {render ? renderChildren(children, engine) : null}\n    </div>\n  );\n};\n\nexport default valueMemo(Render);\n\ntype Props = {\n  options: Matter.IRendererOptions;\n  enableMouse?: boolean;\n  mouseConstraintOptions?: Matter.IMouseConstraintDefinition;\n  children?: React.ReactNode;\n};\n\ntype RenderFn = (engine: Matter.Engine) => React.ReactNode;\nconst renderChildren = (\n  children: React.ReactNode | RenderFn,\n  engine: Matter.Engine,\n): React.ReactNode => {\n  if (Array.isArray(children)) {\n    return children.map(child => renderChildren(child, engine));\n  }\n  return typeof children === 'function' ? children(engine) : children;\n};\n","import Matter from 'matter-js';\nimport React, { useEffect } from 'react';\nimport { useEngine } from '../Engine';\nimport { useCat, Cat } from './trackCats';\n\nconst useClones = () => {\n  const engine = useEngine();\n  const bodies = useCat(cloneKey);\n  const dom = pickEls(useCat(domKey));\n  const svg = pickEls(useCat(svgKey));\n\n  useEffect(() => {\n    const afterUpdate = () => {\n      bodies.forEach(body => {\n        if (body.isSleeping) {\n          return;\n        }\n\n        const { x, y } = body.position!;\n        const { ref } = body[cloneKey]!;\n\n        // TODO: ?\n        if (!ref.current) {\n          return;\n        }\n        ref.current!.style.transform = `translate(${x}px, ${y}px) rotate(${body.angle}rad)`;\n      });\n    };\n    Matter.Events.on(engine, 'afterUpdate', afterUpdate);\n    return () => {\n      Matter.Events.off(engine, 'afterUpdate', afterUpdate);\n    };\n  }, [bodies, engine]);\n\n  return { dom, svg };\n};\n\nexport default useClones;\n\nconst pickEls = (cat: Cat) => Array.from(cat, body => body[cloneKey]!.el);\n\nexport const cloneKey = Symbol('clone');\nexport const svgKey = Symbol('SVG clone');\nexport const domKey = Symbol('DOM clone');\n\ntype Clone = {\n  el: React.ReactElement;\n} & (\n  | {\n      key: typeof domKey;\n      ref: React.RefObject<HTMLElement>;\n    }\n  | {\n      key: typeof svgKey;\n      ref: React.RefObject<SVGElement>;\n    }\n);\n\ndeclare module 'matter-js' {\n  interface Body {\n    [cloneKey]?: Clone;\n  }\n}\n","import React from 'react';\nimport Matter from 'matter-js';\nimport { css } from 'emotion';\nimport Render from '../Render';\nimport { valueMemo } from '../util';\nimport useClones from '../util/useClones';\n\nconst RenderClones = ({\n  children,\n  options = {},\n  // TODO: ?\n  margin = 40,\n  ...props\n}: Props) => {\n  const { width, height } = options;\n  const { dom, svg } = useClones();\n\n  return (\n    <Render {...props} options={options}>\n      <div className={cloneContainerStyle}>{dom}</div>\n      <svg viewBox={`0 0 ${width} ${height}`} className={cloneContainerStyle}>\n        {svg}\n      </svg>\n      {children}\n    </Render>\n  );\n};\n\nexport default valueMemo(RenderClones);\n\ntype Props = {\n  children?: React.ReactNode;\n  options?: Matter.IRendererOptions;\n  margin?: number;\n} & React.ComponentProps<typeof Render>;\n\nconst cloneContainerStyle = css`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  fill: #f60;\n`;\n","import { useEffect } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\nimport { useEngine } from '../Engine';\nimport { catsKey, CatKey } from '../util/trackCats';\nimport { cloneKey } from '../util/useClones';\nimport { valueMemo, Sizes } from '../util';\n\nconst Body = ({\n  children: createBody,\n  cats = [],\n  bodyRef,\n  sizes = {},\n}: Props) => {\n  const engine = useEngine();\n  useEffect(() => {\n    const body = shallow(createBody());\n    body[sizesKey] = sizes;\n\n    if (bodyRef) {\n      bodyRef.current = body;\n    }\n\n    body[catsKey] = cats;\n\n    if (body[cloneKey]) {\n      body[catsKey].push(body[cloneKey]!.key, cloneKey);\n    }\n\n    Matter.World.add(engine.world, body);\n\n    return () => {\n      Matter.World.remove(engine.world, body);\n\n      if (bodyRef) {\n        bodyRef.current = null;\n      }\n    };\n  }, [engine, createBody, cats, bodyRef, sizes]);\n\n  return null;\n};\n\nexport default valueMemo(Body);\n\ntype Props = {\n  children: () => Matter.Body;\n  cats?: CatKey[];\n  bodyRef?: React.MutableRefObject<Matter.Body | null>;\n  sizes?: Sizes;\n};\n\nexport const sizesKey = Symbol('sizes');\n\ndeclare module 'matter-js' {\n  interface Body {\n    [sizesKey]: Sizes;\n  }\n}\n","import React, { createRef } from 'react';\nimport Matter from 'matter-js';\nimport Body from './Body';\nimport { cloneKey, svgKey } from '../util/useClones';\nimport { valueMemo } from '../util';\n\nconst Rectangle = ({\n  x,\n  y,\n  width,\n  height,\n  clone = false,\n  options,\n  ...props\n}: Props) => {\n  const createBody = () => {\n    const body = Matter.Bodies.rectangle(x, y, width, height, options);\n    if (clone) {\n      const ref = createRef<SVGRectElement>();\n      const el = (\n        <rect\n          x={-width / 2}\n          y={-height / 2}\n          width={width}\n          height={height}\n          ref={ref}\n          key={body.id}\n        />\n      );\n      body[cloneKey] = {\n        key: svgKey,\n        ref,\n        el,\n      };\n    }\n\n    return body;\n  };\n\n  return <Body {...props}>{createBody}</Body>;\n};\n\nexport default valueMemo(Rectangle);\n\ntype Props = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  clone?: boolean;\n  options?: Matter.IChamferableBodyDefinition;\n} & Omit<React.ComponentProps<typeof Body>, 'children'>;\n","import React, { createRef } from 'react';\nimport Matter from 'matter-js';\nimport Body from './Body';\nimport { cloneKey, svgKey } from '../util/useClones';\nimport { valueMemo, Size, useMapSizes } from '../util';\n\nconst Circle = ({\n  x,\n  y,\n  radius,\n  clone = false,\n  options,\n  cloneProps,\n  ...props\n}: Props) => {\n  const sizes = useMapSizes({\n    x,\n    y,\n    radius,\n  });\n  const createBody = () => {\n    const body = Matter.Bodies.circle(sizes.x, sizes.y, sizes.radius, options);\n\n    if (clone) {\n      const ref = createRef<SVGCircleElement>();\n      const el = (\n        <circle\n          cx={0}\n          cy={0}\n          r={sizes.radius}\n          ref={ref}\n          key={body.id}\n          {...cloneProps}\n        />\n      );\n      body[cloneKey] = {\n        key: svgKey,\n        ref,\n        el,\n      };\n    }\n\n    return body;\n  };\n\n  return <Body {...props}>{createBody}</Body>;\n};\n\nexport default valueMemo(Circle);\n\ntype Props = {\n  x: Size;\n  y: Size;\n  radius: Size;\n  clone?: boolean;\n  options?: Matter.IBodyDefinition;\n  cloneProps?: any;\n} & Omit<React.ComponentProps<typeof Body>, 'children'>;\n","import React, { createRef } from 'react';\nimport Matter from 'matter-js';\nimport Body from './Body';\nimport { cloneKey, svgKey } from '../util/useClones';\nimport { valueMemo } from '../util';\n\nconst px = (n: number) => `${n}px`;\n\nconst Vertices = ({\n  x,\n  y,\n  width,\n  height,\n  vertexSets,\n  options = {},\n  flagInternal = false,\n  cloneID,\n  cloneProps = {},\n  ...props\n}: Props) => {\n  const createBody = () => {\n    const body = Matter.Bodies.fromVertices(\n      x,\n      y,\n      vertexSets,\n      options,\n      flagInternal,\n    );\n\n    const ref = createRef<SVGSVGElement>();\n    const { min, max } = body.bounds;\n\n    const _width = max.x - min.x;\n    const _height = max.y - min.y;\n    const scale = Math.min(width / _width, height / _height);\n    Matter.Body.scale(body, scale, scale);\n    // const viewBox = parseViewbox(\n    //   document.querySelector(`#${cloneID}`).getAttribute(\"viewBox\")\n    // );\n\n    // XXX: why?\n    const ratio = 1.4;\n    const scaledWidth = _width * scale * ratio;\n    const scaledHeight = _height * scale * ratio;\n\n    const el = (\n      <g ref={ref} key={body.id}>\n        <use\n          xlinkHref={`#${cloneID}`}\n          width={px(scaledWidth)}\n          height={px(scaledHeight)}\n          x={px(-scaledWidth / 2)}\n          y={px(-scaledHeight / 2)}\n          {...cloneProps}\n        />\n      </g>\n    );\n    body[cloneKey] = {\n      key: svgKey,\n      ref,\n      el,\n    };\n\n    return body;\n  };\n\n  return <Body {...props}>{createBody}</Body>;\n};\n\nexport default valueMemo(Vertices);\n\ntype Props = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  vertexSets: any;\n  options: object;\n  flagInternal: boolean;\n  cloneID?: number;\n  cloneProps: object;\n} & React.ComponentProps<typeof Body>;\n","import { useEffect, cloneElement, useRef, memo } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\n\nimport { useEngine } from './Engine';\nimport { valueCompare } from './util';\n\n// TODO: return type\nconst Constraint = ({ children, length, ...options }: Props): any => {\n  const engine = useEngine();\n\n  const bodyARef = useRef();\n  const bodyBRef = useRef();\n\n  useEffect(() => {\n    const { current: bodyA } = bodyARef;\n    const { current: bodyB } = bodyBRef;\n    const constraint = shallow(\n      Matter.Constraint.create({\n        bodyA,\n        bodyB,\n        length,\n        ...options,\n      }),\n    );\n    Matter.World.add(engine.world, constraint);\n\n    return () => {\n      Matter.World.remove(engine.world, constraint);\n    };\n  }, [options, engine, length]);\n\n  return [bodyARef, bodyBRef].map((bodyRef, key) =>\n    cloneElement(children![key], {\n      bodyRef,\n      key,\n    }),\n  );\n};\n\ntype Props = {\n  children: [React.ReactElement, React.ReactElement];\n  length?: number;\n};\n\nexport default memo(Constraint, valueCompare);\n","import React, { Fragment } from 'react';\n\nimport Rectangle from '../bodies/Rectangle';\nimport { Size, useMapSizes } from '../util';\n\nconst Walls = ({ options, ...props }: Props) => {\n  const defaultProps = {\n    options: {\n      ...options,\n      isStatic: true,\n    },\n  };\n\n  const { x, y, width, height, wallWidth } = useMapSizes(pickSizes(props));\n\n  const top = {\n    ...defaultProps,\n    x: x + width / 2,\n    y: y + wallWidth / 2,\n    width: width,\n    height: wallWidth,\n  };\n  const bottom = {\n    ...defaultProps,\n    ...top,\n    y: height - wallWidth / 2,\n  };\n  const left = {\n    ...defaultProps,\n    x: x + wallWidth / 2,\n    y: y + height / 2,\n    height: height,\n    width: wallWidth,\n  };\n  const right = {\n    ...defaultProps,\n    ...left,\n    x: width - wallWidth / 2,\n  };\n\n  return (\n    <Fragment>\n      <Rectangle {...top} />\n      <Rectangle {...bottom} />\n      <Rectangle {...left} />\n      <Rectangle {...right} />\n    </Fragment>\n  );\n};\n\nexport default Walls;\n\ntype Props = {\n  x: Size;\n  y: Size;\n  width: Size;\n  height: Size;\n  wallWidth?: Size;\n  options?: React.ComponentProps<typeof Rectangle>['options'];\n};\n\nconst pickSizes = ({\n  x,\n  y,\n  width,\n  height,\n  wallWidth = 100,\n}: Pick<Props, 'x' | 'y' | 'width' | 'height' | 'wallWidth'>) => ({\n  x,\n  y,\n  width,\n  height,\n  wallWidth,\n});\n","import React from 'react';\nimport Matter from 'matter-js';\nimport Render from '../Render';\nimport Walls from './Walls';\nimport Engine from '../Engine';\nimport RenderClones from './RenderClones';\nimport { valueMemo, relX, relY } from '../util';\n\nconst Scene = ({\n  width = 720,\n  height = 540,\n  pixelRatio = 'auto',\n  engineOptions = {},\n  rendererProps = {},\n  mouse = true,\n  gravity,\n  walled = false,\n  wallWidth = 50,\n  children,\n}: Props) => {\n  const rendererOptions = {\n    width,\n    height,\n    background: 'transparent',\n    wireframeBackground: 'transparent',\n    pixelRatio,\n    ...rendererProps.options,\n  };\n  const key = `${rendererOptions.width}-${rendererOptions.height}`;\n\n  const wall = walled ? (\n    <Walls\n      x={-wallWidth}\n      y={-wallWidth}\n      width={engine => relX(1)(engine) + wallWidth}\n      height={engine => relY(1)(engine) + wallWidth}\n      wallWidth={wallWidth}\n      options={{\n        render: {\n          visible: false,\n        },\n      }}\n    />\n  ) : null;\n\n  return (\n    <Engine options={engineOptions} key={key}>\n      <RenderClones\n        {...rendererProps}\n        options={rendererOptions}\n        enableMouse={mouse}\n      >\n        {wall}\n        {(engine: Matter.Engine) => {\n          Object.assign(engine.world.gravity, gravity);\n\n          return children;\n        }}\n      </RenderClones>\n    </Engine>\n  );\n};\n\nexport default valueMemo(Scene);\n\ntype Gravity = {\n  x?: number;\n  y?: number;\n  scale?: number;\n};\ntype RendererProps = Omit<React.ComponentProps<typeof Render>, 'options'> & {\n  options?: Matter.IRendererOptions;\n};\ntype Props = {\n  width?: number;\n  height?: number;\n  pixelRatio?: number | 'auto';\n  engineOptions?: Matter.IEngineDefinition;\n  rendererProps?: RendererProps;\n  mouse?: boolean;\n  gravity?: Gravity;\n  walled?: boolean;\n  wallWidth?: number;\n  children: React.ReactNode;\n};\n","import React from 'react';\nimport Matter from 'matter-js';\nimport Vertices from '../bodies/Vertices';\nimport 'pathseg';\n\nconst Shape = ({ paths, sampleLength = 30, ...props }: Props) => {\n  if (!paths) {\n    return null;\n  }\n\n  const vertexSets = paths.map(path =>\n    Matter.Svg.pathToVertices(path, sampleLength),\n  );\n\n  return <Vertices vertexSets={vertexSets} {...props} />;\n};\n\nexport default Shape;\n\ntype Props = {\n  paths: SVGPathElement[];\n  sampleLength?: number;\n} & React.ComponentProps<typeof Vertices>;\n\n// @ts-ignore\nwindow.decomp = require('poly-decomp');\n","import React from 'react';\nimport Scene from './Scene';\nimport { useWindowSize } from '../util';\n\nconst WindowScene = (props: Props) => {\n  const { width, height } = useWindowSize();\n\n  return <Scene {...props} width={width} height={height} />;\n};\n\nexport default WindowScene;\n\ntype Props = Omit<React.ComponentProps<typeof Scene>, 'width' | 'height'>;\n"],"names":["valueMemo","component","memo","valueCompare","keyFilter","startsWith","prev","next","ValueObject","relX","size","engine","render","options","width","relY","height","getSize","useMapSizes","sizes","fn","useEngine","Object","fromEntries","entries","map","DefaultMap","init","get","key","this","has","value","set","Map","TrackSet","subs","Set","add","a","forEach","sub","_this2","delete","result","_this3","track","untrack","clear","_this4","catsKey","Symbol","useCat","updateState","rerender","useState","useCallback","cat","useEffect","children","setEngine","shallow","Matter","Engine","create","clearCats","cats","afterAdd","body","object","_body$catsKey","length","afterRemove","Events","on","world","off","trackCats","World","enabled","React","Provider","EngineContext","createContext","useContext","enableMouse","mouseConstraintOptions","props","elementRef","useRef","setRender","Render","element","current","run","runner","Runner","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","stop","remove","context","textures","ref","className","css","renderChildren","Array","isArray","child","pickEls","from","cloneKey","el","svgKey","domKey","bodies","dom","svg","afterUpdate","isSleeping","position","style","transform","x","y","angle","useClones","cloneContainerStyle","viewBox","_templateObject","createBody","bodyRef","sizesKey","push","clone","Body","Bodies","rectangle","createRef","id","radius","cloneProps","circle","cx","cy","r","px","n","vertexSets","flagInternal","cloneID","fromVertices","bounds","min","max","_width","_height","scale","Math","scaledWidth","scaledHeight","xlinkHref","Constraint","bodyARef","bodyBRef","constraint","bodyA","bodyB","cloneElement","Walls","defaultProps","isStatic","pickSizes","wallWidth","top","bottom","left","right","Fragment","Rectangle","pixelRatio","engineOptions","rendererProps","gravity","walled","rendererOptions","background","wireframeBackground","wall","visible","RenderClones","assign","window","decomp","require","paths","sampleLength","path","Svg","pathToVertices","Vertices","windowSize","Scene"],"mappings":"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"}