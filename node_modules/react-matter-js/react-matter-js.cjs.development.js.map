{"version":3,"file":"react-matter-js.cjs.development.js","sources":["../src/util/valueMemo.ts","../src/util/size.ts","../src/util/index.ts","../src/util/DefaultMap.ts","../src/util/TrackSet.ts","../src/util/trackCats.ts","../src/Engine.tsx","../src/Render.tsx","../src/util/useClones.ts","../src/extra/RenderClones.tsx","../src/bodies/Body.tsx","../src/bodies/Rectangle.tsx","../src/bodies/Circle.tsx","../src/bodies/Vertices.tsx","../src/Constraint.ts","../src/extra/Walls.tsx","../src/extra/Scene.tsx","../src/extra/WindowScene.tsx","../src/extra/Shape.tsx"],"sourcesContent":["import { PropsWithChildren, memo, ComponentType } from 'react';\nimport { ValueObject } from 'tuplerone';\n\nconst valueMemo = <A>(component: ComponentType<A>) =>\n  memo(component, valueCompare);\n\nexport default valueMemo;\n\nconst keyFilter = ([key]: [string, any]) => !key.startsWith('_');\nexport const valueCompare = <P>(\n  prev: Readonly<PropsWithChildren<P>>,\n  next: Readonly<PropsWithChildren<P>>,\n): boolean => ValueObject(prev, keyFilter) === ValueObject(next, keyFilter);\n","import { Engine } from 'matter-js';\nimport { useEngine } from '../Engine';\n\nexport const relX = (size: number) => (engine: Engine) =>\n  engine.render.options.width! * size;\n\nexport const relY = (size: number) => (engine: Engine) =>\n  engine.render.options.height! * size;\n\nexport type SizeFn = (x: Engine) => number;\nexport type Size = number | SizeFn;\nexport type Sizes = {\n  [name: string]: Size;\n};\n\nexport const getSize = (size: Size, engine: Engine): number =>\n  typeof size === 'function' ? size(engine) : size;\n\nexport const mapEntries = <A, B>(\n  object: { [key: string]: A },\n  fn: (entry: [string, A]) => [string, B],\n) => Object.fromEntries(Object.entries(object).map(fn));\n\nexport const useMapSizes = (sizes: Sizes) => {\n  const engine = useEngine();\n  return mapEntries(sizes, ([key, value]) => [key, getSize(value, engine)]);\n};\n","import { useState, useCallback } from 'react';\nimport * as windowSize from '@react-hook/window-size';\n\nexport { default as valueMemo, valueCompare } from './valueMemo';\nexport const randomSuffix = Math.round(Math.random() * 1e10).toString(32);\n\nexport const cESVG = (name: string) =>\n  document.createElementNS('http://www.w3.org/2000/svg', name);\n\nexport const useRerender = () => {\n  const [, updateState] = useState();\n  return useCallback(() => updateState(Symbol()), []);\n};\n\nexport const useWindowSize = () => {\n  const [width, height] = windowSize.useWindowSize();\n  return { width, height };\n};\n\nexport * from './size';\n","export default class DefaultMap<K, V> extends Map<K, V> {\n  constructor(private init: (a: K) => V) {\n    super();\n  }\n  get(key: K): V {\n    if (!this.has(key)) {\n      const value = this.init(key);\n      this.set(key, value);\n      return value;\n    }\n    return super.get(key)!;\n  }\n}\n","export default class TrackSet<A> extends Set<A> {\n  constructor(private subs = new Set<Sub<A>>()) {\n    super();\n  }\n  add(a: A) {\n    super.add(a);\n\n    this.subs.forEach(sub => sub(this));\n    return this;\n  }\n  delete(a: A) {\n    const result = super.delete(a);\n    if (result) {\n      this.subs.forEach(sub => sub(this));\n    }\n    return result;\n  }\n  track(sub: Sub<A>) {\n    this.subs.add(sub);\n  }\n  untrack(sub: Sub<A>) {\n    this.subs.delete(sub);\n  }\n  clear() {\n    super.clear();\n    this.subs.forEach(sub => sub(this));\n    this.subs.clear();\n  }\n}\n\ntype Sub<A> = (a: TrackSet<A>) => void;\n","import Matter from 'matter-js';\nimport { useEffect } from 'react';\nimport { useEngine } from '../Engine';\nimport DefaultMap from './DefaultMap';\nimport TrackSet from './TrackSet';\nimport { useRerender } from '../util';\n\nconst trackCats = (engine: Matter.Engine) => {\n  const cats: CatMap = new DefaultMap(() => new TrackSet());\n  engine[catsKey] = cats;\n\n  const afterAdd = ({ object: body }: { object: Matter.Body }) => {\n    if (!body[catsKey]?.length) {\n      return;\n    }\n    body[catsKey].forEach((key: CatKey) => void cats.get(key).add(body));\n  };\n  const afterRemove = ({ object: body }: { object: Matter.Body }) => {\n    if (!body[catsKey]) {\n      return;\n    }\n    body[catsKey].forEach((key: CatKey) => void cats.get(key).delete(body));\n  };\n\n  Matter.Events.on(engine.world, 'afterAdd', afterAdd);\n  Matter.Events.on(engine.world, 'afterRemove', afterRemove);\n\n  return () => {\n    Matter.Events.off(engine.world, 'afterAdd', afterAdd);\n    Matter.Events.off(engine.world, 'afterRemove', afterRemove);\n    cats.forEach(cat => void cat.clear());\n    cats.clear();\n  };\n};\n\nexport default trackCats;\n\nexport const catsKey = Symbol('categories');\n\nexport type Cat = TrackSet<Matter.Body>;\nexport type CatKey = string | symbol;\nexport type CatMap = DefaultMap<CatKey, Cat>;\n\nexport const useCat = (key: CatKey) => {\n  const engine = useEngine();\n  const rerender = useRerender();\n  const cat = engine[catsKey].get(key);\n\n  useEffect(() => {\n    cat.track(rerender);\n\n    return () => {\n      cat.untrack(rerender);\n    };\n  }, [cat, rerender]);\n\n  return cat;\n};\n\ndeclare module 'matter-js' {\n  interface Engine {\n    [catsKey]: CatMap;\n  }\n\n  interface Body {\n    [catsKey]: CatKey[];\n  }\n}\n","import React, { useState, createContext, useContext, useEffect } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\n\nimport { valueMemo } from './util';\nimport trackCats from './util/trackCats';\n\nconst Engine = ({ options, children }: Props) => {\n  const [engine, setEngine] = useState<Matter.Engine | null>(null);\n\n  useEffect(() => {\n    const engine = shallow(Matter.Engine.create(options));\n    setEngine(engine);\n    const clearCats = trackCats(engine);\n\n    return () => {\n      Matter.World.clear(engine.world, false);\n      Matter.Engine.clear(engine);\n      engine.enabled = false;\n      clearCats();\n      setEngine(null);\n    };\n  }, [options]);\n\n  return engine ? <Provider value={engine}>{children}</Provider> : null;\n};\n\nexport default valueMemo(Engine);\n\ntype Props = {\n  options: Matter.IEngineDefinition;\n  children: React.ReactNode;\n};\n\nexport const EngineContext = createContext<Matter.Engine>(null as any);\nconst { Provider } = EngineContext;\nexport const useEngine = () => useContext(EngineContext);\n\nexport const cloneKey = Symbol('clone');\n","import React, { useRef, useEffect, useState } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\n\nimport { useEngine } from './Engine';\nimport { valueMemo } from './util';\nimport { css } from 'emotion';\n\nconst Render = ({\n  options,\n  enableMouse = false,\n  mouseConstraintOptions,\n  children,\n  ...props\n}: Props) => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const engine = useEngine();\n  const [render, setRender] = useState<Matter.Render | null>(null);\n  const { width } = options;\n\n  useEffect(() => {\n    const render = shallow(\n      Matter.Render.create({\n        element: elementRef.current!,\n        engine,\n        options,\n      }),\n    );\n    engine.render = render;\n    setRender(render);\n    Matter.Render.run(render);\n\n    const runner = shallow(Matter.Runner.create());\n    Matter.Runner.run(runner, engine);\n\n    if (enableMouse || mouseConstraintOptions) {\n      const mouse = shallow(Matter.Mouse.create(render.canvas));\n      const mouseConstraint = shallow(\n        Matter.MouseConstraint.create(engine, {\n          ...mouseConstraintOptions,\n          mouse,\n        }),\n      );\n      Matter.World.add(engine.world, mouseConstraint);\n    }\n\n    return () => {\n      Matter.Render.stop(render);\n      render.canvas.remove();\n      // @ts-ignore\n      render.canvas = null;\n      // @ts-ignore\n      render.context = null;\n      Matter.Runner.stop(runner);\n      render.textures = {};\n    };\n  }, [engine, options, mouseConstraintOptions, enableMouse, setRender]);\n\n  return (\n    <div\n      {...props}\n      ref={elementRef}\n      className={css`\n        display: block;\n        width: ${width}px;\n        position: relative;\n        canvas {\n          position: relative;\n          display: block;\n          z-index: 1;\n        }\n      `}\n    >\n      {render ? renderChildren(children, engine) : null}\n    </div>\n  );\n};\n\nexport default valueMemo(Render);\n\ntype Props = {\n  options: Matter.IRendererOptions;\n  enableMouse?: boolean;\n  mouseConstraintOptions?: Matter.IMouseConstraintDefinition;\n  children?: React.ReactNode;\n};\n\ntype RenderFn = (engine: Matter.Engine) => React.ReactNode;\nconst renderChildren = (\n  children: React.ReactNode | RenderFn,\n  engine: Matter.Engine,\n): React.ReactNode => {\n  if (Array.isArray(children)) {\n    return children.map(child => renderChildren(child, engine));\n  }\n  return typeof children === 'function' ? children(engine) : children;\n};\n","import Matter from 'matter-js';\nimport React, { useEffect } from 'react';\nimport { useEngine } from '../Engine';\nimport { useCat, Cat } from './trackCats';\n\nconst useClones = () => {\n  const engine = useEngine();\n  const bodies = useCat(cloneKey);\n  const dom = pickEls(useCat(domKey));\n  const svg = pickEls(useCat(svgKey));\n\n  useEffect(() => {\n    const afterUpdate = () => {\n      bodies.forEach(body => {\n        if (body.isSleeping) {\n          return;\n        }\n\n        const { x, y } = body.position!;\n        const { ref } = body[cloneKey]!;\n\n        // TODO: ?\n        if (!ref.current) {\n          return;\n        }\n        ref.current!.style.transform = `translate(${x}px, ${y}px) rotate(${body.angle}rad)`;\n      });\n    };\n    Matter.Events.on(engine, 'afterUpdate', afterUpdate);\n    return () => {\n      Matter.Events.off(engine, 'afterUpdate', afterUpdate);\n    };\n  }, [bodies, engine]);\n\n  return { dom, svg };\n};\n\nexport default useClones;\n\nconst pickEls = (cat: Cat) => Array.from(cat, body => body[cloneKey]!.el);\n\nexport const cloneKey = Symbol('clone');\nexport const svgKey = Symbol('SVG clone');\nexport const domKey = Symbol('DOM clone');\n\ntype Clone = {\n  el: React.ReactElement;\n} & (\n  | {\n      key: typeof domKey;\n      ref: React.RefObject<HTMLElement>;\n    }\n  | {\n      key: typeof svgKey;\n      ref: React.RefObject<SVGElement>;\n    }\n);\n\ndeclare module 'matter-js' {\n  interface Body {\n    [cloneKey]?: Clone;\n  }\n}\n","import React from 'react';\nimport Matter from 'matter-js';\nimport { css } from 'emotion';\nimport Render from '../Render';\nimport { valueMemo } from '../util';\nimport useClones from '../util/useClones';\n\nconst RenderClones = ({\n  children,\n  options = {},\n  // TODO: ?\n  margin = 40,\n  ...props\n}: Props) => {\n  const { width, height } = options;\n  const { dom, svg } = useClones();\n\n  return (\n    <Render {...props} options={options}>\n      <div className={cloneContainerStyle}>{dom}</div>\n      <svg viewBox={`0 0 ${width} ${height}`} className={cloneContainerStyle}>\n        {svg}\n      </svg>\n      {children}\n    </Render>\n  );\n};\n\nexport default valueMemo(RenderClones);\n\ntype Props = {\n  children?: React.ReactNode;\n  options?: Matter.IRendererOptions;\n  margin?: number;\n} & React.ComponentProps<typeof Render>;\n\nconst cloneContainerStyle = css`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  fill: #f60;\n`;\n","import { useEffect } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\nimport { useEngine } from '../Engine';\nimport { catsKey, CatKey } from '../util/trackCats';\nimport { cloneKey } from '../util/useClones';\nimport { valueMemo, Sizes } from '../util';\n\nconst Body = ({\n  children: createBody,\n  cats = [],\n  bodyRef,\n  sizes = {},\n}: Props) => {\n  const engine = useEngine();\n  useEffect(() => {\n    const body = shallow(createBody());\n    body[sizesKey] = sizes;\n\n    if (bodyRef) {\n      bodyRef.current = body;\n    }\n\n    body[catsKey] = cats;\n\n    if (body[cloneKey]) {\n      body[catsKey].push(body[cloneKey]!.key, cloneKey);\n    }\n\n    Matter.World.add(engine.world, body);\n\n    return () => {\n      Matter.World.remove(engine.world, body);\n\n      if (bodyRef) {\n        bodyRef.current = null;\n      }\n    };\n  }, [engine, createBody, cats, bodyRef, sizes]);\n\n  return null;\n};\n\nexport default valueMemo(Body);\n\ntype Props = {\n  children: () => Matter.Body;\n  cats?: CatKey[];\n  bodyRef?: React.MutableRefObject<Matter.Body | null>;\n  sizes?: Sizes;\n};\n\nexport const sizesKey = Symbol('sizes');\n\ndeclare module 'matter-js' {\n  interface Body {\n    [sizesKey]: Sizes;\n  }\n}\n","import React, { createRef } from 'react';\nimport Matter from 'matter-js';\nimport Body from './Body';\nimport { cloneKey, svgKey } from '../util/useClones';\nimport { valueMemo } from '../util';\n\nconst Rectangle = ({\n  x,\n  y,\n  width,\n  height,\n  clone = false,\n  options,\n  ...props\n}: Props) => {\n  const createBody = () => {\n    const body = Matter.Bodies.rectangle(x, y, width, height, options);\n    if (clone) {\n      const ref = createRef<SVGRectElement>();\n      const el = (\n        <rect\n          x={-width / 2}\n          y={-height / 2}\n          width={width}\n          height={height}\n          ref={ref}\n          key={body.id}\n        />\n      );\n      body[cloneKey] = {\n        key: svgKey,\n        ref,\n        el,\n      };\n    }\n\n    return body;\n  };\n\n  return <Body {...props}>{createBody}</Body>;\n};\n\nexport default valueMemo(Rectangle);\n\ntype Props = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  clone?: boolean;\n  options?: Matter.IChamferableBodyDefinition;\n} & Omit<React.ComponentProps<typeof Body>, 'children'>;\n","import React, { createRef } from 'react';\nimport Matter from 'matter-js';\nimport Body from './Body';\nimport { cloneKey, svgKey } from '../util/useClones';\nimport { valueMemo, Size, useMapSizes } from '../util';\n\nconst Circle = ({\n  x,\n  y,\n  radius,\n  clone = false,\n  options,\n  cloneProps,\n  ...props\n}: Props) => {\n  const sizes = useMapSizes({\n    x,\n    y,\n    radius,\n  });\n  const createBody = () => {\n    const body = Matter.Bodies.circle(sizes.x, sizes.y, sizes.radius, options);\n\n    if (clone) {\n      const ref = createRef<SVGCircleElement>();\n      const el = (\n        <circle\n          cx={0}\n          cy={0}\n          r={sizes.radius}\n          ref={ref}\n          key={body.id}\n          {...cloneProps}\n        />\n      );\n      body[cloneKey] = {\n        key: svgKey,\n        ref,\n        el,\n      };\n    }\n\n    return body;\n  };\n\n  return <Body {...props}>{createBody}</Body>;\n};\n\nexport default valueMemo(Circle);\n\ntype Props = {\n  x: Size;\n  y: Size;\n  radius: Size;\n  clone?: boolean;\n  options?: Matter.IBodyDefinition;\n  cloneProps?: any;\n} & Omit<React.ComponentProps<typeof Body>, 'children'>;\n","import React, { createRef } from 'react';\nimport Matter from 'matter-js';\nimport Body from './Body';\nimport { cloneKey, svgKey } from '../util/useClones';\nimport { valueMemo } from '../util';\n\nconst px = (n: number) => `${n}px`;\n\nconst Vertices = ({\n  x,\n  y,\n  width,\n  height,\n  vertexSets,\n  options = {},\n  flagInternal = false,\n  cloneID,\n  cloneProps = {},\n  ...props\n}: Props) => {\n  const createBody = () => {\n    const body = Matter.Bodies.fromVertices(\n      x,\n      y,\n      vertexSets,\n      options,\n      flagInternal,\n    );\n\n    const ref = createRef<SVGSVGElement>();\n    const { min, max } = body.bounds;\n\n    const _width = max.x - min.x;\n    const _height = max.y - min.y;\n    const scale = Math.min(width / _width, height / _height);\n    Matter.Body.scale(body, scale, scale);\n    // const viewBox = parseViewbox(\n    //   document.querySelector(`#${cloneID}`).getAttribute(\"viewBox\")\n    // );\n\n    // XXX: why?\n    const ratio = 1.4;\n    const scaledWidth = _width * scale * ratio;\n    const scaledHeight = _height * scale * ratio;\n\n    const el = (\n      <g ref={ref} key={body.id}>\n        <use\n          xlinkHref={`#${cloneID}`}\n          width={px(scaledWidth)}\n          height={px(scaledHeight)}\n          x={px(-scaledWidth / 2)}\n          y={px(-scaledHeight / 2)}\n          {...cloneProps}\n        />\n      </g>\n    );\n    body[cloneKey] = {\n      key: svgKey,\n      ref,\n      el,\n    };\n\n    return body;\n  };\n\n  return <Body {...props}>{createBody}</Body>;\n};\n\nexport default valueMemo(Vertices);\n\ntype Props = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  vertexSets: any;\n  options: object;\n  flagInternal: boolean;\n  cloneID?: number;\n  cloneProps: object;\n} & React.ComponentProps<typeof Body>;\n","import { useEffect, cloneElement, useRef, memo } from 'react';\nimport Matter from 'matter-js';\nimport { shallow } from 'tuplerone';\n\nimport { useEngine } from './Engine';\nimport { valueCompare } from './util';\n\n// TODO: return type\nconst Constraint = ({ children, length, ...options }: Props): any => {\n  const engine = useEngine();\n\n  const bodyARef = useRef();\n  const bodyBRef = useRef();\n\n  useEffect(() => {\n    const { current: bodyA } = bodyARef;\n    const { current: bodyB } = bodyBRef;\n    const constraint = shallow(\n      Matter.Constraint.create({\n        bodyA,\n        bodyB,\n        length,\n        ...options,\n      }),\n    );\n    Matter.World.add(engine.world, constraint);\n\n    return () => {\n      Matter.World.remove(engine.world, constraint);\n    };\n  }, [options, engine, length]);\n\n  return [bodyARef, bodyBRef].map((bodyRef, key) =>\n    cloneElement(children![key], {\n      bodyRef,\n      key,\n    }),\n  );\n};\n\ntype Props = {\n  children: [React.ReactElement, React.ReactElement];\n  length?: number;\n};\n\nexport default memo(Constraint, valueCompare);\n","import React, { Fragment } from 'react';\n\nimport Rectangle from '../bodies/Rectangle';\nimport { Size, useMapSizes } from '../util';\n\nconst Walls = ({ options, ...props }: Props) => {\n  const defaultProps = {\n    options: {\n      ...options,\n      isStatic: true,\n    },\n  };\n\n  const { x, y, width, height, wallWidth } = useMapSizes(pickSizes(props));\n\n  const top = {\n    ...defaultProps,\n    x: x + width / 2,\n    y: y + wallWidth / 2,\n    width: width,\n    height: wallWidth,\n  };\n  const bottom = {\n    ...defaultProps,\n    ...top,\n    y: height - wallWidth / 2,\n  };\n  const left = {\n    ...defaultProps,\n    x: x + wallWidth / 2,\n    y: y + height / 2,\n    height: height,\n    width: wallWidth,\n  };\n  const right = {\n    ...defaultProps,\n    ...left,\n    x: width - wallWidth / 2,\n  };\n\n  return (\n    <Fragment>\n      <Rectangle {...top} />\n      <Rectangle {...bottom} />\n      <Rectangle {...left} />\n      <Rectangle {...right} />\n    </Fragment>\n  );\n};\n\nexport default Walls;\n\ntype Props = {\n  x: Size;\n  y: Size;\n  width: Size;\n  height: Size;\n  wallWidth?: Size;\n  options?: React.ComponentProps<typeof Rectangle>['options'];\n};\n\nconst pickSizes = ({\n  x,\n  y,\n  width,\n  height,\n  wallWidth = 100,\n}: Pick<Props, 'x' | 'y' | 'width' | 'height' | 'wallWidth'>) => ({\n  x,\n  y,\n  width,\n  height,\n  wallWidth,\n});\n","import React from 'react';\nimport Matter from 'matter-js';\nimport Render from '../Render';\nimport Walls from './Walls';\nimport Engine from '../Engine';\nimport RenderClones from './RenderClones';\nimport { valueMemo, relX, relY } from '../util';\n\nconst Scene = ({\n  width = 720,\n  height = 540,\n  pixelRatio = 'auto',\n  engineOptions = {},\n  rendererProps = {},\n  mouse = true,\n  gravity,\n  walled = false,\n  wallWidth = 50,\n  children,\n}: Props) => {\n  const rendererOptions = {\n    width,\n    height,\n    background: 'transparent',\n    wireframeBackground: 'transparent',\n    pixelRatio,\n    ...rendererProps.options,\n  };\n  const key = `${rendererOptions.width}-${rendererOptions.height}`;\n\n  const wall = walled ? (\n    <Walls\n      x={-wallWidth}\n      y={-wallWidth}\n      width={engine => relX(1)(engine) + wallWidth}\n      height={engine => relY(1)(engine) + wallWidth}\n      wallWidth={wallWidth}\n      options={{\n        render: {\n          visible: false,\n        },\n      }}\n    />\n  ) : null;\n\n  return (\n    <Engine options={engineOptions} key={key}>\n      <RenderClones\n        {...rendererProps}\n        options={rendererOptions}\n        enableMouse={mouse}\n      >\n        {wall}\n        {(engine: Matter.Engine) => {\n          Object.assign(engine.world.gravity, gravity);\n\n          return children;\n        }}\n      </RenderClones>\n    </Engine>\n  );\n};\n\nexport default valueMemo(Scene);\n\ntype Gravity = {\n  x?: number;\n  y?: number;\n  scale?: number;\n};\ntype RendererProps = Omit<React.ComponentProps<typeof Render>, 'options'> & {\n  options?: Matter.IRendererOptions;\n};\ntype Props = {\n  width?: number;\n  height?: number;\n  pixelRatio?: number | 'auto';\n  engineOptions?: Matter.IEngineDefinition;\n  rendererProps?: RendererProps;\n  mouse?: boolean;\n  gravity?: Gravity;\n  walled?: boolean;\n  wallWidth?: number;\n  children: React.ReactNode;\n};\n","import React from 'react';\nimport Scene from './Scene';\nimport { useWindowSize } from '../util';\n\nconst WindowScene = (props: Props) => {\n  const { width, height } = useWindowSize();\n\n  return <Scene {...props} width={width} height={height} />;\n};\n\nexport default WindowScene;\n\ntype Props = Omit<React.ComponentProps<typeof Scene>, 'width' | 'height'>;\n","import React from 'react';\nimport Matter from 'matter-js';\nimport Vertices from '../bodies/Vertices';\nimport 'pathseg';\n\nconst Shape = ({ paths, sampleLength = 30, ...props }: Props) => {\n  if (!paths) {\n    return null;\n  }\n\n  const vertexSets = paths.map(path =>\n    Matter.Svg.pathToVertices(path, sampleLength),\n  );\n\n  return <Vertices vertexSets={vertexSets} {...props} />;\n};\n\nexport default Shape;\n\ntype Props = {\n  paths: SVGPathElement[];\n  sampleLength?: number;\n} & React.ComponentProps<typeof Vertices>;\n\n// @ts-ignore\nwindow.decomp = require('poly-decomp');\n"],"names":["valueMemo","component","memo","valueCompare","keyFilter","key","startsWith","prev","next","ValueObject","relX","size","engine","render","options","width","relY","height","getSize","mapEntries","object","fn","Object","fromEntries","entries","map","useMapSizes","sizes","useEngine","value","useRerender","useState","updateState","useCallback","Symbol","useWindowSize","windowSize","DefaultMap","init","get","has","set","Map","TrackSet","subs","Set","add","a","forEach","sub","delete","result","track","untrack","clear","trackCats","cats","catsKey","afterAdd","body","length","afterRemove","Matter","Events","on","world","off","cat","useCat","rerender","useEffect","Engine","children","setEngine","shallow","create","clearCats","World","enabled","React","Provider","EngineContext","createContext","useContext","Render","enableMouse","mouseConstraintOptions","props","elementRef","useRef","setRender","element","current","run","runner","Runner","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","stop","remove","context","textures","ref","className","css","renderChildren","Array","isArray","child","useClones","bodies","cloneKey","dom","pickEls","domKey","svg","svgKey","afterUpdate","isSleeping","position","x","y","style","transform","angle","from","el","RenderClones","cloneContainerStyle","viewBox","_templateObject","Body","createBody","bodyRef","sizesKey","push","Rectangle","clone","Bodies","rectangle","createRef","id","Circle","radius","cloneProps","circle","cx","cy","r","px","n","Vertices","vertexSets","flagInternal","cloneID","fromVertices","bounds","min","max","_width","_height","scale","Math","ratio","scaledWidth","scaledHeight","xlinkHref","Constraint","bodyARef","bodyBRef","bodyA","bodyB","constraint","cloneElement","Walls","defaultProps","isStatic","pickSizes","wallWidth","top","bottom","left","right","Fragment","Scene","pixelRatio","engineOptions","rendererProps","gravity","walled","rendererOptions","background","wireframeBackground","wall","visible","assign","WindowScene","Shape","paths","sampleLength","path","Svg","pathToVertices","window","decomp","require"],"mappings":"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"}