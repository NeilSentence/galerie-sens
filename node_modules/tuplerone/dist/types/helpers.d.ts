import { GenericMap, Indexable } from './types';
/**
 * Gets a map element, lazily initializing it with a default value.
 */
export declare const getDefaultLazy: <A, B>(key: A, init: () => B, target: GenericMap<A, B>) => B;
/**
 * Gets a map element, initializing it with a default value.
 */
export declare const getDefault: <A, B>(key: A, defaultValue: B, target: GenericMap<A, B>) => B;
/**
 * Tests if a value is an object.
 *
 * Doesn't test for symbols because symbols are invalid as `WeakMap` keys.
 */
export declare const isObject: (x: any) => x is object;
export declare const forEach: <A>(iterator: Iterator<A, any, undefined>, callback: (value: A) => void) => void;
/**
 * Sets all items from an iterable as index properties on the target object.
 */
export declare const assignArraylike: <A>(iterator: Iterator<A, any, undefined>, target: Indexable<A>) => number;
export declare const arraylikeToIterable: <A>(source: ArrayLike<A>) => IterableIterator<A>;
