/**
 * Gets a map element, lazily initializing it with a default value.
 */
export const getDefaultLazy = (key, init, target) => {
    if (!target.has(key)) {
        const value = init();
        target.set(key, value);
        return value;
    }
    return target.get(key);
};
/**
 * Gets a map element, initializing it with a default value.
 */
export const getDefault = (key, defaultValue, target) => {
    if (!target.has(key)) {
        target.set(key, defaultValue);
        return defaultValue;
    }
    return target.get(key);
};
/**
 * Tests if a value is an object.
 *
 * Doesn't test for symbols because symbols are invalid as `WeakMap` keys.
 */
export const isObject = (x) => x !== null && (typeof x === 'object' || typeof x === 'function');
export const forEach = (iterator, callback) => {
    do {
        const { value, done } = iterator.next();
        if (done) {
            break;
        }
        callback(value);
    } while (true);
};
/**
 * Sets all items from an iterable as index properties on the target object.
 */
export const assignArraylike = (iterator, target) => {
    let i = 0;
    forEach(iterator, (value) => {
        target[i] = value;
        i += 1;
    });
    return i;
};
export const arraylikeToIterable = (source) => {
    let i = 0;
    return {
        next() {
            let done;
            let value;
            if (i < source.length) {
                done = false;
                value = source[i];
                i += 1;
            }
            else {
                done = true;
                // Issue: https://github.com/Microsoft/TypeScript/issues/2983
                value = undefined;
            }
            return {
                done,
                value,
            };
        },
        [Symbol.iterator]() {
            return arraylikeToIterable(source);
        },
    };
};
//# sourceMappingURL=helpers.js.map