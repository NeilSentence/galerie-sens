import Tuple from './Tuple';
import { isObject } from './helpers';
/**
 * Recursively creates a "composite key" (like a "value identity") for
 * an object's entries (key-value pairs).
 */
// tslint:disable-next-line: variable-name
const DeepCompositeSymbol = (object, filter) => {
    const entries = filter ? Object.entries(object).filter(filter) : Object.entries(object);
    // Recursively replace non-tuple object values with tuples
    entries.forEach(entry => update(entry, filter));
    return Tuple.unsafeSymbol(...flatten(entries));
};
export const shallowKey = Symbol('shallow');
export const shallowCache = new WeakSet();
export const shallow = (a) => {
    shallowCache.add(a);
    return a;
};
const update = (entry, filter) => {
    const value = entry[1];
    if (isObject(value) &&
        !value[shallowKey] &&
        !(value instanceof Tuple) &&
        !shallowCache.has(value)) {
        entry[1] = DeepCompositeSymbol(value, filter);
    }
};
const flatten = (entries) => Array.prototype.concat.apply([], entries);
export default DeepCompositeSymbol;
//# sourceMappingURL=DeepCompositeSymbol.js.map