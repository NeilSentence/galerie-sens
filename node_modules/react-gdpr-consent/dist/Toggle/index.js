'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./style.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toggle = function (_React$Component) {
  _inherits(Toggle, _React$Component);

  function Toggle(props) {
    _classCallCheck(this, Toggle);

    var _this = _possibleConstructorReturn(this, (Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call(this, props));

    _this.state = {
      checked: props.checked || false
    };
    _this.toggle = _this.toggle.bind(_this);
    return _this;
  }

  _createClass(Toggle, [{
    key: 'toggle',
    value: function toggle() {
      if (this.props.locked) {
        return;
      }
      this.props.toggle(this.props.id, !this.state.checked);
      this.setState(function (prevState) {
        return {
          checked: !prevState.checked
        };
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var isChecked = this.state.checked;
      var isLocked = this.props.locked;
      return _react2.default.createElement(
        'div',
        { className: 'toggle', onClick: function onClick() {
            return _this2.toggle();
          } },
        _react2.default.createElement(
          'label',
          { className: "toggler toggler-small" + (isChecked ? " checked" : "") + (isLocked ? " locked" : "") },
          _react2.default.createElement(
            'span',
            { className: 'switch-left' },
            'Yes'
          ),
          _react2.default.createElement(
            'span',
            { className: 'switch-right' },
            'No'
          )
        )
      );
    }
  }]);

  return Toggle;
}(_react2.default.Component);

exports.default = Toggle;